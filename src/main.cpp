/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2020-02-06

The MIT License (MIT)
Copyright (c) 2019 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"

#include <stddef.h>
#include <stdio.h>
#include "stm32f10x.h"
#include "CC1101.h"


void clockCoreInit (void *pvParameters);



extern uint8_t rfSettings[];
uint8_t spiReg;

int main(void)
{
	//clockCoreInit();

xTaskCreate(clockCoreInit, "NAME",  10, NULL, tskIDLE_PRIORITY,  NULL);
vTaskStartScheduler();
  while (1)
  {

	  //error loop  hook? make harvesting errors and reboots
	  //spiReg=(uint8_t)(*(rfSettings+1));

  }
}

//core  clock init function, this a critical function
void clockCoreInit (void *pvParameters)
{
	FLASH->ACR |= FLASH_ACR_LATENCY_2;// flash latency delay 2t
	FLASH->ACR |= FLASH_ACR_PRFTBE;// Perfech enable
	RCC->CFGR|=(0xC<<18);// set mul x14
	RCC->CFGR&=~0x00010000; // set pll clk hsi div 2
	RCC->CFGR&=0xfffffffc;
	RCC->CFGR|=0x2;// use pll1 from clock
	RCC->CR|=0x1000000;// enable pll
	RCC->CFGR|=(0<<13); //APB2 no div
	RCC->CFGR|=(4<<10);  // APB1 /2 28  MHz
	RCC->CFGR|=(0<<7); // AHB no div
	while(!(RCC->CR & RCC_CR_PLLRDY));// wait stabilize pll
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));//56 Mhz

	/*RCC->APB1ENR=RCC_APB1ENR_CAN1EN;
		RCC->APB2ENR=RCC_APB2ENR_TIM1EN|RCC_APB2ENR_USART1EN;
		RCC->APB2ENR=RCC_APB2ENR_AFIOEN|RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN|RCC_APB2ENR_IOPCEN|
		RCC_APB2ENR_TIM1EN|RCC_APB2ENR_ADC1EN;// enable clk pereph here
		*/
}

void commInit(void)
{
	RCC->APB1ENR|=RCC_APB1ENR_CAN1EN; //CAN clk EN
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN; //UART1 clk EN
	// uart init definition
	USART1->BRR=((0x1e<<4)|4);//115200
	USART1->CR1|=USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;

	// CAN bus definition
	CAN1->MCR=0;

    //SPI Definition
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN  ;
	SPI1->CR1=0;
	SPI1->CR1=(0x6<<3)|SPI_CR1_MSTR; // clock div 128(56M/128), SPI is a master mode
	SPI1->CR1|=SPI_CR1_SPE;

}
