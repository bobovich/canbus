
canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003104  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d0  20000000  0800325c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000013c  200000d0  0800332c  000200d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000020c  0800332c  0002020c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000996a  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000016f6  00000000  00000000  00029a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005c8  00000000  00000000  0002b160  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0002b728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000034ee  00000000  00000000  0002bc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002597  00000000  00000000  0002f126  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000316bd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000018d4  00000000  00000000  0003173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00033010  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  0003304c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	080031fc 	.word	0x080031fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	080031fc 	.word	0x080031fc

08000150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	f103 0208 	add.w	r2, r3, #8
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f04f 32ff 	mov.w	r2, #4294967295
 8000168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f103 0208 	add.w	r2, r3, #8
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	f103 0208 	add.w	r2, r3, #8
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr

0800018e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800018e:	b480      	push	{r7}
 8000190:	b083      	sub	sp, #12
 8000192:	af00      	add	r7, sp, #0
 8000194:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2200      	movs	r2, #0
 800019a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr

080001a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001a6:	b480      	push	{r7}
 80001a8:	b085      	sub	sp, #20
 80001aa:	af00      	add	r7, sp, #0
 80001ac:	6078      	str	r0, [r7, #4]
 80001ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	68fa      	ldr	r2, [r7, #12]
 80001ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	689a      	ldr	r2, [r3, #8]
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	689b      	ldr	r3, [r3, #8]
 80001c8:	683a      	ldr	r2, [r7, #0]
 80001ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	683a      	ldr	r2, [r7, #0]
 80001d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	1c5a      	adds	r2, r3, #1
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
}
 80001e2:	bf00      	nop
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000202:	d103      	bne.n	800020c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	691b      	ldr	r3, [r3, #16]
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	e00c      	b.n	8000226 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	3308      	adds	r3, #8
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <vListInsert+0x2e>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	429a      	cmp	r2, r3
 8000224:	d9f6      	bls.n	8000214 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	685a      	ldr	r2, [r3, #4]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]
}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr

0800025c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	6892      	ldr	r2, [r2, #8]
 8000272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	6852      	ldr	r2, [r2, #4]
 800027c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	d103      	bne.n	8000290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2200      	movs	r2, #0
 8000294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	681b      	ldr	r3, [r3, #0]
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
	...

080002b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	3b04      	subs	r3, #4
 80002c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3b04      	subs	r3, #4
 80002ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	f023 0201 	bic.w	r2, r3, #1
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	3b04      	subs	r3, #4
 80002de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80002e0:	4a08      	ldr	r2, [pc, #32]	; (8000304 <pxPortInitialiseStack+0x54>)
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3b14      	subs	r3, #20
 80002ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3b20      	subs	r3, #32
 80002f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80002f8:	68fb      	ldr	r3, [r7, #12]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	08000309 	.word	0x08000309

08000308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800030e:	2300      	movs	r3, #0
 8000310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <prvTaskExitError+0x4c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800031a:	d009      	beq.n	8000330 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800031c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000320:	f383 8811 	msr	BASEPRI, r3
 8000324:	f3bf 8f6f 	isb	sy
 8000328:	f3bf 8f4f 	dsb	sy
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	e7fe      	b.n	800032e <prvTaskExitError+0x26>
 8000330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000334:	f383 8811 	msr	BASEPRI, r3
 8000338:	f3bf 8f6f 	isb	sy
 800033c:	f3bf 8f4f 	dsb	sy
 8000340:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000342:	bf00      	nop
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d0fc      	beq.n	8000344 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr
 8000354:	20000000 	.word	0x20000000
	...

08000360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <pxCurrentTCBConst2>)
 8000362:	6819      	ldr	r1, [r3, #0]
 8000364:	6808      	ldr	r0, [r1, #0]
 8000366:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800036a:	f380 8809 	msr	PSP, r0
 800036e:	f3bf 8f6f 	isb	sy
 8000372:	f04f 0000 	mov.w	r0, #0
 8000376:	f380 8811 	msr	BASEPRI, r0
 800037a:	f04e 0e0d 	orr.w	lr, lr, #13
 800037e:	4770      	bx	lr

08000380 <pxCurrentTCBConst2>:
 8000380:	200000f4 	.word	0x200000f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop

08000388 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <prvPortStartFirstTask+0x1c>)
 800038a:	6800      	ldr	r0, [r0, #0]
 800038c:	6800      	ldr	r0, [r0, #0]
 800038e:	f380 8808 	msr	MSP, r0
 8000392:	b662      	cpsie	i
 8000394:	b661      	cpsie	f
 8000396:	f3bf 8f4f 	dsb	sy
 800039a:	f3bf 8f6f 	isb	sy
 800039e:	df00      	svc	0
 80003a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80003a2:	bf00      	nop
 80003a4:	e000ed08 	.word	0xe000ed08

080003a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80003ae:	4b31      	ldr	r3, [pc, #196]	; (8000474 <xPortStartScheduler+0xcc>)
 80003b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80003d0:	b2da      	uxtb	r2, r3
 80003d2:	4b29      	ldr	r3, [pc, #164]	; (8000478 <xPortStartScheduler+0xd0>)
 80003d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80003d6:	4b29      	ldr	r3, [pc, #164]	; (800047c <xPortStartScheduler+0xd4>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003dc:	e009      	b.n	80003f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <xPortStartScheduler+0xd4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	4a25      	ldr	r2, [pc, #148]	; (800047c <xPortStartScheduler+0xd4>)
 80003e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80003e8:	78fb      	ldrb	r3, [r7, #3]
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80003f2:	78fb      	ldrb	r3, [r7, #3]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003fa:	2b80      	cmp	r3, #128	; 0x80
 80003fc:	d0ef      	beq.n	80003de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80003fe:	4b1f      	ldr	r3, [pc, #124]	; (800047c <xPortStartScheduler+0xd4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	d009      	beq.n	800041e <xPortStartScheduler+0x76>
 800040a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800040e:	f383 8811 	msr	BASEPRI, r3
 8000412:	f3bf 8f6f 	isb	sy
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	e7fe      	b.n	800041c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <xPortStartScheduler+0xd4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <xPortStartScheduler+0xd4>)
 8000426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <xPortStartScheduler+0xd4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000430:	4a12      	ldr	r2, [pc, #72]	; (800047c <xPortStartScheduler+0xd4>)
 8000432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	b2da      	uxtb	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <xPortStartScheduler+0xd8>)
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <xPortStartScheduler+0xd8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <xPortStartScheduler+0xd8>)
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <xPortStartScheduler+0xd8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000454:	f000 f8b0 	bl	80005b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <xPortStartScheduler+0xdc>)
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800045e:	f7ff ff93 	bl	8000388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000462:	f001 f8b3 	bl	80015cc <vTaskSwitchContext>
	prvTaskExitError();
 8000466:	f7ff ff4f 	bl	8000308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	e000e400 	.word	0xe000e400
 8000478:	200000ec 	.word	0x200000ec
 800047c:	200000f0 	.word	0x200000f0
 8000480:	e000ed20 	.word	0xe000ed20
 8000484:	20000000 	.word	0x20000000

08000488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <vPortEnterCritical+0x54>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <vPortEnterCritical+0x54>)
 80004a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <vPortEnterCritical+0x54>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d10e      	bne.n	80004d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <vPortEnterCritical+0x58>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d009      	beq.n	80004d0 <vPortEnterCritical+0x48>
 80004bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004c0:	f383 8811 	msr	BASEPRI, r3
 80004c4:	f3bf 8f6f 	isb	sy
 80004c8:	f3bf 8f4f 	dsb	sy
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	e7fe      	b.n	80004ce <vPortEnterCritical+0x46>
	}
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000
 80004e0:	e000ed04 	.word	0xe000ed04

080004e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80004ea:	4b10      	ldr	r3, [pc, #64]	; (800052c <vPortExitCritical+0x48>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d109      	bne.n	8000506 <vPortExitCritical+0x22>
 80004f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004f6:	f383 8811 	msr	BASEPRI, r3
 80004fa:	f3bf 8f6f 	isb	sy
 80004fe:	f3bf 8f4f 	dsb	sy
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e7fe      	b.n	8000504 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <vPortExitCritical+0x48>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3b01      	subs	r3, #1
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <vPortExitCritical+0x48>)
 800050e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <vPortExitCritical+0x48>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d104      	bne.n	8000522 <vPortExitCritical+0x3e>
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	20000000 	.word	0x20000000

08000530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000530:	f3ef 8009 	mrs	r0, PSP
 8000534:	f3bf 8f6f 	isb	sy
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <pxCurrentTCBConst>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000540:	6010      	str	r0, [r2, #0]
 8000542:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000546:	f04f 0050 	mov.w	r0, #80	; 0x50
 800054a:	f380 8811 	msr	BASEPRI, r0
 800054e:	f001 f83d 	bl	80015cc <vTaskSwitchContext>
 8000552:	f04f 0000 	mov.w	r0, #0
 8000556:	f380 8811 	msr	BASEPRI, r0
 800055a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	6808      	ldr	r0, [r1, #0]
 8000562:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000566:	f380 8809 	msr	PSP, r0
 800056a:	f3bf 8f6f 	isb	sy
 800056e:	4770      	bx	lr

08000570 <pxCurrentTCBConst>:
 8000570:	200000f4 	.word	0x200000f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000574:	bf00      	nop
 8000576:	bf00      	nop

08000578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
	__asm volatile
 800057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000582:	f383 8811 	msr	BASEPRI, r3
 8000586:	f3bf 8f6f 	isb	sy
 800058a:	f3bf 8f4f 	dsb	sy
 800058e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000590:	f000 ff64 	bl	800145c <xTaskIncrementTick>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d003      	beq.n	80005a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <SysTick_Handler+0x3c>)
 800059c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	e000ed04 	.word	0xe000ed04

080005b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <vPortSetupTimerInterrupt+0x28>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <vPortSetupTimerInterrupt+0x2c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortSetupTimerInterrupt+0x30>)
 80005ca:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80005ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <vPortSetupTimerInterrupt+0x28>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	601a      	str	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000e010 	.word	0xe000e010
 80005e4:	e000e018 	.word	0xe000e018
 80005e8:	e000e014 	.word	0xe000e014

080005ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80005f2:	f3ef 8305 	mrs	r3, IPSR
 80005f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b0f      	cmp	r3, #15
 80005fc:	d913      	bls.n	8000626 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <vPortValidateInterruptPriority+0x68>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <vPortValidateInterruptPriority+0x6c>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	7afa      	ldrb	r2, [r7, #11]
 800060e:	429a      	cmp	r2, r3
 8000610:	d209      	bcs.n	8000626 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	e7fe      	b.n	8000624 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <vPortValidateInterruptPriority+0x70>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <vPortValidateInterruptPriority+0x74>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d909      	bls.n	800064a <vPortValidateInterruptPriority+0x5e>
 8000636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	e7fe      	b.n	8000648 <vPortValidateInterruptPriority+0x5c>
	}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	e000e3f0 	.word	0xe000e3f0
 8000658:	200000ec 	.word	0x200000ec
 800065c:	e000ed0c 	.word	0xe000ed0c
 8000660:	200000f0 	.word	0x200000f0

08000664 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800066c:	f000 fe3e 	bl	80012ec <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f002 fc87 	bl	8002f84 <malloc>
 8000676:	4603      	mov	r3, r0
 8000678:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800067a:	f000 fe45 	bl	8001308 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	if( pv )
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d006      	beq.n	80006a4 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000696:	f000 fe29 	bl	80012ec <vTaskSuspendAll>
		{
			free( pv );
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f002 fc7a 	bl	8002f94 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80006a0:	f000 fe32 	bl	8001308 <xTaskResumeAll>
	}
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d109      	bne.n	80006d4 <xQueueGenericReset+0x28>
 80006c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e7fe      	b.n	80006d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80006d4:	f7ff fed8 	bl	8000488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006e0:	68f9      	ldr	r1, [r7, #12]
 80006e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	441a      	add	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2200      	movs	r2, #0
 80006f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000704:	3b01      	subs	r3, #1
 8000706:	68f9      	ldr	r1, [r7, #12]
 8000708:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	441a      	add	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	22ff      	movs	r2, #255	; 0xff
 8000718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d114      	bne.n	8000754 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01a      	beq.n	8000768 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3310      	adds	r3, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fff0 	bl	800171c <xTaskRemoveFromEventList>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d012      	beq.n	8000768 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <xQueueGenericReset+0xcc>)
 8000744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	f3bf 8f4f 	dsb	sy
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	e009      	b.n	8000768 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3310      	adds	r3, #16
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fcf9 	bl	8000150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3324      	adds	r3, #36	; 0x24
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fcf4 	bl	8000150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000768:	f7ff febc 	bl	80004e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800076c:	2301      	movs	r3, #1
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000ed04 	.word	0xe000ed04

0800077c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d109      	bne.n	80007a4 <xQueueGenericCreate+0x28>
 8000790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	e7fe      	b.n	80007a2 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	fb02 f303 	mul.w	r3, r2, r3
 80007ac:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3348      	adds	r3, #72	; 0x48
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff56 	bl	8000664 <pvPortMalloc>
 80007b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	3348      	adds	r3, #72	; 0x48
 80007c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	4613      	mov	r3, r2
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	68b9      	ldr	r1, [r7, #8]
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f000 f805 	bl	80007e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80007dc:	69bb      	ldr	r3, [r7, #24]
	}
 80007de:	4618      	mov	r0, r3
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b084      	sub	sp, #16
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	60f8      	str	r0, [r7, #12]
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e002      	b.n	8000808 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	68ba      	ldr	r2, [r7, #8]
 8000812:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000814:	2101      	movs	r1, #1
 8000816:	69b8      	ldr	r0, [r7, #24]
 8000818:	f7ff ff48 	bl	80006ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800083a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083c:	2b00      	cmp	r3, #0
 800083e:	d109      	bne.n	8000854 <xQueueGenericSend+0x30>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
 8000852:	e7fe      	b.n	8000852 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d103      	bne.n	8000862 <xQueueGenericSend+0x3e>
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <xQueueGenericSend+0x42>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <xQueueGenericSend+0x44>
 8000866:	2300      	movs	r3, #0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <xQueueGenericSend+0x5c>
 800086c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
 800087e:	e7fe      	b.n	800087e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d103      	bne.n	800088e <xQueueGenericSend+0x6a>
 8000886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800088a:	2b01      	cmp	r3, #1
 800088c:	d101      	bne.n	8000892 <xQueueGenericSend+0x6e>
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <xQueueGenericSend+0x70>
 8000892:	2300      	movs	r3, #0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <xQueueGenericSend+0x88>
 8000898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	623b      	str	r3, [r7, #32]
 80008aa:	e7fe      	b.n	80008aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80008ac:	f001 f8ce 	bl	8001a4c <xTaskGetSchedulerState>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <xQueueGenericSend+0x98>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <xQueueGenericSend+0x9c>
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <xQueueGenericSend+0x9e>
 80008c0:	2300      	movs	r3, #0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d109      	bne.n	80008da <xQueueGenericSend+0xb6>
 80008c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008ca:	f383 8811 	msr	BASEPRI, r3
 80008ce:	f3bf 8f6f 	isb	sy
 80008d2:	f3bf 8f4f 	dsb	sy
 80008d6:	61fb      	str	r3, [r7, #28]
 80008d8:	e7fe      	b.n	80008d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80008da:	f7ff fdd5 	bl	8000488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d302      	bcc.n	80008f0 <xQueueGenericSend+0xcc>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d129      	bne.n	8000944 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008f0:	683a      	ldr	r2, [r7, #0]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008f6:	f000 fa03 	bl	8000d00 <prvCopyDataToQueue>
 80008fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	2b00      	cmp	r3, #0
 8000902:	d010      	beq.n	8000926 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000906:	3324      	adds	r3, #36	; 0x24
 8000908:	4618      	mov	r0, r3
 800090a:	f000 ff07 	bl	800171c <xTaskRemoveFromEventList>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d013      	beq.n	800093c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000914:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <xQueueGenericSend+0x1f0>)
 8000916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	f3bf 8f4f 	dsb	sy
 8000920:	f3bf 8f6f 	isb	sy
 8000924:	e00a      	b.n	800093c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	2b00      	cmp	r3, #0
 800092a:	d007      	beq.n	800093c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800092c:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <xQueueGenericSend+0x1f0>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800093c:	f7ff fdd2 	bl	80004e4 <vPortExitCritical>
				return pdPASS;
 8000940:	2301      	movs	r3, #1
 8000942:	e063      	b.n	8000a0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800094a:	f7ff fdcb 	bl	80004e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800094e:	2300      	movs	r3, #0
 8000950:	e05c      	b.n	8000a0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000954:	2b00      	cmp	r3, #0
 8000956:	d106      	bne.n	8000966 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f000 ff3f 	bl	80017e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000962:	2301      	movs	r3, #1
 8000964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000966:	f7ff fdbd 	bl	80004e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800096a:	f000 fcbf 	bl	80012ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800096e:	f7ff fd8b 	bl	8000488 <vPortEnterCritical>
 8000972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000978:	b25b      	sxtb	r3, r3
 800097a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800097e:	d103      	bne.n	8000988 <xQueueGenericSend+0x164>
 8000980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000982:	2200      	movs	r2, #0
 8000984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800098a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800098e:	b25b      	sxtb	r3, r3
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d103      	bne.n	800099e <xQueueGenericSend+0x17a>
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800099e:	f7ff fda1 	bl	80004e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4611      	mov	r1, r2
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 ff2e 	bl	800180c <xTaskCheckForTimeOut>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d124      	bne.n	8000a00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009b8:	f000 fa9a 	bl	8000ef0 <prvIsQueueFull>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d018      	beq.n	80009f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c4:	3310      	adds	r3, #16
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fe58 	bl	8001680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80009d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009d2:	f000 fa25 	bl	8000e20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80009d6:	f000 fc97 	bl	8001308 <xTaskResumeAll>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f47f af7c 	bne.w	80008da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <xQueueGenericSend+0x1f0>)
 80009e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	f3bf 8f4f 	dsb	sy
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	e772      	b.n	80008da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80009f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009f6:	f000 fa13 	bl	8000e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80009fa:	f000 fc85 	bl	8001308 <xTaskResumeAll>
 80009fe:	e76c      	b.n	80008da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a02:	f000 fa0d 	bl	8000e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000a06:	f000 fc7f 	bl	8001308 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3738      	adds	r7, #56	; 0x38
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	e000ed04 	.word	0xe000ed04

08000a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	; 0x40
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <xQueueGenericSendFromISR+0x2c>
 8000a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a34:	f383 8811 	msr	BASEPRI, r3
 8000a38:	f3bf 8f6f 	isb	sy
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a42:	e7fe      	b.n	8000a42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d103      	bne.n	8000a52 <xQueueGenericSendFromISR+0x3a>
 8000a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <xQueueGenericSendFromISR+0x3e>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <xQueueGenericSendFromISR+0x40>
 8000a56:	2300      	movs	r3, #0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d109      	bne.n	8000a70 <xQueueGenericSendFromISR+0x58>
 8000a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a60:	f383 8811 	msr	BASEPRI, r3
 8000a64:	f3bf 8f6f 	isb	sy
 8000a68:	f3bf 8f4f 	dsb	sy
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6e:	e7fe      	b.n	8000a6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d103      	bne.n	8000a7e <xQueueGenericSendFromISR+0x66>
 8000a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d101      	bne.n	8000a82 <xQueueGenericSendFromISR+0x6a>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <xQueueGenericSendFromISR+0x6c>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d109      	bne.n	8000a9c <xQueueGenericSendFromISR+0x84>
 8000a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8c:	f383 8811 	msr	BASEPRI, r3
 8000a90:	f3bf 8f6f 	isb	sy
 8000a94:	f3bf 8f4f 	dsb	sy
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	e7fe      	b.n	8000a9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000a9c:	f7ff fda6 	bl	80005ec <vPortValidateInterruptPriority>
	__asm volatile
 8000aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8000aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa8:	f383 8811 	msr	BASEPRI, r3
 8000aac:	f3bf 8f6f 	isb	sy
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	61fa      	str	r2, [r7, #28]
 8000ab6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d302      	bcc.n	8000ace <xQueueGenericSendFromISR+0xb6>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d12f      	bne.n	8000b2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ae4:	f000 f90c 	bl	8000d00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000ae8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d112      	bne.n	8000b18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d016      	beq.n	8000b28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000afc:	3324      	adds	r3, #36	; 0x24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fe0c 	bl	800171c <xTaskRemoveFromEventList>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00e      	beq.n	8000b28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00b      	beq.n	8000b28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e007      	b.n	8000b28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	b25a      	sxtb	r2, r3
 8000b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000b2c:	e001      	b.n	8000b32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b34:	617b      	str	r3, [r7, #20]
	__asm volatile
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3740      	adds	r7, #64	; 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d109      	bne.n	8000b76 <xQueueReceive+0x2e>
	__asm volatile
 8000b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b66:	f383 8811 	msr	BASEPRI, r3
 8000b6a:	f3bf 8f6f 	isb	sy
 8000b6e:	f3bf 8f4f 	dsb	sy
 8000b72:	623b      	str	r3, [r7, #32]
 8000b74:	e7fe      	b.n	8000b74 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d103      	bne.n	8000b84 <xQueueReceive+0x3c>
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <xQueueReceive+0x40>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <xQueueReceive+0x42>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d109      	bne.n	8000ba2 <xQueueReceive+0x5a>
 8000b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b92:	f383 8811 	msr	BASEPRI, r3
 8000b96:	f3bf 8f6f 	isb	sy
 8000b9a:	f3bf 8f4f 	dsb	sy
 8000b9e:	61fb      	str	r3, [r7, #28]
 8000ba0:	e7fe      	b.n	8000ba0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000ba2:	f000 ff53 	bl	8001a4c <xTaskGetSchedulerState>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <xQueueReceive+0x6a>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <xQueueReceive+0x6e>
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e000      	b.n	8000bb8 <xQueueReceive+0x70>
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d109      	bne.n	8000bd0 <xQueueReceive+0x88>
 8000bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc0:	f383 8811 	msr	BASEPRI, r3
 8000bc4:	f3bf 8f6f 	isb	sy
 8000bc8:	f3bf 8f4f 	dsb	sy
 8000bcc:	61bb      	str	r3, [r7, #24]
 8000bce:	e7fe      	b.n	8000bce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000bd0:	f7ff fc5a 	bl	8000488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d01f      	beq.n	8000c20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000be4:	f000 f8f6 	bl	8000dd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d00f      	beq.n	8000c18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fd8d 	bl	800171c <xTaskRemoveFromEventList>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d007      	beq.n	8000c18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000c08:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <xQueueReceive+0x1b4>)
 8000c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	f3bf 8f4f 	dsb	sy
 8000c14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000c18:	f7ff fc64 	bl	80004e4 <vPortExitCritical>
				return pdPASS;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e069      	b.n	8000cf4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000c26:	f7ff fc5d 	bl	80004e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e062      	b.n	8000cf4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d106      	bne.n	8000c42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 fdd1 	bl	80017e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000c42:	f7ff fc4f 	bl	80004e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000c46:	f000 fb51 	bl	80012ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000c4a:	f7ff fc1d 	bl	8000488 <vPortEnterCritical>
 8000c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5a:	d103      	bne.n	8000c64 <xQueueReceive+0x11c>
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c70:	d103      	bne.n	8000c7a <xQueueReceive+0x132>
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c7a:	f7ff fc33 	bl	80004e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c7e:	1d3a      	adds	r2, r7, #4
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 fdc0 	bl	800180c <xTaskCheckForTimeOut>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d123      	bne.n	8000cda <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c94:	f000 f916 	bl	8000ec4 <prvIsQueueEmpty>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d017      	beq.n	8000cce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	3324      	adds	r3, #36	; 0x24
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fcea 	bl	8001680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cae:	f000 f8b7 	bl	8000e20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000cb2:	f000 fb29 	bl	8001308 <xTaskResumeAll>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d189      	bne.n	8000bd0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <xQueueReceive+0x1b4>)
 8000cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	f3bf 8f6f 	isb	sy
 8000ccc:	e780      	b.n	8000bd0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cd0:	f000 f8a6 	bl	8000e20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000cd4:	f000 fb18 	bl	8001308 <xTaskResumeAll>
 8000cd8:	e77a      	b.n	8000bd0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cdc:	f000 f8a0 	bl	8000e20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000ce0:	f000 fb12 	bl	8001308 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ce6:	f000 f8ed 	bl	8000ec4 <prvIsQueueEmpty>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f43f af6f 	beq.w	8000bd0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000cf2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	e000ed04 	.word	0xe000ed04

08000d00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d10d      	bne.n	8000d3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14d      	bne.n	8000dc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 feac 	bl	8001a88 <xTaskPriorityDisinherit>
 8000d30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	e043      	b.n	8000dc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d119      	bne.n	8000d74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6858      	ldr	r0, [r3, #4]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68b9      	ldr	r1, [r7, #8]
 8000d4c:	f002 f92a 	bl	8002fa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	441a      	add	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d32b      	bcc.n	8000dc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	e026      	b.n	8000dc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	68d8      	ldr	r0, [r3, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	f002 f910 	bl	8002fa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	441a      	add	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	425b      	negs	r3, r3
 8000daa:	441a      	add	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d105      	bne.n	8000dc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d002      	beq.n	8000dc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000dca:	697b      	ldr	r3, [r7, #20]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d018      	beq.n	8000e18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	441a      	add	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d303      	bcc.n	8000e08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68d9      	ldr	r1, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	461a      	mov	r2, r3
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f002 f8c6 	bl	8002fa4 <memcpy>
	}
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000e28:	f7ff fb2e 	bl	8000488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e34:	e011      	b.n	8000e5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d012      	beq.n	8000e64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3324      	adds	r3, #36	; 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fc6a 	bl	800171c <xTaskRemoveFromEventList>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000e4e:	f000 fd3d 	bl	80018cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	dce9      	bgt.n	8000e36 <prvUnlockQueue+0x16>
 8000e62:	e000      	b.n	8000e66 <prvUnlockQueue+0x46>
					break;
 8000e64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	22ff      	movs	r2, #255	; 0xff
 8000e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000e6e:	f7ff fb39 	bl	80004e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000e72:	f7ff fb09 	bl	8000488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e7e:	e011      	b.n	8000ea4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d012      	beq.n	8000eae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3310      	adds	r3, #16
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fc45 	bl	800171c <xTaskRemoveFromEventList>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000e98:	f000 fd18 	bl	80018cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dce9      	bgt.n	8000e80 <prvUnlockQueue+0x60>
 8000eac:	e000      	b.n	8000eb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000eae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000eb8:	f7ff fb14 	bl	80004e4 <vPortExitCritical>
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ecc:	f7ff fadc 	bl	8000488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e001      	b.n	8000ee2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000ee2:	f7ff faff 	bl	80004e4 <vPortExitCritical>

	return xReturn;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000ef8:	f7ff fac6 	bl	8000488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d102      	bne.n	8000f0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	e001      	b.n	8000f12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000f12:	f7ff fae7 	bl	80004e4 <vPortExitCritical>

	return xReturn;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000f30:	f7ff faaa 	bl	8000488 <vPortEnterCritical>
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d103      	bne.n	8000f4a <vQueueWaitForMessageRestricted+0x2a>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f56:	d103      	bne.n	8000f60 <vQueueWaitForMessageRestricted+0x40>
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f60:	f7ff fac0 	bl	80004e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3324      	adds	r3, #36	; 0x24
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fba7 	bl	80016c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff50 	bl	8000e20 <prvUnlockQueue>
	}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	4613      	mov	r3, r2
 8000f96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fb61 	bl	8000664 <pvPortMalloc>
 8000fa2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00e      	beq.n	8000fc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000faa:	2050      	movs	r0, #80	; 0x50
 8000fac:	f7ff fb5a 	bl	8000664 <pvPortMalloc>
 8000fb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000fbe:	e005      	b.n	8000fcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000fc0:	6978      	ldr	r0, [r7, #20]
 8000fc2:	f7ff fb61 	bl	8000688 <vPortFree>
 8000fc6:	e001      	b.n	8000fcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d013      	beq.n	8000ffa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fd2:	88fa      	ldrh	r2, [r7, #6]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9303      	str	r3, [sp, #12]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f80e 	bl	800100a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000fee:	69f8      	ldr	r0, [r7, #28]
 8000ff0:	f000 f892 	bl	8001118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e002      	b.n	8001000 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001000:	69bb      	ldr	r3, [r7, #24]
	}
 8001002:	4618      	mov	r0, r3
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b088      	sub	sp, #32
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001022:	3b01      	subs	r3, #1
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f023 0307 	bic.w	r3, r3, #7
 8001030:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	2b00      	cmp	r3, #0
 800103a:	d009      	beq.n	8001050 <prvInitialiseNewTask+0x46>
 800103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001040:	f383 8811 	msr	BASEPRI, r3
 8001044:	f3bf 8f6f 	isb	sy
 8001048:	f3bf 8f4f 	dsb	sy
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e7fe      	b.n	800104e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d01f      	beq.n	8001096 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e012      	b.n	8001082 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	4413      	add	r3, r2
 8001062:	7819      	ldrb	r1, [r3, #0]
 8001064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	3334      	adds	r3, #52	; 0x34
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	3301      	adds	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b09      	cmp	r3, #9
 8001086:	d9e9      	bls.n	800105c <prvInitialiseNewTask+0x52>
 8001088:	e000      	b.n	800108c <prvInitialiseNewTask+0x82>
			{
				break;
 800108a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	2200      	movs	r2, #0
 8001090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001094:	e003      	b.n	800109e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d901      	bls.n	80010a8 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80010a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010b2:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80010b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	3304      	adds	r3, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f865 	bl	800018e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c6:	3318      	adds	r3, #24
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f860 	bl	800018e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	f1c3 0202 	rsb	r2, r3, #2
 80010da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80010e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e6:	2200      	movs	r2, #0
 80010e8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80010ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	68f9      	ldr	r1, [r7, #12]
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f7ff f8da 	bl	80002b0 <pxPortInitialiseStack>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001100:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800110c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001120:	f7ff f9b2 	bl	8000488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <prvAddNewTaskToReadyList+0xb8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <prvAddNewTaskToReadyList+0xb8>)
 800112c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <prvAddNewTaskToReadyList+0xbc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001136:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <prvAddNewTaskToReadyList+0xbc>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800113c:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <prvAddNewTaskToReadyList+0xb8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d110      	bne.n	8001166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001144:	f000 fbe6 	bl	8001914 <prvInitialiseTaskLists>
 8001148:	e00d      	b.n	8001166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <prvAddNewTaskToReadyList+0xc0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <prvAddNewTaskToReadyList+0xbc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	429a      	cmp	r2, r3
 800115e:	d802      	bhi.n	8001166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001160:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <prvAddNewTaskToReadyList+0xbc>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <prvAddNewTaskToReadyList+0xc4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <prvAddNewTaskToReadyList+0xc4>)
 800116e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2201      	movs	r2, #1
 8001176:	409a      	lsls	r2, r3
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <prvAddNewTaskToReadyList+0xc8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4313      	orrs	r3, r2
 800117e:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <prvAddNewTaskToReadyList+0xc8>)
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <prvAddNewTaskToReadyList+0xcc>)
 8001190:	441a      	add	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3304      	adds	r3, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7ff f804 	bl	80001a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800119e:	f7ff f9a1 	bl	80004e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <prvAddNewTaskToReadyList+0xc0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00e      	beq.n	80011c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <prvAddNewTaskToReadyList+0xbc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <prvAddNewTaskToReadyList+0xd0>)
 80011ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000190 	.word	0x20000190
 80011d4:	200000f4 	.word	0x200000f4
 80011d8:	2000019c 	.word	0x2000019c
 80011dc:	200001ac 	.word	0x200001ac
 80011e0:	20000198 	.word	0x20000198
 80011e4:	200000f8 	.word	0x200000f8
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d016      	beq.n	800122c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <vTaskDelay+0x60>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d009      	beq.n	800121a <vTaskDelay+0x2e>
 8001206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120a:	f383 8811 	msr	BASEPRI, r3
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	e7fe      	b.n	8001218 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800121a:	f000 f867 	bl	80012ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800121e:	2100      	movs	r1, #0
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fcb5 	bl	8001b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001226:	f000 f86f 	bl	8001308 <xTaskResumeAll>
 800122a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d107      	bne.n	8001242 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001232:	4b07      	ldr	r3, [pc, #28]	; (8001250 <vTaskDelay+0x64>)
 8001234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	f3bf 8f4f 	dsb	sy
 800123e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001b8 	.word	0x200001b8
 8001250:	e000ed04 	.word	0xe000ed04

08001254 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <vTaskStartScheduler+0x80>)
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2300      	movs	r3, #0
 8001264:	2246      	movs	r2, #70	; 0x46
 8001266:	491c      	ldr	r1, [pc, #112]	; (80012d8 <vTaskStartScheduler+0x84>)
 8001268:	481c      	ldr	r0, [pc, #112]	; (80012dc <vTaskStartScheduler+0x88>)
 800126a:	f7ff fe8d 	bl	8000f88 <xTaskCreate>
 800126e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001276:	f000 fcf1 	bl	8001c5c <xTimerCreateTimerTask>
 800127a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d115      	bne.n	80012ae <vTaskStartScheduler+0x5a>
 8001282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001286:	f383 8811 	msr	BASEPRI, r3
 800128a:	f3bf 8f6f 	isb	sy
 800128e:	f3bf 8f4f 	dsb	sy
 8001292:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <vTaskStartScheduler+0x8c>)
 8001296:	f04f 32ff 	mov.w	r2, #4294967295
 800129a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <vTaskStartScheduler+0x90>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <vTaskStartScheduler+0x94>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80012a8:	f7ff f87e 	bl	80003a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80012ac:	e00d      	b.n	80012ca <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d109      	bne.n	80012ca <vTaskStartScheduler+0x76>
 80012b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ba:	f383 8811 	msr	BASEPRI, r3
 80012be:	f3bf 8f6f 	isb	sy
 80012c2:	f3bf 8f4f 	dsb	sy
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	e7fe      	b.n	80012c8 <vTaskStartScheduler+0x74>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001b4 	.word	0x200001b4
 80012d8:	08003214 	.word	0x08003214
 80012dc:	080018e5 	.word	0x080018e5
 80012e0:	200001b0 	.word	0x200001b0
 80012e4:	2000019c 	.word	0x2000019c
 80012e8:	20000194 	.word	0x20000194

080012ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <vTaskSuspendAll+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a03      	ldr	r2, [pc, #12]	; (8001304 <vTaskSuspendAll+0x18>)
 80012f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200001b8 	.word	0x200001b8

08001308 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <xTaskResumeAll+0x114>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <xTaskResumeAll+0x2a>
 800131e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001322:	f383 8811 	msr	BASEPRI, r3
 8001326:	f3bf 8f6f 	isb	sy
 800132a:	f3bf 8f4f 	dsb	sy
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	e7fe      	b.n	8001330 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001332:	f7ff f8a9 	bl	8000488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <xTaskResumeAll+0x114>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	4a37      	ldr	r2, [pc, #220]	; (800141c <xTaskResumeAll+0x114>)
 800133e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <xTaskResumeAll+0x114>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d161      	bne.n	800140c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001348:	4b35      	ldr	r3, [pc, #212]	; (8001420 <xTaskResumeAll+0x118>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d05d      	beq.n	800140c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001350:	e02e      	b.n	80013b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <xTaskResumeAll+0x11c>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3318      	adds	r3, #24
 800135e:	4618      	mov	r0, r3
 8001360:	f7fe ff7c 	bl	800025c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3304      	adds	r3, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f7fe ff77 	bl	800025c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	2201      	movs	r2, #1
 8001374:	409a      	lsls	r2, r3
 8001376:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <xTaskResumeAll+0x120>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <xTaskResumeAll+0x120>)
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4a27      	ldr	r2, [pc, #156]	; (800142c <xTaskResumeAll+0x124>)
 800138e:	441a      	add	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3304      	adds	r3, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f7fe ff05 	bl	80001a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <xTaskResumeAll+0x128>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d302      	bcc.n	80013b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <xTaskResumeAll+0x12c>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <xTaskResumeAll+0x11c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1cc      	bne.n	8001352 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80013be:	f000 fb25 	bl	8001a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <xTaskResumeAll+0x130>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d010      	beq.n	80013f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80013ce:	f000 f845 	bl	800145c <xTaskIncrementTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <xTaskResumeAll+0x12c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f1      	bne.n	80013ce <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <xTaskResumeAll+0x130>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <xTaskResumeAll+0x12c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d009      	beq.n	800140c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <xTaskResumeAll+0x134>)
 80013fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800140c:	f7ff f86a 	bl	80004e4 <vPortExitCritical>

	return xAlreadyYielded;
 8001410:	68bb      	ldr	r3, [r7, #8]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001b8 	.word	0x200001b8
 8001420:	20000190 	.word	0x20000190
 8001424:	20000150 	.word	0x20000150
 8001428:	20000198 	.word	0x20000198
 800142c:	200000f8 	.word	0x200000f8
 8001430:	200000f4 	.word	0x200000f4
 8001434:	200001a4 	.word	0x200001a4
 8001438:	200001a0 	.word	0x200001a0
 800143c:	e000ed04 	.word	0xe000ed04

08001440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <xTaskGetTickCount+0x18>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000194 	.word	0x20000194

0800145c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001466:	4b4e      	ldr	r3, [pc, #312]	; (80015a0 <xTaskIncrementTick+0x144>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 808d 	bne.w	800158a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001470:	4b4c      	ldr	r3, [pc, #304]	; (80015a4 <xTaskIncrementTick+0x148>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001478:	4a4a      	ldr	r2, [pc, #296]	; (80015a4 <xTaskIncrementTick+0x148>)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d11f      	bne.n	80014c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001484:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <xTaskIncrementTick+0x14c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <xTaskIncrementTick+0x46>
 800148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001492:	f383 8811 	msr	BASEPRI, r3
 8001496:	f3bf 8f6f 	isb	sy
 800149a:	f3bf 8f4f 	dsb	sy
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	e7fe      	b.n	80014a0 <xTaskIncrementTick+0x44>
 80014a2:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <xTaskIncrementTick+0x14c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <xTaskIncrementTick+0x150>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a3e      	ldr	r2, [pc, #248]	; (80015a8 <xTaskIncrementTick+0x14c>)
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <xTaskIncrementTick+0x150>)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <xTaskIncrementTick+0x154>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <xTaskIncrementTick+0x154>)
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	f000 faa4 	bl	8001a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80014c4:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <xTaskIncrementTick+0x158>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d348      	bcc.n	8001560 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014ce:	4b36      	ldr	r3, [pc, #216]	; (80015a8 <xTaskIncrementTick+0x14c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d104      	bne.n	80014e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <xTaskIncrementTick+0x158>)
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	601a      	str	r2, [r3, #0]
					break;
 80014e0:	e03e      	b.n	8001560 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <xTaskIncrementTick+0x14c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d203      	bcs.n	8001502 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <xTaskIncrementTick+0x158>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001500:	e02e      	b.n	8001560 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3304      	adds	r3, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fea8 	bl	800025c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	3318      	adds	r3, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe9f 	bl	800025c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	2201      	movs	r2, #1
 8001524:	409a      	lsls	r2, r3
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <xTaskIncrementTick+0x15c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4313      	orrs	r3, r2
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <xTaskIncrementTick+0x15c>)
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <xTaskIncrementTick+0x160>)
 800153e:	441a      	add	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3304      	adds	r3, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f7fe fe2d 	bl	80001a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <xTaskIncrementTick+0x164>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	429a      	cmp	r2, r3
 8001558:	d3b9      	bcc.n	80014ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800155e:	e7b6      	b.n	80014ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <xTaskIncrementTick+0x164>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001566:	4915      	ldr	r1, [pc, #84]	; (80015bc <xTaskIncrementTick+0x160>)
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d901      	bls.n	800157c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001578:	2301      	movs	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <xTaskIncrementTick+0x168>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e004      	b.n	8001594 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <xTaskIncrementTick+0x16c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <xTaskIncrementTick+0x16c>)
 8001592:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001594:	697b      	ldr	r3, [r7, #20]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200001b8 	.word	0x200001b8
 80015a4:	20000194 	.word	0x20000194
 80015a8:	20000148 	.word	0x20000148
 80015ac:	2000014c 	.word	0x2000014c
 80015b0:	200001a8 	.word	0x200001a8
 80015b4:	200001b0 	.word	0x200001b0
 80015b8:	20000198 	.word	0x20000198
 80015bc:	200000f8 	.word	0x200000f8
 80015c0:	200000f4 	.word	0x200000f4
 80015c4:	200001a4 	.word	0x200001a4
 80015c8:	200001a0 	.word	0x200001a0

080015cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <vTaskSwitchContext+0xa0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <vTaskSwitchContext+0xa4>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80015e0:	e03e      	b.n	8001660 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <vTaskSwitchContext+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <vTaskSwitchContext+0xa8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	f1c3 031f 	rsb	r3, r3, #31
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	491e      	ldr	r1, [pc, #120]	; (8001678 <vTaskSwitchContext+0xac>)
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001616:	f383 8811 	msr	BASEPRI, r3
 800161a:	f3bf 8f6f 	isb	sy
 800161e:	f3bf 8f4f 	dsb	sy
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	e7fe      	b.n	8001624 <vTaskSwitchContext+0x58>
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4a11      	ldr	r2, [pc, #68]	; (8001678 <vTaskSwitchContext+0xac>)
 8001632:	4413      	add	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3308      	adds	r3, #8
 8001648:	429a      	cmp	r2, r3
 800164a:	d104      	bne.n	8001656 <vTaskSwitchContext+0x8a>
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <vTaskSwitchContext+0xb0>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	371c      	adds	r7, #28
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200001b8 	.word	0x200001b8
 8001670:	200001a4 	.word	0x200001a4
 8001674:	20000198 	.word	0x20000198
 8001678:	200000f8 	.word	0x200000f8
 800167c:	200000f4 	.word	0x200000f4

08001680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <vTaskPlaceOnEventList+0x24>
 8001690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001694:	f383 8811 	msr	BASEPRI, r3
 8001698:	f3bf 8f6f 	isb	sy
 800169c:	f3bf 8f4f 	dsb	sy
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e7fe      	b.n	80016a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <vTaskPlaceOnEventList+0x44>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3318      	adds	r3, #24
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe fd9d 	bl	80001ec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80016b2:	2101      	movs	r1, #1
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f000 fa6b 	bl	8001b90 <prvAddCurrentTaskToDelayedList>
}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200000f4 	.word	0x200000f4

080016c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d109      	bne.n	80016ee <vTaskPlaceOnEventListRestricted+0x26>
 80016da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016de:	f383 8811 	msr	BASEPRI, r3
 80016e2:	f3bf 8f6f 	isb	sy
 80016e6:	f3bf 8f4f 	dsb	sy
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e7fe      	b.n	80016ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <vTaskPlaceOnEventListRestricted+0x50>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3318      	adds	r3, #24
 80016f4:	4619      	mov	r1, r3
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7fe fd55 	bl	80001a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d002      	beq.n	8001708 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	68b8      	ldr	r0, [r7, #8]
 800170c:	f000 fa40 	bl	8001b90 <prvAddCurrentTaskToDelayedList>
	}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200000f4 	.word	0x200000f4

0800171c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <xTaskRemoveFromEventList+0x2a>
 8001732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001736:	f383 8811 	msr	BASEPRI, r3
 800173a:	f3bf 8f6f 	isb	sy
 800173e:	f3bf 8f4f 	dsb	sy
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e7fe      	b.n	8001744 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3318      	adds	r3, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fd86 	bl	800025c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <xTaskRemoveFromEventList+0xac>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d11c      	bne.n	8001792 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	3304      	adds	r3, #4
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fd7d 	bl	800025c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	4b18      	ldr	r3, [pc, #96]	; (80017cc <xTaskRemoveFromEventList+0xb0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	4a16      	ldr	r2, [pc, #88]	; (80017cc <xTaskRemoveFromEventList+0xb0>)
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4a13      	ldr	r2, [pc, #76]	; (80017d0 <xTaskRemoveFromEventList+0xb4>)
 8001782:	441a      	add	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	3304      	adds	r3, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4610      	mov	r0, r2
 800178c:	f7fe fd0b 	bl	80001a6 <vListInsertEnd>
 8001790:	e005      	b.n	800179e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	3318      	adds	r3, #24
 8001796:	4619      	mov	r1, r3
 8001798:	480e      	ldr	r0, [pc, #56]	; (80017d4 <xTaskRemoveFromEventList+0xb8>)
 800179a:	f7fe fd04 	bl	80001a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <xTaskRemoveFromEventList+0xbc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d905      	bls.n	80017b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <xTaskRemoveFromEventList+0xc0>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e001      	b.n	80017bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80017bc:	697b      	ldr	r3, [r7, #20]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001b8 	.word	0x200001b8
 80017cc:	20000198 	.word	0x20000198
 80017d0:	200000f8 	.word	0x200000f8
 80017d4:	20000150 	.word	0x20000150
 80017d8:	200000f4 	.word	0x200000f4
 80017dc:	200001a4 	.word	0x200001a4

080017e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <vTaskInternalSetTimeOutState+0x24>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <vTaskInternalSetTimeOutState+0x28>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	605a      	str	r2, [r3, #4]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200001a8 	.word	0x200001a8
 8001808:	20000194 	.word	0x20000194

0800180c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <xTaskCheckForTimeOut+0x24>
 800181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e7fe      	b.n	800182e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <xTaskCheckForTimeOut+0x3e>
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	f383 8811 	msr	BASEPRI, r3
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f3bf 8f4f 	dsb	sy
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e7fe      	b.n	8001848 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800184a:	f7fe fe1d 	bl	8000488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <xTaskCheckForTimeOut+0xb8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d102      	bne.n	800186e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	e023      	b.n	80018b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <xTaskCheckForTimeOut+0xbc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d007      	beq.n	800188a <xTaskCheckForTimeOut+0x7e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	429a      	cmp	r2, r3
 8001882:	d802      	bhi.n	800188a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	e015      	b.n	80018b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	429a      	cmp	r2, r3
 8001892:	d90b      	bls.n	80018ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad2      	subs	r2, r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff9d 	bl	80017e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e004      	b.n	80018b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80018b6:	f7fe fe15 	bl	80004e4 <vPortExitCritical>

	return xReturn;
 80018ba:	69fb      	ldr	r3, [r7, #28]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000194 	.word	0x20000194
 80018c8:	200001a8 	.word	0x200001a8

080018cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <vTaskMissedYield+0x14>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200001a4 	.word	0x200001a4

080018e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80018ec:	f000 f852 	bl	8001994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <prvIdleTask+0x28>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d9f9      	bls.n	80018ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <prvIdleTask+0x2c>)
 80018fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001908:	e7f0      	b.n	80018ec <prvIdleTask+0x8>
 800190a:	bf00      	nop
 800190c:	200000f8 	.word	0x200000f8
 8001910:	e000ed04 	.word	0xe000ed04

08001914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e00c      	b.n	800193a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4a12      	ldr	r2, [pc, #72]	; (8001974 <prvInitialiseTaskLists+0x60>)
 800192c:	4413      	add	r3, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fc0e 	bl	8000150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3301      	adds	r3, #1
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d9ef      	bls.n	8001920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <prvInitialiseTaskLists+0x64>)
 8001942:	f7fe fc05 	bl	8000150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001946:	480d      	ldr	r0, [pc, #52]	; (800197c <prvInitialiseTaskLists+0x68>)
 8001948:	f7fe fc02 	bl	8000150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800194c:	480c      	ldr	r0, [pc, #48]	; (8001980 <prvInitialiseTaskLists+0x6c>)
 800194e:	f7fe fbff 	bl	8000150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001952:	480c      	ldr	r0, [pc, #48]	; (8001984 <prvInitialiseTaskLists+0x70>)
 8001954:	f7fe fbfc 	bl	8000150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <prvInitialiseTaskLists+0x74>)
 800195a:	f7fe fbf9 	bl	8000150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <prvInitialiseTaskLists+0x78>)
 8001960:	4a05      	ldr	r2, [pc, #20]	; (8001978 <prvInitialiseTaskLists+0x64>)
 8001962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <prvInitialiseTaskLists+0x7c>)
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <prvInitialiseTaskLists+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200000f8 	.word	0x200000f8
 8001978:	20000120 	.word	0x20000120
 800197c:	20000134 	.word	0x20000134
 8001980:	20000150 	.word	0x20000150
 8001984:	20000164 	.word	0x20000164
 8001988:	2000017c 	.word	0x2000017c
 800198c:	20000148 	.word	0x20000148
 8001990:	2000014c 	.word	0x2000014c

08001994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800199a:	e019      	b.n	80019d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800199c:	f7fe fd74 	bl	8000488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <prvCheckTasksWaitingTermination+0x4c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3304      	adds	r3, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc55 	bl	800025c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <prvCheckTasksWaitingTermination+0x50>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a0a      	ldr	r2, [pc, #40]	; (80019e4 <prvCheckTasksWaitingTermination+0x50>)
 80019ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <prvCheckTasksWaitingTermination+0x54>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <prvCheckTasksWaitingTermination+0x54>)
 80019c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80019c6:	f7fe fd8d 	bl	80004e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f80e 	bl	80019ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <prvCheckTasksWaitingTermination+0x54>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e1      	bne.n	800199c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000164 	.word	0x20000164
 80019e4:	20000190 	.word	0x20000190
 80019e8:	20000178 	.word	0x20000178

080019ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fe45 	bl	8000688 <vPortFree>
			vPortFree( pxTCB );
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe fe42 	bl	8000688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <prvResetNextTaskUnblockTime+0x38>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <prvResetNextTaskUnblockTime+0x3c>)
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001a24:	e008      	b.n	8001a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <prvResetNextTaskUnblockTime+0x38>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <prvResetNextTaskUnblockTime+0x3c>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000148 	.word	0x20000148
 8001a48:	200001b0 	.word	0x200001b0

08001a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <xTaskGetSchedulerState+0x34>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	e008      	b.n	8001a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <xTaskGetSchedulerState+0x38>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	e001      	b.n	8001a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001a72:	687b      	ldr	r3, [r7, #4]
	}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	2000019c 	.word	0x2000019c
 8001a84:	200001b8 	.word	0x200001b8

08001a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06c      	beq.n	8001b78 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <xTaskPriorityDisinherit+0xfc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d009      	beq.n	8001abc <xTaskPriorityDisinherit+0x34>
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	e7fe      	b.n	8001aba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <xTaskPriorityDisinherit+0x50>
 8001ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	e7fe      	b.n	8001ad6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001adc:	1e5a      	subs	r2, r3, #1
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d044      	beq.n	8001b78 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d140      	bne.n	8001b78 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3304      	adds	r3, #4
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fbae 	bl	800025c <uxListRemove>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d115      	bne.n	8001b32 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0a:	491f      	ldr	r1, [pc, #124]	; (8001b88 <xTaskPriorityDisinherit+0x100>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10a      	bne.n	8001b32 <xTaskPriorityDisinherit+0xaa>
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	2201      	movs	r2, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <xTaskPriorityDisinherit+0x104>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	4a17      	ldr	r2, [pc, #92]	; (8001b8c <xTaskPriorityDisinherit+0x104>)
 8001b30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f1c3 0202 	rsb	r2, r3, #2
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <xTaskPriorityDisinherit+0x104>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <xTaskPriorityDisinherit+0x104>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4a08      	ldr	r2, [pc, #32]	; (8001b88 <xTaskPriorityDisinherit+0x100>)
 8001b66:	441a      	add	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7fe fb19 	bl	80001a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001b78:	697b      	ldr	r3, [r7, #20]
	}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200000f4 	.word	0x200000f4
 8001b88:	200000f8 	.word	0x200000f8
 8001b8c:	20000198 	.word	0x20000198

08001b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001b9a:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fb58 	bl	800025c <uxListRemove>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2201      	movs	r2, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d10a      	bne.n	8001be8 <prvAddCurrentTaskToDelayedList+0x58>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d007      	beq.n	8001be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	481a      	ldr	r0, [pc, #104]	; (8001c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8001be2:	f7fe fae0 	bl	80001a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001be6:	e026      	b.n	8001c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d209      	bcs.n	8001c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f7fe faed 	bl	80001ec <vListInsert>
}
 8001c12:	e010      	b.n	8001c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe fae3 	bl	80001ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d202      	bcs.n	8001c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	6013      	str	r3, [r2, #0]
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000194 	.word	0x20000194
 8001c44:	200000f4 	.word	0x200000f4
 8001c48:	20000198 	.word	0x20000198
 8001c4c:	2000017c 	.word	0x2000017c
 8001c50:	2000014c 	.word	0x2000014c
 8001c54:	20000148 	.word	0x20000148
 8001c58:	200001b0 	.word	0x200001b0

08001c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001c66:	f000 facd 	bl	8002204 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <xTimerCreateTimerTask+0x50>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <xTimerCreateTimerTask+0x54>)
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	2303      	movs	r3, #3
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2246      	movs	r2, #70	; 0x46
 8001c7e:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <xTimerCreateTimerTask+0x58>)
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <xTimerCreateTimerTask+0x5c>)
 8001c82:	f7ff f981 	bl	8000f88 <xTaskCreate>
 8001c86:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <xTimerCreateTimerTask+0x46>
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	e7fe      	b.n	8001ca0 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200001ec 	.word	0x200001ec
 8001cb0:	200001f0 	.word	0x200001f0
 8001cb4:	0800321c 	.word	0x0800321c
 8001cb8:	08001ded 	.word	0x08001ded

08001cbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	; 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <xTimerGenericCommand+0x2c>
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	623b      	str	r3, [r7, #32]
 8001ce6:	e7fe      	b.n	8001ce6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ce8:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <xTimerGenericCommand+0x94>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02a      	beq.n	8001d46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	dc18      	bgt.n	8001d34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001d02:	f7ff fea3 	bl	8001a4c <xTaskGetSchedulerState>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d109      	bne.n	8001d20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <xTimerGenericCommand+0x94>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	f107 0114 	add.w	r1, r7, #20
 8001d14:	2300      	movs	r3, #0
 8001d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d18:	f7fe fd84 	bl	8000824 <xQueueGenericSend>
 8001d1c:	6278      	str	r0, [r7, #36]	; 0x24
 8001d1e:	e012      	b.n	8001d46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <xTimerGenericCommand+0x94>)
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	f107 0114 	add.w	r1, r7, #20
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f7fe fd7a 	bl	8000824 <xQueueGenericSend>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24
 8001d32:	e008      	b.n	8001d46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <xTimerGenericCommand+0x94>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f107 0114 	add.w	r1, r7, #20
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	f7fe fe6a 	bl	8000a18 <xQueueGenericSendFromISR>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200001ec 	.word	0x200001ec

08001d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <prvProcessExpiredTimer+0x94>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa75 	bl	800025c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d021      	beq.n	8001dc4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	18d1      	adds	r1, r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6978      	ldr	r0, [r7, #20]
 8001d8e:	f000 f8cf 	bl	8001f30 <prvInsertTimerInActiveList>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01e      	beq.n	8001dd6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	2100      	movs	r1, #0
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8a 	bl	8001cbc <xTimerGenericCommand>
 8001da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d112      	bne.n	8001dd6 <prvProcessExpiredTimer+0x82>
 8001db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db4:	f383 8811 	msr	BASEPRI, r3
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	f3bf 8f4f 	dsb	sy
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e7fe      	b.n	8001dc2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	4798      	blx	r3
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200001e4 	.word	0x200001e4

08001dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f857 	bl	8001eac <prvGetNextExpireTime>
 8001dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4619      	mov	r1, r3
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f803 	bl	8001e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001e0a:	f000 f8d3 	bl	8001fb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e0e:	e7f1      	b.n	8001df4 <prvTimerTask+0x8>

08001e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001e1a:	f7ff fa67 	bl	80012ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f864 	bl	8001ef0 <prvSampleTimeNow>
 8001e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d130      	bne.n	8001e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <prvProcessTimerOrBlockTask+0x3c>
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d806      	bhi.n	8001e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8001e3e:	f7ff fa63 	bl	8001308 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff85 	bl	8001d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001e4a:	e024      	b.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d008      	beq.n	8001e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <prvProcessTimerOrBlockTask+0x90>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <prvProcessTimerOrBlockTask+0x50>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <prvProcessTimerOrBlockTask+0x52>
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <prvProcessTimerOrBlockTask+0x94>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f7ff f855 	bl	8000f20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001e76:	f7ff fa47 	bl	8001308 <xTaskResumeAll>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10a      	bne.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <prvProcessTimerOrBlockTask+0x98>)
 8001e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	f3bf 8f6f 	isb	sy
}
 8001e90:	e001      	b.n	8001e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8001e92:	f7ff fa39 	bl	8001308 <xTaskResumeAll>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200001e8 	.word	0x200001e8
 8001ea4:	200001ec 	.word	0x200001ec
 8001ea8:	e000ed04 	.word	0xe000ed04

08001eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <prvGetNextExpireTime+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <prvGetNextExpireTime+0x16>
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	e000      	b.n	8001ec4 <prvGetNextExpireTime+0x18>
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <prvGetNextExpireTime+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e001      	b.n	8001ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	200001e4 	.word	0x200001e4

08001ef0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001ef8:	f7ff faa2 	bl	8001440 <xTaskGetTickCount>
 8001efc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <prvSampleTimeNow+0x3c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d205      	bcs.n	8001f14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8001f08:	f000 f918 	bl	800213c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e002      	b.n	8001f1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <prvSampleTimeNow+0x3c>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001f4 	.word	0x200001f4

08001f30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d812      	bhi.n	8001f7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	1ad2      	subs	r2, r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d302      	bcc.n	8001f6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	e01b      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <prvInsertTimerInActiveList+0x7c>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3304      	adds	r3, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f7fe f939 	bl	80001ec <vListInsert>
 8001f7a:	e012      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d206      	bcs.n	8001f92 <prvInsertTimerInActiveList+0x62>
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d302      	bcc.n	8001f92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e007      	b.n	8001fa2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <prvInsertTimerInActiveList+0x80>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7fe f925 	bl	80001ec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200001e8 	.word	0x200001e8
 8001fb0:	200001e4 	.word	0x200001e4

08001fb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001fba:	e0ac      	b.n	8002116 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f2c0 80a9 	blt.w	8002116 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f941 	bl	800025c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff87 	bl	8001ef0 <prvSampleTimeNow>
 8001fe2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	f200 8094 	bhi.w	8002114 <prvProcessReceivedCommands+0x160>
 8001fec:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <prvProcessReceivedCommands+0x40>)
 8001fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff2:	bf00      	nop
 8001ff4:	0800201d 	.word	0x0800201d
 8001ff8:	0800201d 	.word	0x0800201d
 8001ffc:	0800201d 	.word	0x0800201d
 8002000:	0800208f 	.word	0x0800208f
 8002004:	080020a3 	.word	0x080020a3
 8002008:	080020eb 	.word	0x080020eb
 800200c:	0800201d 	.word	0x0800201d
 8002010:	0800201d 	.word	0x0800201d
 8002014:	0800208f 	.word	0x0800208f
 8002018:	080020a3 	.word	0x080020a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2da      	uxtb	r2, r3
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	18d1      	adds	r1, r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a3a      	ldr	r2, [r7, #32]
 800203a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800203c:	f7ff ff78 	bl	8001f30 <prvInsertTimerInActiveList>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d067      	beq.n	8002116 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800204c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d05c      	beq.n	8002116 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	441a      	add	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	2100      	movs	r1, #0
 800206c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800206e:	f7ff fe25 	bl	8001cbc <xTimerGenericCommand>
 8002072:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d14d      	bne.n	8002116 <prvProcessReceivedCommands+0x162>
 800207a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207e:	f383 8811 	msr	BASEPRI, r3
 8002082:	f3bf 8f6f 	isb	sy
 8002086:	f3bf 8f4f 	dsb	sy
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	e7fe      	b.n	800208c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80020a0:	e039      	b.n	8002116 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <prvProcessReceivedCommands+0x122>
 80020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c6:	f383 8811 	msr	BASEPRI, r3
 80020ca:	f3bf 8f6f 	isb	sy
 80020ce:	f3bf 8f4f 	dsb	sy
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e7fe      	b.n	80020d4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	18d1      	adds	r1, r2, r3
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020e4:	f7ff ff24 	bl	8001f30 <prvInsertTimerInActiveList>
					break;
 80020e8:	e015      	b.n	8002116 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80020f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020fa:	f7fe fac5 	bl	8000688 <vPortFree>
 80020fe:	e00a      	b.n	8002116 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	b2da      	uxtb	r2, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002112:	e000      	b.n	8002116 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002114:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <prvProcessReceivedCommands+0x184>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f107 0108 	add.w	r1, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fd11 	bl	8000b48 <xQueueReceive>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	f47f af47 	bne.w	8001fbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	; 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200001ec 	.word	0x200001ec

0800213c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002142:	e047      	b.n	80021d4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002144:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <prvSwitchTimerLists+0xc0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <prvSwitchTimerLists+0xc0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	3304      	adds	r3, #4
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f87d 	bl	800025c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	6938      	ldr	r0, [r7, #16]
 8002168:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02d      	beq.n	80021d4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	699a      	ldr	r2, [r3, #24]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	4413      	add	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	429a      	cmp	r2, r3
 8002188:	d90e      	bls.n	80021a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <prvSwitchTimerLists+0xc0>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	3304      	adds	r3, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4610      	mov	r0, r2
 80021a2:	f7fe f823 	bl	80001ec <vListInsert>
 80021a6:	e015      	b.n	80021d4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80021a8:	2300      	movs	r3, #0
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	2100      	movs	r1, #0
 80021b2:	6938      	ldr	r0, [r7, #16]
 80021b4:	f7ff fd82 	bl	8001cbc <xTimerGenericCommand>
 80021b8:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <prvSwitchTimerLists+0x98>
 80021c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	603b      	str	r3, [r7, #0]
 80021d2:	e7fe      	b.n	80021d2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <prvSwitchTimerLists+0xc0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1b2      	bne.n	8002144 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <prvSwitchTimerLists+0xc0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <prvSwitchTimerLists+0xc4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <prvSwitchTimerLists+0xc0>)
 80021ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <prvSwitchTimerLists+0xc4>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6013      	str	r3, [r2, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200001e4 	.word	0x200001e4
 8002200:	200001e8 	.word	0x200001e8

08002204 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002208:	f7fe f93e 	bl	8000488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800220c:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <prvCheckForValidListAndQueue+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d113      	bne.n	800223c <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <prvCheckForValidListAndQueue+0x44>)
 8002216:	f7fd ff9b 	bl	8000150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <prvCheckForValidListAndQueue+0x48>)
 800221c:	f7fd ff98 	bl	8000150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <prvCheckForValidListAndQueue+0x4c>)
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <prvCheckForValidListAndQueue+0x44>)
 8002224:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <prvCheckForValidListAndQueue+0x50>)
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <prvCheckForValidListAndQueue+0x48>)
 800222a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800222c:	2200      	movs	r2, #0
 800222e:	210c      	movs	r1, #12
 8002230:	2005      	movs	r0, #5
 8002232:	f7fe faa3 	bl	800077c <xQueueGenericCreate>
 8002236:	4602      	mov	r2, r0
 8002238:	4b02      	ldr	r3, [pc, #8]	; (8002244 <prvCheckForValidListAndQueue+0x40>)
 800223a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800223c:	f7fe f952 	bl	80004e4 <vPortExitCritical>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200001ec 	.word	0x200001ec
 8002248:	200001bc 	.word	0x200001bc
 800224c:	200001d0 	.word	0x200001d0
 8002250:	200001e4 	.word	0x200001e4
 8002254:	200001e8 	.word	0x200001e8

08002258 <_Z10ARadioTaskPv>:
 *
 *
 * */

void ARadioTask (void* pvParameters)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	xTaskParam * xPort=(xTaskParam *) pvParameters;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	617b      	str	r3, [r7, #20]
	cc11xx_class *cc1101= new cc11xx_class(xPort, 60, rfSettings);
 8002264:	2024      	movs	r0, #36	; 0x24
 8002266:	f000 fe47 	bl	8002ef8 <_Znwj>
 800226a:	4603      	mov	r3, r0
 800226c:	461c      	mov	r4, r3
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <_Z10ARadioTaskPv+0x6c>)
 8002270:	223c      	movs	r2, #60	; 0x3c
 8002272:	6979      	ldr	r1, [r7, #20]
 8002274:	4620      	mov	r0, r4
 8002276:	f000 f86f 	bl	8002358 <_ZN12cc11xx_classC1EP10xTaskParamhPh>
 800227a:	613c      	str	r4, [r7, #16]
#ifdef DEBUG
    RCC->APB2ENR|= RCC_APB2ENR_IOPCEN;
 800227c:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <_Z10ARadioTaskPv+0x70>)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <_Z10ARadioTaskPv+0x70>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	6193      	str	r3, [r2, #24]
    GPIOC->CRH|=0x2<<20;
 8002288:	4a10      	ldr	r2, [pc, #64]	; (80022cc <_Z10ARadioTaskPv+0x74>)
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <_Z10ARadioTaskPv+0x74>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002292:	6053      	str	r3, [r2, #4]
    uint32_t* pt=(uint32_t*)(PERIPH_BB_BASE + ((GPIOC_BASE-PERIPH_BASE+0x0C)  * 32) + (13 * 4));
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <_Z10ARadioTaskPv+0x78>)
 8002296:	60fb      	str	r3, [r7, #12]
	//base task loop


	for (;;)
	{
		cc1101->chekStatus();
 8002298:	6938      	ldr	r0, [r7, #16]
 800229a:	f000 fa51 	bl	8002740 <_ZN12cc11xx_class10chekStatusEv>
		cc1101->txPack();
 800229e:	6938      	ldr	r0, [r7, #16]
 80022a0:	f000 fae6 	bl	8002870 <_ZN12cc11xx_class6txPackEv>
		if (*pt==0)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <_Z10ARadioTaskPv+0x5c>
			*pt=1;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	e002      	b.n	80022ba <_Z10ARadioTaskPv+0x62>
		else *pt=0;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
		vTaskDelay(3000 / portTICK_PERIOD_MS);
 80022ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022be:	f7fe ff95 	bl	80011ec <vTaskDelay>
		cc1101->chekStatus();
 80022c2:	e7e9      	b.n	8002298 <_Z10ARadioTaskPv+0x40>
 80022c4:	20000004 	.word	0x20000004
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40011000 	.word	0x40011000
 80022d0:	422201b4 	.word	0x422201b4

080022d4 <_Z11ARadioTaskSPv>:
	};
}

void ARadioTaskS (void* pvParameters)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	xTaskParam * xPort=(xTaskParam *) pvParameters;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	617b      	str	r3, [r7, #20]
	cc11xx_class *cc1101= new cc11xx_class(xPort, 60, rfSettings);
 80022e0:	2024      	movs	r0, #36	; 0x24
 80022e2:	f000 fe09 	bl	8002ef8 <_Znwj>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461c      	mov	r4, r3
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <_Z11ARadioTaskSPv+0x74>)
 80022ec:	223c      	movs	r2, #60	; 0x3c
 80022ee:	6979      	ldr	r1, [r7, #20]
 80022f0:	4620      	mov	r0, r4
 80022f2:	f000 f831 	bl	8002358 <_ZN12cc11xx_classC1EP10xTaskParamhPh>
 80022f6:	613c      	str	r4, [r7, #16]
#ifdef DEBUG
    RCC->APB2ENR|= RCC_APB2ENR_IOPCEN;
 80022f8:	4a14      	ldr	r2, [pc, #80]	; (800234c <_Z11ARadioTaskSPv+0x78>)
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <_Z11ARadioTaskSPv+0x78>)
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	6193      	str	r3, [r2, #24]
    GPIOC->CRH|=0x2<<20;
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <_Z11ARadioTaskSPv+0x7c>)
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <_Z11ARadioTaskSPv+0x7c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800230e:	6053      	str	r3, [r2, #4]
    uint32_t* pt=(uint32_t*)(PERIPH_BB_BASE + ((GPIOC_BASE-PERIPH_BASE+0x0C)  * 32) + (13 * 4));
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <_Z11ARadioTaskSPv+0x80>)
 8002312:	60fb      	str	r3, [r7, #12]
	//base task loop


	for (;;)
	{
		cc1101->chekStatus();
 8002314:	6938      	ldr	r0, [r7, #16]
 8002316:	f000 fa13 	bl	8002740 <_ZN12cc11xx_class10chekStatusEv>
		cc1101->sendSTB(SRX);
 800231a:	2134      	movs	r1, #52	; 0x34
 800231c:	6938      	ldr	r0, [r7, #16]
 800231e:	f000 fbcb 	bl	8002ab8 <_ZN12cc11xx_class7sendSTBEh>
		cc1101->rxPack();
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f000 fb2d 	bl	8002982 <_ZN12cc11xx_class6rxPackEv>
		//cc1101->txPack();
		if (*pt==0)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <_Z11ARadioTaskSPv+0x64>
			*pt=1;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	e002      	b.n	800233e <_Z11ARadioTaskSPv+0x6a>
		else *pt=0;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 800233e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002342:	f7fe ff53 	bl	80011ec <vTaskDelay>
		cc1101->chekStatus();
 8002346:	e7e5      	b.n	8002314 <_Z11ARadioTaskSPv+0x40>
 8002348:	20000004 	.word	0x20000004
 800234c:	40021000 	.word	0x40021000
 8002350:	40011000 	.word	0x40011000
 8002354:	422201b4 	.word	0x422201b4

08002358 <_ZN12cc11xx_classC1EP10xTaskParamhPh>:

#include "CC1101.h"



cc11xx_class::cc11xx_class(xTaskParam * pPortParam, uint8_t set_len, uint8_t *rfSettings) // class constructor
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	71fb      	strb	r3, [r7, #7]
};

  class cc11xx_class
  {
  private:
	  pack *rxp= new pack;
 8002368:	200b      	movs	r0, #11
 800236a:	f000 fdc5 	bl	8002ef8 <_Znwj>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	601a      	str	r2, [r3, #0]
	  pack *txp= new pack;
 8002376:	200b      	movs	r0, #11
 8002378:	f000 fdbe 	bl	8002ef8 <_Znwj>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	605a      	str	r2, [r3, #4]
	  cc1101Status* cStatus= new cc1101Status;
 8002384:	2004      	movs	r0, #4
 8002386:	f000 fdb7 	bl	8002ef8 <_Znwj>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
{
	SP=(SPI_TypeDef*)pPortParam->pTaskSerial;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	60da      	str	r2, [r3, #12]
	xPortHW= pPortParam->xTaskPortH;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	791a      	ldrb	r2, [r3, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f883 2020 	strb.w	r2, [r3, #32]
	switch  (xPortHW)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x5e>
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d03e      	beq.n	8002432 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0xda>
 80023b4:	e07e      	b.n	80024b4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x15c>
		{
		case PORT_NORMAL:
		{
			if (SP == (SPI_TypeDef*)SPI1_BASE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a89      	ldr	r2, [pc, #548]	; (80025e0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x288>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d117      	bne.n	80023f0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x98>
			{
				RCC->APB2ENR|=RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 80023c0:	4a88      	ldr	r2, [pc, #544]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6193      	str	r3, [r2, #24]
				GPIOA->CRL=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 80023d0:	4b85      	ldr	r3, [pc, #532]	; (80025e8 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x290>)
 80023d2:	4a86      	ldr	r2, [pc, #536]	; (80025ec <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x294>)
 80023d4:	601a      	str	r2, [r3, #0]
				NSS_get=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x08)  * 32) + (4 * 4));//bit bang address
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a85      	ldr	r2, [pc, #532]	; (80025f0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x298>)
 80023da:	615a      	str	r2, [r3, #20]
				NSS_set=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x10)  * 32) + (4 * 4));
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a85      	ldr	r2, [pc, #532]	; (80025f4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x29c>)
 80023e0:	611a      	str	r2, [r3, #16]
				NSS_reset=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x14)  * 32) + (4 * 4));
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a84      	ldr	r2, [pc, #528]	; (80025f8 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2a0>)
 80023e6:	619a      	str	r2, [r3, #24]
				MISO_lv=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x08)  * 32) + (6 * 4));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a84      	ldr	r2, [pc, #528]	; (80025fc <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2a4>)
 80023ec:	61da      	str	r2, [r3, #28]
			} else
			{
				// Return task init error here!!!!!!!!!!!!!!!
			};

			break;
 80023ee:	e05e      	b.n	80024ae <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x156>
			} else if (SP == (SPI_TypeDef*)SPI2_BASE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a82      	ldr	r2, [pc, #520]	; (8002600 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2a8>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d159      	bne.n	80024ae <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x156>
				RCC->APB2ENR|= RCC_APB2ENR_IOPBEN;
 80023fa:	4a7a      	ldr	r2, [pc, #488]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 80023fc:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6193      	str	r3, [r2, #24]
				RCC->APB1ENR|= RCC_APB1ENR_SPI2EN;
 8002406:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 8002408:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002410:	61d3      	str	r3, [r2, #28]
				GPIOB->CRH=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);		// set GPIO
 8002412:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2ac>)
 8002414:	4a75      	ldr	r2, [pc, #468]	; (80025ec <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x294>)
 8002416:	605a      	str	r2, [r3, #4]
				NSS_get=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x08)  * 32) + (12 * 4));//bit bang address
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7b      	ldr	r2, [pc, #492]	; (8002608 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b0>)
 800241c:	615a      	str	r2, [r3, #20]
				NSS_set=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x10)  * 32) + (12 * 4));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a7a      	ldr	r2, [pc, #488]	; (800260c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002422:	611a      	str	r2, [r3, #16]
				NSS_reset=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x14)  * 32) + (12 * 4));
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a7a      	ldr	r2, [pc, #488]	; (8002610 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b8>)
 8002428:	619a      	str	r2, [r3, #24]
				MISO_lv=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x08)  * 32) + (14 * 4));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a79      	ldr	r2, [pc, #484]	; (8002614 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2bc>)
 800242e:	61da      	str	r2, [r3, #28]
			break;
 8002430:	e03d      	b.n	80024ae <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x156>
		}
		case PORT_REMAP :
		{
			if (SP == (SPI_TypeDef*)SPI1_BASE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	4a6a      	ldr	r2, [pc, #424]	; (80025e0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x288>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d117      	bne.n	800246c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x114>
			{
				RCC->APB2ENR|=RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 800243c:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 800243e:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6193      	str	r3, [r2, #24]
				GPIOA->CRL=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 800244c:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x290>)
 800244e:	4a67      	ldr	r2, [pc, #412]	; (80025ec <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x294>)
 8002450:	601a      	str	r2, [r3, #0]
				NSS_get=	0;//bit bang address
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
				NSS_set=	0;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
				NSS_reset=	0;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
				MISO_lv=	0;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
				MISO_lv=0;
			} else
			{
						// Return task init error here!!!!!!!!!!!!!!!
			};
			break;
 800246a:	e022      	b.n	80024b2 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x15a>
			} else if (SP == (SPI_TypeDef*)SPI2_BASE)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a63      	ldr	r2, [pc, #396]	; (8002600 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2a8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11d      	bne.n	80024b2 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x15a>
				RCC->APB2ENR|= RCC_APB2ENR_IOPBEN;
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6193      	str	r3, [r2, #24]
				RCC->APB1ENR|= RCC_APB1ENR_SPI2EN;
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x28c>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	61d3      	str	r3, [r2, #28]
				GPIOB->CRH=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2ac>)
 8002490:	4a56      	ldr	r2, [pc, #344]	; (80025ec <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x294>)
 8002492:	605a      	str	r2, [r3, #4]
				NSS_get=0;//bit bang address
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
				NSS_set=0;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
				NSS_reset=0;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
				MISO_lv=0;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
			break;
 80024ac:	e001      	b.n	80024b2 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x15a>
			break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x15c>
			break;
 80024b2:	bf00      	nop
		}
		};
	SP->CR1=0;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
	SP->CR1=(0x6<<3);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2230      	movs	r2, #48	; 0x30
 80024c2:	801a      	strh	r2, [r3, #0]
	SP->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	68d2      	ldr	r2, [r2, #12]
 80024cc:	8812      	ldrh	r2, [r2, #0]
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80024d4:	b292      	uxth	r2, r2
 80024d6:	801a      	strh	r2, [r3, #0]
	// clock div 128(56M/128), SPI is a master mode
	if ((SP->SR&SPI_SR_MODF));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	891b      	ldrh	r3, [r3, #8]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
	SP->CR1|=SPI_CR1_MSTR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	8812      	ldrh	r2, [r2, #0]
 80024f0:	b292      	uxth	r2, r2
 80024f2:	f042 0204 	orr.w	r2, r2, #4
 80024f6:	b292      	uxth	r2, r2
 80024f8:	801a      	strh	r2, [r3, #0]
	SP->CR1|=SPI_CR1_SPE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	b292      	uxth	r2, r2
 8002506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250a:	b292      	uxth	r2, r2
 800250c:	801a      	strh	r2, [r3, #0]
	selectChip();
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f882 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1); //check miso low state
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f89f 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d000      	beq.n	800252c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x1d4>
 800252a:	e7f3      	b.n	8002514 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x1bc>
	deselectChip();
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f883 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f870 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1);
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f88d 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d000      	beq.n	8002550 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x1f8>
 800254e:	e7f3      	b.n	8002538 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x1e0>
	deselectChip();
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f871 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	sendCmd( SRES,0);// reset chip
 8002556:	2200      	movs	r2, #0
 8002558:	2130      	movs	r1, #48	; 0x30
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f888 	bl	8002670 <_ZN12cc11xx_class7sendCmdEhh>
	deselectChip();
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f869 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	vTaskDelay(10 / portTICK_PERIOD_MS);
 8002566:	200a      	movs	r0, #10
 8002568:	f7fe fe40 	bl	80011ec <vTaskDelay>
	selectChip();
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f853 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1); //check miso low state
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f870 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d000      	beq.n	800258a <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x232>
 8002588:	e7f3      	b.n	8002572 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x21a>
	deselectChip();
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f854 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f841 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f85e 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d000      	beq.n	80025ae <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x256>
 80025ac:	e7f3      	b.n	8002596 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x23e>
	deselectChip();
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f842 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>


	txp->addrdst=100;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2264      	movs	r2, #100	; 0x64
 80025ba:	705a      	strb	r2, [r3, #1]
	txp->addrsrc=120;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2278      	movs	r2, #120	; 0x78
 80025c2:	709a      	strb	r2, [r3, #2]
	txp->bLeng=12;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	220c      	movs	r2, #12
 80025ca:	701a      	strb	r2, [r3, #0]
	txp->data[0]=0xae;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	22ae      	movs	r2, #174	; 0xae
 80025d2:	70da      	strb	r2, [r3, #3]



}
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40013000 	.word	0x40013000
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010800 	.word	0x40010800
 80025ec:	94910000 	.word	0x94910000
 80025f0:	42210110 	.word	0x42210110
 80025f4:	42210210 	.word	0x42210210
 80025f8:	42210290 	.word	0x42210290
 80025fc:	42210118 	.word	0x42210118
 8002600:	40003800 	.word	0x40003800
 8002604:	40010c00 	.word	0x40010c00
 8002608:	42218130 	.word	0x42218130
 800260c:	42218230 	.word	0x42218230
 8002610:	422182b0 	.word	0x422182b0
 8002614:	42218138 	.word	0x42218138

08002618 <_ZN12cc11xx_class10selectChipEv>:

btype_t cc11xx_class::selectChip()
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	*NSS_reset=1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
	return *NSS_get;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	681b      	ldr	r3, [r3, #0]
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <_ZN12cc11xx_class12deselectChipEv>:

btype_t cc11xx_class::deselectChip()
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	*NSS_set=1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
	return *NSS_get;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	681b      	ldr	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <_ZN12cc11xx_class7getMISOEv>:

btype_t cc11xx_class::getMISO()
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

	return *MISO_lv;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	681b      	ldr	r3, [r3, #0]
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <_ZN12cc11xx_class7sendCmdEhh>:

btype_t cc11xx_class::sendCmd (uint8_t address, uint8_t  cmd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
 800267c:	4613      	mov	r3, r2
 800267e:	70bb      	strb	r3, [r7, #2]
	deselectChip();
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ffd9 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffc6 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff ffe3 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d000      	beq.n	80026a4 <_ZN12cc11xx_class7sendCmdEhh+0x34>
 80026a2:	e7f3      	b.n	800268c <_ZN12cc11xx_class7sendCmdEhh+0x1c>
	while  (!(SP->SR & (SPI_SR_TXE)));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	891b      	ldrh	r3, [r3, #8]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d000      	beq.n	80026c0 <_ZN12cc11xx_class7sendCmdEhh+0x50>
 80026be:	e7f1      	b.n	80026a4 <_ZN12cc11xx_class7sendCmdEhh+0x34>
	SP->DR=cmd;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	78ba      	ldrb	r2, [r7, #2]
 80026c6:	b292      	uxth	r2, r2
 80026c8:	819a      	strh	r2, [r3, #12]
	while  (!(SP->SR & (SPI_SR_TXE)));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	891b      	ldrh	r3, [r3, #8]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d000      	beq.n	80026e6 <_ZN12cc11xx_class7sendCmdEhh+0x76>
 80026e4:	e7f1      	b.n	80026ca <_ZN12cc11xx_class7sendCmdEhh+0x5a>
	uint8_t stsb;
	stsb=SP->DR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	899b      	ldrh	r3, [r3, #12]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	11d2      	asrs	r2, r2, #7
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	1112      	asrs	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 0207 	and.w	r2, r2, #7
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	705a      	strb	r2, [r3, #1]
	if ((cmd & 0x3f))
 800270e:	78bb      	ldrb	r3, [r7, #2]
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <_ZN12cc11xx_class7sendCmdEhh+0xb8>
			cStatus->fifo_rx_av = stsb & 0x0f;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	f002 020f 	and.w	r2, r2, #15
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	709a      	strb	r2, [r3, #2]
 8002726:	e006      	b.n	8002736 <_ZN12cc11xx_class7sendCmdEhh+0xc6>
		else cStatus->fifo_tx_av = stsb & 0x0f;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	f002 020f 	and.w	r2, r2, #15
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	70da      	strb	r2, [r3, #3]

	return 1;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <_ZN12cc11xx_class10chekStatusEv>:

	return 1;
}

btype_t cc11xx_class::chekStatus()
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	uint8_t stsb;
	deselectChip();
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff75 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff62 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff7f 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d000      	beq.n	800276c <_ZN12cc11xx_class10chekStatusEv+0x2c>
 800276a:	e7f3      	b.n	8002754 <_ZN12cc11xx_class10chekStatusEv+0x14>
	while  (!(SP->SR & SPI_SR_TXE));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	891b      	ldrh	r3, [r3, #8]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d000      	beq.n	8002788 <_ZN12cc11xx_class10chekStatusEv+0x48>
 8002786:	e7f1      	b.n	800276c <_ZN12cc11xx_class10chekStatusEv+0x2c>
	stsb=SP->DR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	899b      	ldrh	r3, [r3, #12]
 800278e:	b29b      	uxth	r3, r3
 8002790:	73fb      	strb	r3, [r7, #15]
	SP->DR=SNOP;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	223d      	movs	r2, #61	; 0x3d
 8002798:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&&(SP->SR & SPI_SR_RXNE)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	891b      	ldrh	r3, [r3, #8]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <_ZN12cc11xx_class10chekStatusEv+0x7a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	891b      	ldrh	r3, [r3, #8]
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <_ZN12cc11xx_class10chekStatusEv+0x7e>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <_ZN12cc11xx_class10chekStatusEv+0x80>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d000      	beq.n	80027c6 <_ZN12cc11xx_class10chekStatusEv+0x86>
 80027c4:	e7e9      	b.n	800279a <_ZN12cc11xx_class10chekStatusEv+0x5a>
	stsb=SP->DR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	899b      	ldrh	r3, [r3, #12]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	11d2      	asrs	r2, r2, #7
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	1112      	asrs	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f002 0207 	and.w	r2, r2, #7
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_tx_av= stsb & 0x0f;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	f002 020f 	and.w	r2, r2, #15
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	70da      	strb	r2, [r3, #3]
	SP->DR=0x80|SNOP;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	22bd      	movs	r2, #189	; 0xbd
 8002802:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&&(SP->SR & SPI_SR_RXNE)));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	891b      	ldrh	r3, [r3, #8]
 800280a:	b29b      	uxth	r3, r3
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <_ZN12cc11xx_class10chekStatusEv+0xe4>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	891b      	ldrh	r3, [r3, #8]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <_ZN12cc11xx_class10chekStatusEv+0xe8>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <_ZN12cc11xx_class10chekStatusEv+0xea>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d000      	beq.n	8002830 <_ZN12cc11xx_class10chekStatusEv+0xf0>
 800282e:	e7e9      	b.n	8002804 <_ZN12cc11xx_class10chekStatusEv+0xc4>
	stsb=SP->DR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	899b      	ldrh	r3, [r3, #12]
 8002836:	b29b      	uxth	r3, r3
 8002838:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	11d2      	asrs	r2, r2, #7
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	1112      	asrs	r2, r2, #4
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f002 0207 	and.w	r2, r2, #7
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_rx_av= stsb & 0x0f;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	f002 020f 	and.w	r2, r2, #15
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	709a      	strb	r2, [r3, #2]
	return 1;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN12cc11xx_class6txPackEv>:

btype_t cc11xx_class::txPack(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	uint8_t stsb;
	deselectChip();
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fedd 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff feca 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff fee7 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf14      	ite	ne
 8002890:	2301      	movne	r3, #1
 8002892:	2300      	moveq	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d000      	beq.n	800289c <_ZN12cc11xx_class6txPackEv+0x2c>
 800289a:	e7f3      	b.n	8002884 <_ZN12cc11xx_class6txPackEv+0x14>
	while  (!(SP->SR & SPI_SR_TXE));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	891b      	ldrh	r3, [r3, #8]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d000      	beq.n	80028b8 <_ZN12cc11xx_class6txPackEv+0x48>
 80028b6:	e7f1      	b.n	800289c <_ZN12cc11xx_class6txPackEv+0x2c>
	stsb=SP->DR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	899b      	ldrh	r3, [r3, #12]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	72fb      	strb	r3, [r7, #11]
	SP->DR=WRITE|BURST|FIFO;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	227f      	movs	r2, #127	; 0x7f
 80028c8:	819a      	strh	r2, [r3, #12]
		for (uint32_t i=0; i<sizeof(pack); i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b0a      	cmp	r3, #10
 80028d2:	d82d      	bhi.n	8002930 <_ZN12cc11xx_class6txPackEv+0xc0>
		{
			while  (!(SP->SR & (SPI_SR_TXE)));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	891b      	ldrh	r3, [r3, #8]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d000      	beq.n	80028f0 <_ZN12cc11xx_class6txPackEv+0x80>
 80028ee:	e7f1      	b.n	80028d4 <_ZN12cc11xx_class6txPackEv+0x64>
			SP->DR=*((uint8_t*)(txp+i));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68d9      	ldr	r1, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6858      	ldr	r0, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	4403      	add	r3, r0
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b29b      	uxth	r3, r3
 800290a:	818b      	strh	r3, [r1, #12]
			while  (!(SP->SR & (SPI_SR_TXE)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	891b      	ldrh	r3, [r3, #8]
 8002912:	b29b      	uxth	r3, r3
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d000      	beq.n	8002928 <_ZN12cc11xx_class6txPackEv+0xb8>
 8002926:	e7f1      	b.n	800290c <_ZN12cc11xx_class6txPackEv+0x9c>
		for (uint32_t i=0; i<sizeof(pack); i++)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	e7ce      	b.n	80028ce <_ZN12cc11xx_class6txPackEv+0x5e>
		}
		deselectChip();
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fe81 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
		selectChip();
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe6e 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
		while (getMISO());
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fe8b 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d000      	beq.n	8002954 <_ZN12cc11xx_class6txPackEv+0xe4>
 8002952:	e7f3      	b.n	800293c <_ZN12cc11xx_class6txPackEv+0xcc>
		SP->DR=STX;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2235      	movs	r2, #53	; 0x35
 800295a:	819a      	strh	r2, [r3, #12]
		while  (!(SP->SR & (SPI_SR_TXE)));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	891b      	ldrh	r3, [r3, #8]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d000      	beq.n	8002978 <_ZN12cc11xx_class6txPackEv+0x108>
 8002976:	e7f1      	b.n	800295c <_ZN12cc11xx_class6txPackEv+0xec>

		return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_ZN12cc11xx_class6rxPackEv>:
btype_t cc11xx_class::rxPack(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b084      	sub	sp, #16
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
	uint8_t stsb;
	deselectChip();
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe54 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff fe41 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fe5e 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d000      	beq.n	80029ae <_ZN12cc11xx_class6rxPackEv+0x2c>
 80029ac:	e7f3      	b.n	8002996 <_ZN12cc11xx_class6rxPackEv+0x14>
	while  (!(SP->SR & SPI_SR_TXE));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	891b      	ldrh	r3, [r3, #8]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bf0c      	ite	eq
 80029be:	2301      	moveq	r3, #1
 80029c0:	2300      	movne	r3, #0
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d000      	beq.n	80029ca <_ZN12cc11xx_class6rxPackEv+0x48>
 80029c8:	e7f1      	b.n	80029ae <_ZN12cc11xx_class6rxPackEv+0x2c>
	stsb=SP->DR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	899b      	ldrh	r3, [r3, #12]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	72fb      	strb	r3, [r7, #11]
	SP->DR=0xc0;//READ|BURST|FIFO;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	22c0      	movs	r2, #192	; 0xc0
 80029da:	819a      	strh	r2, [r3, #12]
	while  (!(SP->SR & (SPI_SR_TXE)));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	891b      	ldrh	r3, [r3, #8]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d000      	beq.n	80029f8 <_ZN12cc11xx_class6rxPackEv+0x76>
 80029f6:	e7f1      	b.n	80029dc <_ZN12cc11xx_class6rxPackEv+0x5a>
	stsb=SP->DR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	899b      	ldrh	r3, [r3, #12]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	72fb      	strb	r3, [r7, #11]
	for (uint32_t i=0; i<sizeof(pack); i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b0a      	cmp	r3, #10
 8002a0a:	d82c      	bhi.n	8002a66 <_ZN12cc11xx_class6rxPackEv+0xe4>
		{
		SP->DR=READ|SNOP;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	22bd      	movs	r2, #189	; 0xbd
 8002a12:	819a      	strh	r2, [r3, #12]
		while  (!((SP->SR & SPI_SR_TXE)&&(SP->SR & SPI_SR_RXNE)));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	891b      	ldrh	r3, [r3, #8]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <_ZN12cc11xx_class6rxPackEv+0xb2>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	891b      	ldrh	r3, [r3, #8]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <_ZN12cc11xx_class6rxPackEv+0xb6>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <_ZN12cc11xx_class6rxPackEv+0xb8>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <_ZN12cc11xx_class6rxPackEv+0xbe>
 8002a3e:	e7e9      	b.n	8002a14 <_ZN12cc11xx_class6rxPackEv+0x92>
		*((uint8_t*)(txp+i))=SP->DR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	440b      	add	r3, r1
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68d2      	ldr	r2, [r2, #12]
 8002a56:	8992      	ldrh	r2, [r2, #12]
 8002a58:	b292      	uxth	r2, r2
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i<sizeof(pack); i++)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e7cf      	b.n	8002a06 <_ZN12cc11xx_class6rxPackEv+0x84>
		//while  (!(SP->SR & (SPI_SR_TXE)));
		}
	deselectChip();
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fde6 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fdd3 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fdf0 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d000      	beq.n	8002a8a <_ZN12cc11xx_class6rxPackEv+0x108>
 8002a88:	e7f3      	b.n	8002a72 <_ZN12cc11xx_class6rxPackEv+0xf0>
	SP->DR=STX;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2235      	movs	r2, #53	; 0x35
 8002a90:	819a      	strh	r2, [r3, #12]
	while  (!(SP->SR & (SPI_SR_TXE)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	891b      	ldrh	r3, [r3, #8]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf0c      	ite	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	2300      	movne	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d000      	beq.n	8002aae <_ZN12cc11xx_class6rxPackEv+0x12c>
 8002aac:	e7f1      	b.n	8002a92 <_ZN12cc11xx_class6rxPackEv+0x110>

			return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_ZN12cc11xx_class7sendSTBEh>:

btype_t cc11xx_class::sendSTB(uint8_t stb)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
	deselectChip();
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fdb7 	bl	8002638 <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fda4 	bl	8002618 <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fdc1 	bl	8002658 <_ZN12cc11xx_class7getMISOEv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d000      	beq.n	8002ae8 <_ZN12cc11xx_class7sendSTBEh+0x30>
 8002ae6:	e7f3      	b.n	8002ad0 <_ZN12cc11xx_class7sendSTBEh+0x18>
	while  (!(SP->SR & SPI_SR_TXE));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	891b      	ldrh	r3, [r3, #8]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d000      	beq.n	8002b04 <_ZN12cc11xx_class7sendSTBEh+0x4c>
 8002b02:	e7f1      	b.n	8002ae8 <_ZN12cc11xx_class7sendSTBEh+0x30>
	SP->DR=stb;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	b292      	uxth	r2, r2
 8002b0c:	819a      	strh	r2, [r3, #12]
	while  (!(SP->SR & (SPI_SR_TXE)));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	891b      	ldrh	r3, [r3, #8]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf0c      	ite	eq
 8002b1e:	2301      	moveq	r3, #1
 8002b20:	2300      	movne	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d000      	beq.n	8002b2a <_ZN12cc11xx_class7sendSTBEh+0x72>
 8002b28:	e7f1      	b.n	8002b0e <_ZN12cc11xx_class7sendSTBEh+0x56>
	return 1;
 8002b2a:	2301      	movs	r3, #1
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <main>:
};



int main(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af02      	add	r7, sp, #8
	prvClockCoreInit();
 8002b3a:	f000 f841 	bl	8002bc0 <_Z16prvClockCoreInitv>
	prvCommunicationInit();
 8002b3e:	f000 f899 	bl	8002c74 <_Z20prvCommunicationInitv>

//xTaskCreate(ATaskCanBus, "CAN Task",  100, NULL, tskIDLE_PRIORITY,  NULL);
	xTaskCreate(ARadioTask, "RF Task1",  500,(void*) &RTask1 ,2,  NULL);
 8002b42:	2300      	movs	r3, #0
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <main+0x68>)
 8002b4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b50:	4913      	ldr	r1, [pc, #76]	; (8002ba0 <main+0x6c>)
 8002b52:	4814      	ldr	r0, [pc, #80]	; (8002ba4 <main+0x70>)
 8002b54:	f7fe fa18 	bl	8000f88 <xTaskCreate>
	xTaskCreate(ARadioTaskS, "RF Task2",  500,(void*) &RTask2 ,2,  NULL);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <main+0x74>)
 8002b62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b66:	4911      	ldr	r1, [pc, #68]	; (8002bac <main+0x78>)
 8002b68:	4811      	ldr	r0, [pc, #68]	; (8002bb0 <main+0x7c>)
 8002b6a:	f7fe fa0d 	bl	8000f88 <xTaskCreate>
	//delete RTask1;
	xTaskCreate(run1Task, "Run1 Task",  100, NULL,2,  NULL);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2302      	movs	r3, #2
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	2264      	movs	r2, #100	; 0x64
 8002b7a:	490e      	ldr	r1, [pc, #56]	; (8002bb4 <main+0x80>)
 8002b7c:	480e      	ldr	r0, [pc, #56]	; (8002bb8 <main+0x84>)
 8002b7e:	f7fe fa03 	bl	8000f88 <xTaskCreate>
	xTaskCreate(run1Task, "Run2 Task",  100, NULL,2,  NULL);
 8002b82:	2300      	movs	r3, #0
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	2302      	movs	r3, #2
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2264      	movs	r2, #100	; 0x64
 8002b8e:	490b      	ldr	r1, [pc, #44]	; (8002bbc <main+0x88>)
 8002b90:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <main+0x84>)
 8002b92:	f7fe f9f9 	bl	8000f88 <xTaskCreate>
	vTaskStartScheduler();
 8002b96:	f7fe fb5d 	bl	8001254 <vTaskStartScheduler>



  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <main+0x66>
 8002b9c:	20000044 	.word	0x20000044
 8002ba0:	08003224 	.word	0x08003224
 8002ba4:	08002259 	.word	0x08002259
 8002ba8:	20000058 	.word	0x20000058
 8002bac:	08003230 	.word	0x08003230
 8002bb0:	080022d5 	.word	0x080022d5
 8002bb4:	0800323c 	.word	0x0800323c
 8002bb8:	08002cc9 	.word	0x08002cc9
 8002bbc:	08003248 	.word	0x08003248

08002bc0 <_Z16prvClockCoreInitv>:
  }
}

//core  clock init function, this a critical function
void prvClockCoreInit (void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_2;// flash latency delay 2t
 8002bc4:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <_Z16prvClockCoreInitv+0xac>)
 8002bc6:	4b29      	ldr	r3, [pc, #164]	; (8002c6c <_Z16prvClockCoreInitv+0xac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE;// Perfech enable
 8002bd0:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <_Z16prvClockCoreInitv+0xac>)
 8002bd2:	4b26      	ldr	r3, [pc, #152]	; (8002c6c <_Z16prvClockCoreInitv+0xac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f043 0310 	orr.w	r3, r3, #16
 8002bda:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0xC<<18);// set mul x14
 8002bdc:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002be6:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=~0x00010000; // set pll clk hsi div 2
 8002be8:	4a21      	ldr	r2, [pc, #132]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=0xfffffffc;
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002bf6:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=0x2;// use pll1 from clock
 8002c00:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	6053      	str	r3, [r2, #4]
	RCC->CR|=0x1000000;// enable pll
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c16:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0<<13); //APB2 no div
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(4<<10);  // APB1 /2 28  MHz
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2a:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(0<<7); // AHB no div
 8002c2c:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	6053      	str	r3, [r2, #4]
	while(!(RCC->CR & RCC_CR_PLLRDY));// wait stabilize pll
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d000      	beq.n	8002c4c <_Z16prvClockCoreInitv+0x8c>
 8002c4a:	e7f3      	b.n	8002c34 <_Z16prvClockCoreInitv+0x74>
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));//56 Mhz
 8002c4c:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <_Z16prvClockCoreInitv+0xb0>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d000      	beq.n	8002c64 <_Z16prvClockCoreInitv+0xa4>
 8002c62:	e7f3      	b.n	8002c4c <_Z16prvClockCoreInitv+0x8c>
	/*RCC->APB1ENR=RCC_APB1ENR_CAN1EN;
		RCC->APB2ENR=RCC_APB2ENR_TIM1EN|RCC_APB2ENR_USART1EN;
		RCC->APB2ENR=RCC_APB2ENR_AFIOEN|RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN|RCC_APB2ENR_IOPCEN|
		RCC_APB2ENR_TIM1EN|RCC_APB2ENR_ADC1EN;// enable clk pereph here
		*/
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	40022000 	.word	0x40022000
 8002c70:	40021000 	.word	0x40021000

08002c74 <_Z20prvCommunicationInitv>:

void prvCommunicationInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
	RCC->APB1ENR|=RCC_APB1ENR_CAN1EN; //CAN clk EN
 8002c78:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <_Z20prvCommunicationInitv+0x48>)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <_Z20prvCommunicationInitv+0x48>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c82:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN; //UART1 clk EN
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <_Z20prvCommunicationInitv+0x48>)
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <_Z20prvCommunicationInitv+0x48>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8e:	6193      	str	r3, [r2, #24]
	// uart init definition
	USART1->BRR=((0x1e<<4)|4);//115200
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <_Z20prvCommunicationInitv+0x4c>)
 8002c92:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8002c96:	811a      	strh	r2, [r3, #8]
	USART1->CR1|=USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8002c98:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <_Z20prvCommunicationInitv+0x4c>)
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <_Z20prvCommunicationInitv+0x4c>)
 8002c9c:	899b      	ldrh	r3, [r3, #12]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca4:	f043 030c 	orr.w	r3, r3, #12
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	8193      	strh	r3, [r2, #12]

	// CAN bus definition
	CAN1->MCR=0;
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <_Z20prvCommunicationInitv+0x50>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
	/*RCC->APB2ENR|=RCC_APB2ENR_SPI1EN  ;
	SPI1->CR1=0;
	SPI1->CR1=(0x6<<3)|SPI_CR1_MSTR; // clock div 128(56M/128), SPI is a master mode
	SPI1->CR1|=SPI_CR1_SPE;*/

}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40006400 	.word	0x40006400

08002cc8 <_Z8run1TaskPv>:

void run1Task(void *pvParameters)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	int x,y;
	for(;;)
	{
		x++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
		y=x+y;
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]
		if (x>1000000) x=0;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_Z8run1TaskPv+0x30>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	dd01      	ble.n	8002cea <_Z8run1TaskPv+0x22>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
		if (y>999999)y=0;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a03      	ldr	r2, [pc, #12]	; (8002cfc <_Z8run1TaskPv+0x34>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	ddee      	ble.n	8002cd0 <_Z8run1TaskPv+0x8>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
		x++;
 8002cf6:	e7eb      	b.n	8002cd0 <_Z8run1TaskPv+0x8>
 8002cf8:	000f4240 	.word	0x000f4240
 8002cfc:	000f423f 	.word	0x000f423f

08002d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d06:	e003      	b.n	8002d10 <LoopCopyDataInit>

08002d08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002d0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d0e:	3104      	adds	r1, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d10:	480b      	ldr	r0, [pc, #44]	; (8002d40 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002d14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d18:	d3f6      	bcc.n	8002d08 <CopyDataInit>
	ldr	r2, =_sbss
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002d1c:	e002      	b.n	8002d24 <LoopFillZerobss>

08002d1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d20:	f842 3b04 	str.w	r3, [r2], #4

08002d24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002d26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d28:	d3f9      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d2a:	f000 f82b 	bl	8002d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f000 f905 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d32:	f7ff feff 	bl	8002b34 <main>
	bx	lr
 8002d36:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d38:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002d3c:	0800325c 	.word	0x0800325c
	ldr	r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d44:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 8002d48:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 8002d4c:	2000020c 	.word	0x2000020c

08002d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d50:	e7fe      	b.n	8002d50 <ADC1_2_IRQHandler>

08002d52 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
}
 8002d56:	bf00      	nop
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <HardFault_Handler+0x4>

08002d64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <MemManage_Handler+0x4>

08002d6a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002d6e:	e7fe      	b.n	8002d6e <BusFault_Handler+0x4>

08002d70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <UsageFault_Handler+0x4>

08002d76 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <SystemInit+0x5c>)
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <SystemInit+0x5c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002d94:	4912      	ldr	r1, [pc, #72]	; (8002de0 <SystemInit+0x5c>)
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <SystemInit+0x5c>)
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <SystemInit+0x60>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002da0:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <SystemInit+0x5c>)
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <SystemInit+0x5c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002db0:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <SystemInit+0x5c>)
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <SystemInit+0x5c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <SystemInit+0x5c>)
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <SystemInit+0x5c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002dc6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <SystemInit+0x5c>)
 8002dca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002dce:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002dd0:	f000 f80c 	bl	8002dec <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SystemInit+0x64>)
 8002dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dda:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000
 8002de4:	f8ff0000 	.word	0xf8ff0000
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_36MHz
  SetSysClockTo36();
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
 8002df0:	f000 f802 	bl	8002df8 <SetSysClockTo56>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002df4:	bf00      	nop
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <SetSysClockTo56>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo56(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e08:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002e12:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <SetSysClockTo56+0x38>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e2e:	d1f0      	bne.n	8002e12 <SetSysClockTo56+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002e30:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <SetSysClockTo56+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	e001      	b.n	8002e46 <SetSysClockTo56+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002e42:	2300      	movs	r3, #0
 8002e44:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d14b      	bne.n	8002ee4 <SetSysClockTo56+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e4e:	4b29      	ldr	r3, [pc, #164]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <SetSysClockTo56+0xfc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f043 0302 	orr.w	r3, r3, #2
 8002e6e:	6013      	str	r3, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e72:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e8a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL7); 
#else     
    /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002e96:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e9a:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8002ea2:	6053      	str	r3, [r2, #4]

#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002ea4:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ea6:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002eb0:	bf00      	nop
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f9      	beq.n	8002eb2 <SetSysClockTo56+0xba>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8002eca:	4a09      	ldr	r2, [pc, #36]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ecc:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8002ed6:	bf00      	nop
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <SetSysClockTo56+0xf8>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d1f9      	bne.n	8002ed8 <SetSysClockTo56+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <_Znwj>:
 8002ef8:	b510      	push	{r4, lr}
 8002efa:	2800      	cmp	r0, #0
 8002efc:	bf14      	ite	ne
 8002efe:	4604      	movne	r4, r0
 8002f00:	2401      	moveq	r4, #1
 8002f02:	4620      	mov	r0, r4
 8002f04:	f000 f83e 	bl	8002f84 <malloc>
 8002f08:	b930      	cbnz	r0, 8002f18 <_Znwj+0x20>
 8002f0a:	f000 f807 	bl	8002f1c <_ZSt15get_new_handlerv>
 8002f0e:	b908      	cbnz	r0, 8002f14 <_Znwj+0x1c>
 8002f10:	f000 f80c 	bl	8002f2c <abort>
 8002f14:	4780      	blx	r0
 8002f16:	e7f4      	b.n	8002f02 <_Znwj+0xa>
 8002f18:	bd10      	pop	{r4, pc}
	...

08002f1c <_ZSt15get_new_handlerv>:
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <_ZSt15get_new_handlerv+0xc>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	f3bf 8f5b 	dmb	ish
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	200001f8 	.word	0x200001f8

08002f2c <abort>:
 8002f2c:	b508      	push	{r3, lr}
 8002f2e:	2006      	movs	r0, #6
 8002f30:	f000 f926 	bl	8003180 <raise>
 8002f34:	2001      	movs	r0, #1
 8002f36:	f000 f95f 	bl	80031f8 <_exit>
	...

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	2500      	movs	r5, #0
 8002f40:	4e0c      	ldr	r6, [pc, #48]	; (8002f74 <__libc_init_array+0x38>)
 8002f42:	4c0d      	ldr	r4, [pc, #52]	; (8002f78 <__libc_init_array+0x3c>)
 8002f44:	1ba4      	subs	r4, r4, r6
 8002f46:	10a4      	asrs	r4, r4, #2
 8002f48:	42a5      	cmp	r5, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	f000 f956 	bl	80031fc <_init>
 8002f50:	2500      	movs	r5, #0
 8002f52:	4e0a      	ldr	r6, [pc, #40]	; (8002f7c <__libc_init_array+0x40>)
 8002f54:	4c0a      	ldr	r4, [pc, #40]	; (8002f80 <__libc_init_array+0x44>)
 8002f56:	1ba4      	subs	r4, r4, r6
 8002f58:	10a4      	asrs	r4, r4, #2
 8002f5a:	42a5      	cmp	r5, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f64:	4798      	blx	r3
 8002f66:	3501      	adds	r5, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f6e:	4798      	blx	r3
 8002f70:	3501      	adds	r5, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08003254 	.word	0x08003254
 8002f78:	08003254 	.word	0x08003254
 8002f7c:	08003254 	.word	0x08003254
 8002f80:	08003258 	.word	0x08003258

08002f84 <malloc>:
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <malloc+0xc>)
 8002f86:	4601      	mov	r1, r0
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	f000 b863 	b.w	8003054 <_malloc_r>
 8002f8e:	bf00      	nop
 8002f90:	2000006c 	.word	0x2000006c

08002f94 <free>:
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <free+0xc>)
 8002f96:	4601      	mov	r1, r0
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	f000 b80f 	b.w	8002fbc <_free_r>
 8002f9e:	bf00      	nop
 8002fa0:	2000006c 	.word	0x2000006c

08002fa4 <memcpy>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	1e43      	subs	r3, r0, #1
 8002fa8:	440a      	add	r2, r1
 8002faa:	4291      	cmp	r1, r2
 8002fac:	d100      	bne.n	8002fb0 <memcpy+0xc>
 8002fae:	bd10      	pop	{r4, pc}
 8002fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fb8:	e7f7      	b.n	8002faa <memcpy+0x6>
	...

08002fbc <_free_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d043      	beq.n	800304c <_free_r+0x90>
 8002fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc8:	1f0c      	subs	r4, r1, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfb8      	it	lt
 8002fce:	18e4      	addlt	r4, r4, r3
 8002fd0:	f000 f8f2 	bl	80031b8 <__malloc_lock>
 8002fd4:	4a1e      	ldr	r2, [pc, #120]	; (8003050 <_free_r+0x94>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	4610      	mov	r0, r2
 8002fda:	b933      	cbnz	r3, 8002fea <_free_r+0x2e>
 8002fdc:	6063      	str	r3, [r4, #4]
 8002fde:	6014      	str	r4, [r2, #0]
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fe6:	f000 b8e8 	b.w	80031ba <__malloc_unlock>
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	d90b      	bls.n	8003006 <_free_r+0x4a>
 8002fee:	6821      	ldr	r1, [r4, #0]
 8002ff0:	1862      	adds	r2, r4, r1
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bf01      	itttt	eq
 8002ff6:	681a      	ldreq	r2, [r3, #0]
 8002ff8:	685b      	ldreq	r3, [r3, #4]
 8002ffa:	1852      	addeq	r2, r2, r1
 8002ffc:	6022      	streq	r2, [r4, #0]
 8002ffe:	6063      	str	r3, [r4, #4]
 8003000:	6004      	str	r4, [r0, #0]
 8003002:	e7ed      	b.n	8002fe0 <_free_r+0x24>
 8003004:	4613      	mov	r3, r2
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	b10a      	cbz	r2, 800300e <_free_r+0x52>
 800300a:	42a2      	cmp	r2, r4
 800300c:	d9fa      	bls.n	8003004 <_free_r+0x48>
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	1858      	adds	r0, r3, r1
 8003012:	42a0      	cmp	r0, r4
 8003014:	d10b      	bne.n	800302e <_free_r+0x72>
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	4401      	add	r1, r0
 800301a:	1858      	adds	r0, r3, r1
 800301c:	4282      	cmp	r2, r0
 800301e:	6019      	str	r1, [r3, #0]
 8003020:	d1de      	bne.n	8002fe0 <_free_r+0x24>
 8003022:	6810      	ldr	r0, [r2, #0]
 8003024:	6852      	ldr	r2, [r2, #4]
 8003026:	4401      	add	r1, r0
 8003028:	6019      	str	r1, [r3, #0]
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e7d8      	b.n	8002fe0 <_free_r+0x24>
 800302e:	d902      	bls.n	8003036 <_free_r+0x7a>
 8003030:	230c      	movs	r3, #12
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	e7d4      	b.n	8002fe0 <_free_r+0x24>
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	1821      	adds	r1, r4, r0
 800303a:	428a      	cmp	r2, r1
 800303c:	bf01      	itttt	eq
 800303e:	6811      	ldreq	r1, [r2, #0]
 8003040:	6852      	ldreq	r2, [r2, #4]
 8003042:	1809      	addeq	r1, r1, r0
 8003044:	6021      	streq	r1, [r4, #0]
 8003046:	6062      	str	r2, [r4, #4]
 8003048:	605c      	str	r4, [r3, #4]
 800304a:	e7c9      	b.n	8002fe0 <_free_r+0x24>
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	200001fc 	.word	0x200001fc

08003054 <_malloc_r>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	1ccd      	adds	r5, r1, #3
 8003058:	f025 0503 	bic.w	r5, r5, #3
 800305c:	3508      	adds	r5, #8
 800305e:	2d0c      	cmp	r5, #12
 8003060:	bf38      	it	cc
 8003062:	250c      	movcc	r5, #12
 8003064:	2d00      	cmp	r5, #0
 8003066:	4606      	mov	r6, r0
 8003068:	db01      	blt.n	800306e <_malloc_r+0x1a>
 800306a:	42a9      	cmp	r1, r5
 800306c:	d903      	bls.n	8003076 <_malloc_r+0x22>
 800306e:	230c      	movs	r3, #12
 8003070:	6033      	str	r3, [r6, #0]
 8003072:	2000      	movs	r0, #0
 8003074:	bd70      	pop	{r4, r5, r6, pc}
 8003076:	f000 f89f 	bl	80031b8 <__malloc_lock>
 800307a:	4a23      	ldr	r2, [pc, #140]	; (8003108 <_malloc_r+0xb4>)
 800307c:	6814      	ldr	r4, [r2, #0]
 800307e:	4621      	mov	r1, r4
 8003080:	b991      	cbnz	r1, 80030a8 <_malloc_r+0x54>
 8003082:	4c22      	ldr	r4, [pc, #136]	; (800310c <_malloc_r+0xb8>)
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	b91b      	cbnz	r3, 8003090 <_malloc_r+0x3c>
 8003088:	4630      	mov	r0, r6
 800308a:	f000 f841 	bl	8003110 <_sbrk_r>
 800308e:	6020      	str	r0, [r4, #0]
 8003090:	4629      	mov	r1, r5
 8003092:	4630      	mov	r0, r6
 8003094:	f000 f83c 	bl	8003110 <_sbrk_r>
 8003098:	1c43      	adds	r3, r0, #1
 800309a:	d126      	bne.n	80030ea <_malloc_r+0x96>
 800309c:	230c      	movs	r3, #12
 800309e:	4630      	mov	r0, r6
 80030a0:	6033      	str	r3, [r6, #0]
 80030a2:	f000 f88a 	bl	80031ba <__malloc_unlock>
 80030a6:	e7e4      	b.n	8003072 <_malloc_r+0x1e>
 80030a8:	680b      	ldr	r3, [r1, #0]
 80030aa:	1b5b      	subs	r3, r3, r5
 80030ac:	d41a      	bmi.n	80030e4 <_malloc_r+0x90>
 80030ae:	2b0b      	cmp	r3, #11
 80030b0:	d90f      	bls.n	80030d2 <_malloc_r+0x7e>
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	18cc      	adds	r4, r1, r3
 80030b6:	50cd      	str	r5, [r1, r3]
 80030b8:	4630      	mov	r0, r6
 80030ba:	f000 f87e 	bl	80031ba <__malloc_unlock>
 80030be:	f104 000b 	add.w	r0, r4, #11
 80030c2:	1d23      	adds	r3, r4, #4
 80030c4:	f020 0007 	bic.w	r0, r0, #7
 80030c8:	1ac3      	subs	r3, r0, r3
 80030ca:	d01b      	beq.n	8003104 <_malloc_r+0xb0>
 80030cc:	425a      	negs	r2, r3
 80030ce:	50e2      	str	r2, [r4, r3]
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
 80030d2:	428c      	cmp	r4, r1
 80030d4:	bf0b      	itete	eq
 80030d6:	6863      	ldreq	r3, [r4, #4]
 80030d8:	684b      	ldrne	r3, [r1, #4]
 80030da:	6013      	streq	r3, [r2, #0]
 80030dc:	6063      	strne	r3, [r4, #4]
 80030de:	bf18      	it	ne
 80030e0:	460c      	movne	r4, r1
 80030e2:	e7e9      	b.n	80030b8 <_malloc_r+0x64>
 80030e4:	460c      	mov	r4, r1
 80030e6:	6849      	ldr	r1, [r1, #4]
 80030e8:	e7ca      	b.n	8003080 <_malloc_r+0x2c>
 80030ea:	1cc4      	adds	r4, r0, #3
 80030ec:	f024 0403 	bic.w	r4, r4, #3
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d005      	beq.n	8003100 <_malloc_r+0xac>
 80030f4:	1a21      	subs	r1, r4, r0
 80030f6:	4630      	mov	r0, r6
 80030f8:	f000 f80a 	bl	8003110 <_sbrk_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d0cd      	beq.n	800309c <_malloc_r+0x48>
 8003100:	6025      	str	r5, [r4, #0]
 8003102:	e7d9      	b.n	80030b8 <_malloc_r+0x64>
 8003104:	bd70      	pop	{r4, r5, r6, pc}
 8003106:	bf00      	nop
 8003108:	200001fc 	.word	0x200001fc
 800310c:	20000200 	.word	0x20000200

08003110 <_sbrk_r>:
 8003110:	b538      	push	{r3, r4, r5, lr}
 8003112:	2300      	movs	r3, #0
 8003114:	4c05      	ldr	r4, [pc, #20]	; (800312c <_sbrk_r+0x1c>)
 8003116:	4605      	mov	r5, r0
 8003118:	4608      	mov	r0, r1
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	f000 f85e 	bl	80031dc <_sbrk>
 8003120:	1c43      	adds	r3, r0, #1
 8003122:	d102      	bne.n	800312a <_sbrk_r+0x1a>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	b103      	cbz	r3, 800312a <_sbrk_r+0x1a>
 8003128:	602b      	str	r3, [r5, #0]
 800312a:	bd38      	pop	{r3, r4, r5, pc}
 800312c:	20000208 	.word	0x20000208

08003130 <_raise_r>:
 8003130:	291f      	cmp	r1, #31
 8003132:	b538      	push	{r3, r4, r5, lr}
 8003134:	4604      	mov	r4, r0
 8003136:	460d      	mov	r5, r1
 8003138:	d904      	bls.n	8003144 <_raise_r+0x14>
 800313a:	2316      	movs	r3, #22
 800313c:	6003      	str	r3, [r0, #0]
 800313e:	f04f 30ff 	mov.w	r0, #4294967295
 8003142:	bd38      	pop	{r3, r4, r5, pc}
 8003144:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003146:	b112      	cbz	r2, 800314e <_raise_r+0x1e>
 8003148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800314c:	b94b      	cbnz	r3, 8003162 <_raise_r+0x32>
 800314e:	4620      	mov	r0, r4
 8003150:	f000 f830 	bl	80031b4 <_getpid_r>
 8003154:	462a      	mov	r2, r5
 8003156:	4601      	mov	r1, r0
 8003158:	4620      	mov	r0, r4
 800315a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800315e:	f000 b817 	b.w	8003190 <_kill_r>
 8003162:	2b01      	cmp	r3, #1
 8003164:	d00a      	beq.n	800317c <_raise_r+0x4c>
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	d103      	bne.n	8003172 <_raise_r+0x42>
 800316a:	2316      	movs	r3, #22
 800316c:	6003      	str	r3, [r0, #0]
 800316e:	2001      	movs	r0, #1
 8003170:	bd38      	pop	{r3, r4, r5, pc}
 8003172:	2400      	movs	r4, #0
 8003174:	4628      	mov	r0, r5
 8003176:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800317a:	4798      	blx	r3
 800317c:	2000      	movs	r0, #0
 800317e:	bd38      	pop	{r3, r4, r5, pc}

08003180 <raise>:
 8003180:	4b02      	ldr	r3, [pc, #8]	; (800318c <raise+0xc>)
 8003182:	4601      	mov	r1, r0
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	f7ff bfd3 	b.w	8003130 <_raise_r>
 800318a:	bf00      	nop
 800318c:	2000006c 	.word	0x2000006c

08003190 <_kill_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	2300      	movs	r3, #0
 8003194:	4c06      	ldr	r4, [pc, #24]	; (80031b0 <_kill_r+0x20>)
 8003196:	4605      	mov	r5, r0
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	f000 f815 	bl	80031cc <_kill>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d102      	bne.n	80031ac <_kill_r+0x1c>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	b103      	cbz	r3, 80031ac <_kill_r+0x1c>
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	bd38      	pop	{r3, r4, r5, pc}
 80031ae:	bf00      	nop
 80031b0:	20000208 	.word	0x20000208

080031b4 <_getpid_r>:
 80031b4:	f000 b802 	b.w	80031bc <_getpid>

080031b8 <__malloc_lock>:
 80031b8:	4770      	bx	lr

080031ba <__malloc_unlock>:
 80031ba:	4770      	bx	lr

080031bc <_getpid>:
 80031bc:	2258      	movs	r2, #88	; 0x58
 80031be:	4b02      	ldr	r3, [pc, #8]	; (80031c8 <_getpid+0xc>)
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4770      	bx	lr
 80031c8:	20000208 	.word	0x20000208

080031cc <_kill>:
 80031cc:	2258      	movs	r2, #88	; 0x58
 80031ce:	4b02      	ldr	r3, [pc, #8]	; (80031d8 <_kill+0xc>)
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	4770      	bx	lr
 80031d8:	20000208 	.word	0x20000208

080031dc <_sbrk>:
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <_sbrk+0x14>)
 80031de:	4602      	mov	r2, r0
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	b909      	cbnz	r1, 80031e8 <_sbrk+0xc>
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <_sbrk+0x18>)
 80031e6:	6019      	str	r1, [r3, #0]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	4402      	add	r2, r0
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	4770      	bx	lr
 80031f0:	20000204 	.word	0x20000204
 80031f4:	2000020c 	.word	0x2000020c

080031f8 <_exit>:
 80031f8:	e7fe      	b.n	80031f8 <_exit>
	...

080031fc <_init>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr

08003208 <_fini>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr
