
canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003cd4  08003cd4  00013cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a0  20000000  08003d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  200000a0  08003e0c  000200a0  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000258  08003e0c  00020258  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa55  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b0d  00000000  00000000  0002ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006a0  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003ec7  00000000  00000000  0002d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a32  00000000  00000000  0003116f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033ba1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001e5c  00000000  00000000  00033c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00035a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000076  00000000  00000000  00035ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cbc 	.word	0x08003cbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08003cbc 	.word	0x08003cbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_d2f>:
 80004d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d8:	bf24      	itt	cs
 80004da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e2:	d90d      	bls.n	8000500 <__aeabi_d2f+0x30>
 80004e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f8:	bf08      	it	eq
 80004fa:	f020 0001 	biceq.w	r0, r0, #1
 80004fe:	4770      	bx	lr
 8000500:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000504:	d121      	bne.n	800054a <__aeabi_d2f+0x7a>
 8000506:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050a:	bfbc      	itt	lt
 800050c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000510:	4770      	bxlt	lr
 8000512:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000516:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051a:	f1c2 0218 	rsb	r2, r2, #24
 800051e:	f1c2 0c20 	rsb	ip, r2, #32
 8000522:	fa10 f30c 	lsls.w	r3, r0, ip
 8000526:	fa20 f002 	lsr.w	r0, r0, r2
 800052a:	bf18      	it	ne
 800052c:	f040 0001 	orrne.w	r0, r0, #1
 8000530:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000534:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000538:	fa03 fc0c 	lsl.w	ip, r3, ip
 800053c:	ea40 000c 	orr.w	r0, r0, ip
 8000540:	fa23 f302 	lsr.w	r3, r3, r2
 8000544:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000548:	e7cc      	b.n	80004e4 <__aeabi_d2f+0x14>
 800054a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800054e:	d107      	bne.n	8000560 <__aeabi_d2f+0x90>
 8000550:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000554:	bf1e      	ittt	ne
 8000556:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800055e:	4770      	bxne	lr
 8000560:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000564:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__aeabi_frsub>:
 8000570:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000574:	e002      	b.n	800057c <__addsf3>
 8000576:	bf00      	nop

08000578 <__aeabi_fsub>:
 8000578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800057c <__addsf3>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	bf1f      	itttt	ne
 8000580:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000584:	ea92 0f03 	teqne	r2, r3
 8000588:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800058c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000590:	d06a      	beq.n	8000668 <__addsf3+0xec>
 8000592:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000596:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059a:	bfc1      	itttt	gt
 800059c:	18d2      	addgt	r2, r2, r3
 800059e:	4041      	eorgt	r1, r0
 80005a0:	4048      	eorgt	r0, r1
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	bfb8      	it	lt
 80005a6:	425b      	neglt	r3, r3
 80005a8:	2b19      	cmp	r3, #25
 80005aa:	bf88      	it	hi
 80005ac:	4770      	bxhi	lr
 80005ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005ba:	bf18      	it	ne
 80005bc:	4240      	negne	r0, r0
 80005be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ca:	bf18      	it	ne
 80005cc:	4249      	negne	r1, r1
 80005ce:	ea92 0f03 	teq	r2, r3
 80005d2:	d03f      	beq.n	8000654 <__addsf3+0xd8>
 80005d4:	f1a2 0201 	sub.w	r2, r2, #1
 80005d8:	fa41 fc03 	asr.w	ip, r1, r3
 80005dc:	eb10 000c 	adds.w	r0, r0, ip
 80005e0:	f1c3 0320 	rsb	r3, r3, #32
 80005e4:	fa01 f103 	lsl.w	r1, r1, r3
 80005e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005ec:	d502      	bpl.n	80005f4 <__addsf3+0x78>
 80005ee:	4249      	negs	r1, r1
 80005f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005f8:	d313      	bcc.n	8000622 <__addsf3+0xa6>
 80005fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fe:	d306      	bcc.n	800060e <__addsf3+0x92>
 8000600:	0840      	lsrs	r0, r0, #1
 8000602:	ea4f 0131 	mov.w	r1, r1, rrx
 8000606:	f102 0201 	add.w	r2, r2, #1
 800060a:	2afe      	cmp	r2, #254	; 0xfe
 800060c:	d251      	bcs.n	80006b2 <__addsf3+0x136>
 800060e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000612:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000616:	bf08      	it	eq
 8000618:	f020 0001 	biceq.w	r0, r0, #1
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	4770      	bx	lr
 8000622:	0049      	lsls	r1, r1, #1
 8000624:	eb40 0000 	adc.w	r0, r0, r0
 8000628:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800062c:	f1a2 0201 	sub.w	r2, r2, #1
 8000630:	d1ed      	bne.n	800060e <__addsf3+0x92>
 8000632:	fab0 fc80 	clz	ip, r0
 8000636:	f1ac 0c08 	sub.w	ip, ip, #8
 800063a:	ebb2 020c 	subs.w	r2, r2, ip
 800063e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000642:	bfaa      	itet	ge
 8000644:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000648:	4252      	neglt	r2, r2
 800064a:	4318      	orrge	r0, r3
 800064c:	bfbc      	itt	lt
 800064e:	40d0      	lsrlt	r0, r2
 8000650:	4318      	orrlt	r0, r3
 8000652:	4770      	bx	lr
 8000654:	f092 0f00 	teq	r2, #0
 8000658:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800065c:	bf06      	itte	eq
 800065e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000662:	3201      	addeq	r2, #1
 8000664:	3b01      	subne	r3, #1
 8000666:	e7b5      	b.n	80005d4 <__addsf3+0x58>
 8000668:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	bf18      	it	ne
 8000672:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000676:	d021      	beq.n	80006bc <__addsf3+0x140>
 8000678:	ea92 0f03 	teq	r2, r3
 800067c:	d004      	beq.n	8000688 <__addsf3+0x10c>
 800067e:	f092 0f00 	teq	r2, #0
 8000682:	bf08      	it	eq
 8000684:	4608      	moveq	r0, r1
 8000686:	4770      	bx	lr
 8000688:	ea90 0f01 	teq	r0, r1
 800068c:	bf1c      	itt	ne
 800068e:	2000      	movne	r0, #0
 8000690:	4770      	bxne	lr
 8000692:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000696:	d104      	bne.n	80006a2 <__addsf3+0x126>
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	bf28      	it	cs
 800069c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a0:	4770      	bx	lr
 80006a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006a6:	bf3c      	itt	cc
 80006a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006ac:	4770      	bxcc	lr
 80006ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ba:	4770      	bx	lr
 80006bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c0:	bf16      	itet	ne
 80006c2:	4608      	movne	r0, r1
 80006c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c8:	4601      	movne	r1, r0
 80006ca:	0242      	lsls	r2, r0, #9
 80006cc:	bf06      	itte	eq
 80006ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d2:	ea90 0f01 	teqeq	r0, r1
 80006d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006da:	4770      	bx	lr

080006dc <__aeabi_ui2f>:
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	e004      	b.n	80006ec <__aeabi_i2f+0x8>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2f>:
 80006e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	ea5f 0c00 	movs.w	ip, r0
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006f8:	4601      	mov	r1, r0
 80006fa:	f04f 0000 	mov.w	r0, #0
 80006fe:	e01c      	b.n	800073a <__aeabi_l2f+0x2a>

08000700 <__aeabi_ul2f>:
 8000700:	ea50 0201 	orrs.w	r2, r0, r1
 8000704:	bf08      	it	eq
 8000706:	4770      	bxeq	lr
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	e00a      	b.n	8000724 <__aeabi_l2f+0x14>
 800070e:	bf00      	nop

08000710 <__aeabi_l2f>:
 8000710:	ea50 0201 	orrs.w	r2, r0, r1
 8000714:	bf08      	it	eq
 8000716:	4770      	bxeq	lr
 8000718:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800071c:	d502      	bpl.n	8000724 <__aeabi_l2f+0x14>
 800071e:	4240      	negs	r0, r0
 8000720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000724:	ea5f 0c01 	movs.w	ip, r1
 8000728:	bf02      	ittt	eq
 800072a:	4684      	moveq	ip, r0
 800072c:	4601      	moveq	r1, r0
 800072e:	2000      	moveq	r0, #0
 8000730:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000734:	bf08      	it	eq
 8000736:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800073e:	fabc f28c 	clz	r2, ip
 8000742:	3a08      	subs	r2, #8
 8000744:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000748:	db10      	blt.n	800076c <__aeabi_l2f+0x5c>
 800074a:	fa01 fc02 	lsl.w	ip, r1, r2
 800074e:	4463      	add	r3, ip
 8000750:	fa00 fc02 	lsl.w	ip, r0, r2
 8000754:	f1c2 0220 	rsb	r2, r2, #32
 8000758:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800075c:	fa20 f202 	lsr.w	r2, r0, r2
 8000760:	eb43 0002 	adc.w	r0, r3, r2
 8000764:	bf08      	it	eq
 8000766:	f020 0001 	biceq.w	r0, r0, #1
 800076a:	4770      	bx	lr
 800076c:	f102 0220 	add.w	r2, r2, #32
 8000770:	fa01 fc02 	lsl.w	ip, r1, r2
 8000774:	f1c2 0220 	rsb	r2, r2, #32
 8000778:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800077c:	fa21 f202 	lsr.w	r2, r1, r2
 8000780:	eb43 0002 	adc.w	r0, r3, r2
 8000784:	bf08      	it	eq
 8000786:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078a:	4770      	bx	lr

0800078c <__aeabi_f2iz>:
 800078c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000790:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000794:	d30f      	bcc.n	80007b6 <__aeabi_f2iz+0x2a>
 8000796:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800079a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800079e:	d90d      	bls.n	80007bc <__aeabi_f2iz+0x30>
 80007a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007a8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ac:	fa23 f002 	lsr.w	r0, r3, r2
 80007b0:	bf18      	it	ne
 80007b2:	4240      	negne	r0, r0
 80007b4:	4770      	bx	lr
 80007b6:	f04f 0000 	mov.w	r0, #0
 80007ba:	4770      	bx	lr
 80007bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007c0:	d101      	bne.n	80007c6 <__aeabi_f2iz+0x3a>
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	d105      	bne.n	80007d2 <__aeabi_f2iz+0x46>
 80007c6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80007ca:	bf08      	it	eq
 80007cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007d0:	4770      	bx	lr
 80007d2:	f04f 0000 	mov.w	r0, #0
 80007d6:	4770      	bx	lr

080007d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f103 0208 	add.w	r2, r3, #8
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f103 0208 	add.w	r2, r3, #8
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f103 0208 	add.w	r2, r3, #8
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	689a      	ldr	r2, [r3, #8]
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088a:	d103      	bne.n	8000894 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e00c      	b.n	80008ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3308      	adds	r3, #8
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e002      	b.n	80008a2 <vListInsert+0x2e>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d9f6      	bls.n	800089c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	6892      	ldr	r2, [r2, #8]
 80008fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6852      	ldr	r2, [r2, #4]
 8000904:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	685a      	ldr	r2, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	d103      	bne.n	8000918 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3b04      	subs	r3, #4
 8000948:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3b04      	subs	r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	f023 0201 	bic.w	r2, r3, #1
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	3b04      	subs	r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <pxPortInitialiseStack+0x54>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3b14      	subs	r3, #20
 8000972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3b20      	subs	r3, #32
 800097e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	08000991 	.word	0x08000991

08000990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <prvTaskExitError+0x4c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a2:	d009      	beq.n	80009b8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80009a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a8:	f383 8811 	msr	BASEPRI, r3
 80009ac:	f3bf 8f6f 	isb	sy
 80009b0:	f3bf 8f4f 	dsb	sy
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e7fe      	b.n	80009b6 <prvTaskExitError+0x26>
 80009b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009bc:	f383 8811 	msr	BASEPRI, r3
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	f3bf 8f4f 	dsb	sy
 80009c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80009ca:	bf00      	nop
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0fc      	beq.n	80009cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000000 	.word	0x20000000

080009e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <pxCurrentTCBConst2>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	6808      	ldr	r0, [r1, #0]
 80009e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009ea:	f380 8809 	msr	PSP, r0
 80009ee:	f3bf 8f6f 	isb	sy
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	f380 8811 	msr	BASEPRI, r0
 80009fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80009fe:	4770      	bx	lr

08000a00 <pxCurrentTCBConst2>:
 8000a00:	200000c4 	.word	0x200000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop

08000a08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <prvPortStartFirstTask+0x1c>)
 8000a0a:	6800      	ldr	r0, [r0, #0]
 8000a0c:	6800      	ldr	r0, [r0, #0]
 8000a0e:	f380 8808 	msr	MSP, r0
 8000a12:	b662      	cpsie	i
 8000a14:	b661      	cpsie	f
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	f3bf 8f6f 	isb	sy
 8000a1e:	df00      	svc	0
 8000a20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000a22:	bf00      	nop
 8000a24:	e000ed08 	.word	0xe000ed08

08000a28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <xPortStartScheduler+0xcc>)
 8000a30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	22ff      	movs	r2, #255	; 0xff
 8000a3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <xPortStartScheduler+0xd0>)
 8000a54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <xPortStartScheduler+0xd4>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a5c:	e009      	b.n	8000a72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <xPortStartScheduler+0xd4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a25      	ldr	r2, [pc, #148]	; (8000afc <xPortStartScheduler+0xd4>)
 8000a66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000a72:	78fb      	ldrb	r3, [r7, #3]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	2b80      	cmp	r3, #128	; 0x80
 8000a7c:	d0ef      	beq.n	8000a5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <xPortStartScheduler+0xd4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d009      	beq.n	8000a9e <xPortStartScheduler+0x76>
 8000a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a8e:	f383 8811 	msr	BASEPRI, r3
 8000a92:	f3bf 8f6f 	isb	sy
 8000a96:	f3bf 8f4f 	dsb	sy
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	e7fe      	b.n	8000a9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <xPortStartScheduler+0xd4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <xPortStartScheduler+0xd4>)
 8000aa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <xPortStartScheduler+0xd4>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000ab0:	4a12      	ldr	r2, [pc, #72]	; (8000afc <xPortStartScheduler+0xd4>)
 8000ab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <xPortStartScheduler+0xd8>)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <xPortStartScheduler+0xd8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <xPortStartScheduler+0xd8>)
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <xPortStartScheduler+0xd8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000ad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000ad4:	f000 f8b0 	bl	8000c38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <xPortStartScheduler+0xdc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000ade:	f7ff ff93 	bl	8000a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000ae2:	f001 f8d5 	bl	8001c90 <vTaskSwitchContext>
	prvTaskExitError();
 8000ae6:	f7ff ff53 	bl	8000990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	e000e400 	.word	0xe000e400
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	e000ed20 	.word	0xe000ed20
 8000b04:	20000000 	.word	0x20000000

08000b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b12:	f383 8811 	msr	BASEPRI, r3
 8000b16:	f3bf 8f6f 	isb	sy
 8000b1a:	f3bf 8f4f 	dsb	sy
 8000b1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <vPortEnterCritical+0x54>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <vPortEnterCritical+0x54>)
 8000b28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <vPortEnterCritical+0x54>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10e      	bne.n	8000b50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <vPortEnterCritical+0x58>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d009      	beq.n	8000b50 <vPortEnterCritical+0x48>
 8000b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b40:	f383 8811 	msr	BASEPRI, r3
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	f3bf 8f4f 	dsb	sy
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	e7fe      	b.n	8000b4e <vPortEnterCritical+0x46>
	}
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <vPortExitCritical+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d109      	bne.n	8000b86 <vPortExitCritical+0x22>
 8000b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	e7fe      	b.n	8000b84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <vPortExitCritical+0x48>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <vPortExitCritical+0x48>)
 8000b8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <vPortExitCritical+0x48>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d104      	bne.n	8000ba2 <vPortExitCritical+0x3e>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000000 	.word	0x20000000

08000bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000bb0:	f3ef 8009 	mrs	r0, PSP
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <pxCurrentTCBConst>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000bc0:	6010      	str	r0, [r2, #0]
 8000bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000bc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000bca:	f380 8811 	msr	BASEPRI, r0
 8000bce:	f001 f85f 	bl	8001c90 <vTaskSwitchContext>
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	f380 8811 	msr	BASEPRI, r0
 8000bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	6808      	ldr	r0, [r1, #0]
 8000be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000be6:	f380 8809 	msr	PSP, r0
 8000bea:	f3bf 8f6f 	isb	sy
 8000bee:	4770      	bx	lr

08000bf0 <pxCurrentTCBConst>:
 8000bf0:	200000c4 	.word	0x200000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop

08000bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8000bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c02:	f383 8811 	msr	BASEPRI, r3
 8000c06:	f3bf 8f6f 	isb	sy
 8000c0a:	f3bf 8f4f 	dsb	sy
 8000c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000c10:	f000 ff86 	bl	8001b20 <xTaskIncrementTick>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SysTick_Handler+0x3c>)
 8000c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	e000ed04 	.word	0xe000ed04

08000c38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <vPortSetupTimerInterrupt+0x28>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <vPortSetupTimerInterrupt+0x2c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <vPortSetupTimerInterrupt+0x30>)
 8000c4a:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8000c4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <vPortSetupTimerInterrupt+0x28>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010
 8000c64:	e000e018 	.word	0xe000e018
 8000c68:	e000e014 	.word	0xe000e014

08000c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000c72:	f3ef 8305 	mrs	r3, IPSR
 8000c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d913      	bls.n	8000ca6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <vPortValidateInterruptPriority+0x68>)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4413      	add	r3, r2
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <vPortValidateInterruptPriority+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	7afa      	ldrb	r2, [r7, #11]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d209      	bcs.n	8000ca6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c96:	f383 8811 	msr	BASEPRI, r3
 8000c9a:	f3bf 8f6f 	isb	sy
 8000c9e:	f3bf 8f4f 	dsb	sy
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	e7fe      	b.n	8000ca4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <vPortValidateInterruptPriority+0x70>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <vPortValidateInterruptPriority+0x74>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <vPortValidateInterruptPriority+0x5e>
 8000cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cba:	f383 8811 	msr	BASEPRI, r3
 8000cbe:	f3bf 8f6f 	isb	sy
 8000cc2:	f3bf 8f4f 	dsb	sy
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	e7fe      	b.n	8000cc8 <vPortValidateInterruptPriority+0x5c>
	}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e3f0 	.word	0xe000e3f0
 8000cd8:	200000bc 	.word	0x200000bc
 8000cdc:	e000ed0c 	.word	0xe000ed0c
 8000ce0:	200000c0 	.word	0x200000c0

08000ce4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000cec:	f000 fe60 	bl	80019b0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f002 fe57 	bl	80039a4 <malloc>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000cfa:	f000 fe67 	bl	80019cc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	if( pv )
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000d16:	f000 fe4b 	bl	80019b0 <vTaskSuspendAll>
		{
			free( pv );
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f002 fe4a 	bl	80039b4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8000d20:	f000 fe54 	bl	80019cc <xTaskResumeAll>
	}
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <xQueueGenericReset+0x28>
 8000d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	e7fe      	b.n	8000d52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000d54:	f7ff fed8 	bl	8000b08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d60:	68f9      	ldr	r1, [r7, #12]
 8000d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d64:	fb01 f303 	mul.w	r3, r1, r3
 8000d68:	441a      	add	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2200      	movs	r2, #0
 8000d72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d84:	3b01      	subs	r3, #1
 8000d86:	68f9      	ldr	r1, [r7, #12]
 8000d88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	441a      	add	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	22ff      	movs	r2, #255	; 0xff
 8000da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d114      	bne.n	8000dd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d01a      	beq.n	8000de8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3310      	adds	r3, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f812 	bl	8001de0 <xTaskRemoveFromEventList>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <xQueueGenericReset+0xcc>)
 8000dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	f3bf 8f4f 	dsb	sy
 8000dce:	f3bf 8f6f 	isb	sy
 8000dd2:	e009      	b.n	8000de8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3310      	adds	r3, #16
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fcfd 	bl	80007d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3324      	adds	r3, #36	; 0x24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fcf8 	bl	80007d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000de8:	f7ff febc 	bl	8000b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000ed04 	.word	0xe000ed04

08000dfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	4613      	mov	r3, r2
 8000e08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d109      	bne.n	8000e24 <xQueueGenericCreate+0x28>
 8000e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e14:	f383 8811 	msr	BASEPRI, r3
 8000e18:	f3bf 8f6f 	isb	sy
 8000e1c:	f3bf 8f4f 	dsb	sy
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e7fe      	b.n	8000e22 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3348      	adds	r3, #72	; 0x48
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff56 	bl	8000ce4 <pvPortMalloc>
 8000e38:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00d      	beq.n	8000e5c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3348      	adds	r3, #72	; 0x48
 8000e48:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f000 f805 	bl	8000e66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e5c:	69bb      	ldr	r3, [r7, #24]
	}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d103      	bne.n	8000e82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e002      	b.n	8000e88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000e94:	2101      	movs	r1, #1
 8000e96:	69b8      	ldr	r0, [r7, #24]
 8000e98:	f7ff ff48 	bl	8000d2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08e      	sub	sp, #56	; 0x38
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
 8000eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d109      	bne.n	8000ed4 <xQueueGenericSend+0x30>
 8000ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed2:	e7fe      	b.n	8000ed2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <xQueueGenericSend+0x3e>
 8000eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <xQueueGenericSend+0x42>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <xQueueGenericSend+0x44>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <xQueueGenericSend+0x5c>
 8000eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
 8000efe:	e7fe      	b.n	8000efe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d103      	bne.n	8000f0e <xQueueGenericSend+0x6a>
 8000f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <xQueueGenericSend+0x6e>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <xQueueGenericSend+0x70>
 8000f12:	2300      	movs	r3, #0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d109      	bne.n	8000f2c <xQueueGenericSend+0x88>
 8000f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1c:	f383 8811 	msr	BASEPRI, r3
 8000f20:	f3bf 8f6f 	isb	sy
 8000f24:	f3bf 8f4f 	dsb	sy
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	e7fe      	b.n	8000f2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f2c:	f001 f8f0 	bl	8002110 <xTaskGetSchedulerState>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <xQueueGenericSend+0x98>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <xQueueGenericSend+0x9c>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <xQueueGenericSend+0x9e>
 8000f40:	2300      	movs	r3, #0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d109      	bne.n	8000f5a <xQueueGenericSend+0xb6>
 8000f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4a:	f383 8811 	msr	BASEPRI, r3
 8000f4e:	f3bf 8f6f 	isb	sy
 8000f52:	f3bf 8f4f 	dsb	sy
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	e7fe      	b.n	8000f58 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f5a:	f7ff fdd5 	bl	8000b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d302      	bcc.n	8000f70 <xQueueGenericSend+0xcc>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d129      	bne.n	8000fc4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f76:	f000 fa25 	bl	80013c4 <prvCopyDataToQueue>
 8000f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d010      	beq.n	8000fa6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f86:	3324      	adds	r3, #36	; 0x24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 ff29 	bl	8001de0 <xTaskRemoveFromEventList>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <xQueueGenericSend+0x1f0>)
 8000f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	f3bf 8f4f 	dsb	sy
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	e00a      	b.n	8000fbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d007      	beq.n	8000fbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <xQueueGenericSend+0x1f0>)
 8000fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	f3bf 8f4f 	dsb	sy
 8000fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000fbc:	f7ff fdd2 	bl	8000b64 <vPortExitCritical>
				return pdPASS;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e063      	b.n	800108c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000fca:	f7ff fdcb 	bl	8000b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e05c      	b.n	800108c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d106      	bne.n	8000fe6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 ff61 	bl	8001ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000fe6:	f7ff fdbd 	bl	8000b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000fea:	f000 fce1 	bl	80019b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000fee:	f7ff fd8b 	bl	8000b08 <vPortEnterCritical>
 8000ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ffe:	d103      	bne.n	8001008 <xQueueGenericSend+0x164>
 8001000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800100e:	b25b      	sxtb	r3, r3
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d103      	bne.n	800101e <xQueueGenericSend+0x17a>
 8001016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800101e:	f7ff fda1 	bl	8000b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001022:	1d3a      	adds	r2, r7, #4
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4611      	mov	r1, r2
 800102a:	4618      	mov	r0, r3
 800102c:	f000 ff50 	bl	8001ed0 <xTaskCheckForTimeOut>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d124      	bne.n	8001080 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001038:	f000 fabc 	bl	80015b4 <prvIsQueueFull>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d018      	beq.n	8001074 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001044:	3310      	adds	r3, #16
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe7a 	bl	8001d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001052:	f000 fa47 	bl	80014e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001056:	f000 fcb9 	bl	80019cc <xTaskResumeAll>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f af7c 	bne.w	8000f5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <xQueueGenericSend+0x1f0>)
 8001064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	f3bf 8f4f 	dsb	sy
 800106e:	f3bf 8f6f 	isb	sy
 8001072:	e772      	b.n	8000f5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001076:	f000 fa35 	bl	80014e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800107a:	f000 fca7 	bl	80019cc <xTaskResumeAll>
 800107e:	e76c      	b.n	8000f5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001082:	f000 fa2f 	bl	80014e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001086:	f000 fca1 	bl	80019cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800108a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800108c:	4618      	mov	r0, r3
 800108e:	3738      	adds	r7, #56	; 0x38
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	e000ed04 	.word	0xe000ed04

08001098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b090      	sub	sp, #64	; 0x40
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80010aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <xQueueGenericSendFromISR+0x2c>
 80010b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010c2:	e7fe      	b.n	80010c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d103      	bne.n	80010d2 <xQueueGenericSendFromISR+0x3a>
 80010ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <xQueueGenericSendFromISR+0x3e>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <xQueueGenericSendFromISR+0x40>
 80010d6:	2300      	movs	r3, #0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d109      	bne.n	80010f0 <xQueueGenericSendFromISR+0x58>
 80010dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
 80010ee:	e7fe      	b.n	80010ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d103      	bne.n	80010fe <xQueueGenericSendFromISR+0x66>
 80010f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <xQueueGenericSendFromISR+0x6a>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <xQueueGenericSendFromISR+0x6c>
 8001102:	2300      	movs	r3, #0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <xQueueGenericSendFromISR+0x84>
 8001108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110c:	f383 8811 	msr	BASEPRI, r3
 8001110:	f3bf 8f6f 	isb	sy
 8001114:	f3bf 8f4f 	dsb	sy
 8001118:	623b      	str	r3, [r7, #32]
 800111a:	e7fe      	b.n	800111a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800111c:	f7ff fda6 	bl	8000c6c <vPortValidateInterruptPriority>
	__asm volatile
 8001120:	f3ef 8211 	mrs	r2, BASEPRI
 8001124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	61fa      	str	r2, [r7, #28]
 8001136:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001138:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800113c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800113e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	429a      	cmp	r2, r3
 8001146:	d302      	bcc.n	800114e <xQueueGenericSendFromISR+0xb6>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d12f      	bne.n	80011ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800114e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001154:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001164:	f000 f92e 	bl	80013c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001168:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d112      	bne.n	8001198 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	3324      	adds	r3, #36	; 0x24
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fe2e 	bl	8001de0 <xTaskRemoveFromEventList>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00e      	beq.n	80011a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e007      	b.n	80011a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800119c:	3301      	adds	r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80011a8:	2301      	movs	r3, #1
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80011ac:	e001      	b.n	80011b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b4:	617b      	str	r3, [r7, #20]
	__asm volatile
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80011bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	; 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <xQueueReceive+0x2e>
	__asm volatile
 80011e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e6:	f383 8811 	msr	BASEPRI, r3
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	f3bf 8f4f 	dsb	sy
 80011f2:	623b      	str	r3, [r7, #32]
 80011f4:	e7fe      	b.n	80011f4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <xQueueReceive+0x3c>
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <xQueueReceive+0x40>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <xQueueReceive+0x42>
 8001208:	2300      	movs	r3, #0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d109      	bne.n	8001222 <xQueueReceive+0x5a>
 800120e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001212:	f383 8811 	msr	BASEPRI, r3
 8001216:	f3bf 8f6f 	isb	sy
 800121a:	f3bf 8f4f 	dsb	sy
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	e7fe      	b.n	8001220 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001222:	f000 ff75 	bl	8002110 <xTaskGetSchedulerState>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <xQueueReceive+0x6a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <xQueueReceive+0x6e>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <xQueueReceive+0x70>
 8001236:	2300      	movs	r3, #0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <xQueueReceive+0x88>
 800123c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001240:	f383 8811 	msr	BASEPRI, r3
 8001244:	f3bf 8f6f 	isb	sy
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e7fe      	b.n	800124e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001250:	f7ff fc5a 	bl	8000b08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	2b00      	cmp	r3, #0
 800125e:	d01f      	beq.n	80012a0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001264:	f000 f918 	bl	8001498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00f      	beq.n	8001298 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	3310      	adds	r3, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fdaf 	bl	8001de0 <xTaskRemoveFromEventList>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <xQueueReceive+0x1b4>)
 800128a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	f3bf 8f4f 	dsb	sy
 8001294:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001298:	f7ff fc64 	bl	8000b64 <vPortExitCritical>
				return pdPASS;
 800129c:	2301      	movs	r3, #1
 800129e:	e069      	b.n	8001374 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d103      	bne.n	80012ae <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80012a6:	f7ff fc5d 	bl	8000b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e062      	b.n	8001374 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fdf3 	bl	8001ea4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80012be:	2301      	movs	r3, #1
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80012c2:	f7ff fc4f 	bl	8000b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80012c6:	f000 fb73 	bl	80019b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80012ca:	f7ff fc1d 	bl	8000b08 <vPortEnterCritical>
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012da:	d103      	bne.n	80012e4 <xQueueReceive+0x11c>
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d103      	bne.n	80012fa <xQueueReceive+0x132>
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012fa:	f7ff fc33 	bl	8000b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012fe:	1d3a      	adds	r2, r7, #4
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4611      	mov	r1, r2
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fde2 	bl	8001ed0 <xTaskCheckForTimeOut>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d123      	bne.n	800135a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001314:	f000 f938 	bl	8001588 <prvIsQueueEmpty>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d017      	beq.n	800134e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	3324      	adds	r3, #36	; 0x24
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fd0c 	bl	8001d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800132c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800132e:	f000 f8d9 	bl	80014e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001332:	f000 fb4b 	bl	80019cc <xTaskResumeAll>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d189      	bne.n	8001250 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <xQueueReceive+0x1b4>)
 800133e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f3bf 8f4f 	dsb	sy
 8001348:	f3bf 8f6f 	isb	sy
 800134c:	e780      	b.n	8001250 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800134e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001350:	f000 f8c8 	bl	80014e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001354:	f000 fb3a 	bl	80019cc <xTaskResumeAll>
 8001358:	e77a      	b.n	8001250 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800135a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800135c:	f000 f8c2 	bl	80014e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001360:	f000 fb34 	bl	80019cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001366:	f000 f90f 	bl	8001588 <prvIsQueueEmpty>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	f43f af6f 	beq.w	8001250 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001372:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001374:	4618      	mov	r0, r3
 8001376:	3730      	adds	r7, #48	; 0x30
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	e000ed04 	.word	0xe000ed04

08001380 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <uxQueueSpacesAvailable+0x26>
 8001392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001396:	f383 8811 	msr	BASEPRI, r3
 800139a:	f3bf 8f6f 	isb	sy
 800139e:	f3bf 8f4f 	dsb	sy
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e7fe      	b.n	80013a4 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80013a6:	f7ff fbaf 	bl	8000b08 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80013b6:	f7ff fbd5 	bl	8000b64 <vPortExitCritical>

	return uxReturn;
 80013ba:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80013bc:	4618      	mov	r0, r3
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10d      	bne.n	80013fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d14d      	bne.n	8001486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 feac 	bl	800214c <xTaskPriorityDisinherit>
 80013f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e043      	b.n	8001486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d119      	bne.n	8001438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6858      	ldr	r0, [r3, #4]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	461a      	mov	r2, r3
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	f002 fad8 	bl	80039c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	441a      	add	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	429a      	cmp	r2, r3
 800142c:	d32b      	bcc.n	8001486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	e026      	b.n	8001486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	68d8      	ldr	r0, [r3, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	461a      	mov	r2, r3
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	f002 fabe 	bl	80039c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	425b      	negs	r3, r3
 8001452:	441a      	add	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	425b      	negs	r3, r3
 800146e:	441a      	add	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d105      	bne.n	8001486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	3b01      	subs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800148e:	697b      	ldr	r3, [r7, #20]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d018      	beq.n	80014dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	441a      	add	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d303      	bcc.n	80014cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	461a      	mov	r2, r3
 80014d6:	6838      	ldr	r0, [r7, #0]
 80014d8:	f002 fa74 	bl	80039c4 <memcpy>
	}
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80014ec:	f7ff fb0c 	bl	8000b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80014f8:	e011      	b.n	800151e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3324      	adds	r3, #36	; 0x24
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fc6a 	bl	8001de0 <xTaskRemoveFromEventList>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001512:	f000 fd3d 	bl	8001f90 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3b01      	subs	r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	dce9      	bgt.n	80014fa <prvUnlockQueue+0x16>
 8001526:	e000      	b.n	800152a <prvUnlockQueue+0x46>
					break;
 8001528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001532:	f7ff fb17 	bl	8000b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001536:	f7ff fae7 	bl	8000b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001542:	e011      	b.n	8001568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d012      	beq.n	8001572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3310      	adds	r3, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fc45 	bl	8001de0 <xTaskRemoveFromEventList>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800155c:	f000 fd18 	bl	8001f90 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	3b01      	subs	r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800156c:	2b00      	cmp	r3, #0
 800156e:	dce9      	bgt.n	8001544 <prvUnlockQueue+0x60>
 8001570:	e000      	b.n	8001574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	22ff      	movs	r2, #255	; 0xff
 8001578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800157c:	f7ff faf2 	bl	8000b64 <vPortExitCritical>
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001590:	f7ff faba 	bl	8000b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800159c:	2301      	movs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e001      	b.n	80015a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015a6:	f7ff fadd 	bl	8000b64 <vPortExitCritical>

	return xReturn;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015bc:	f7ff faa4 	bl	8000b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d102      	bne.n	80015d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	e001      	b.n	80015d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015d6:	f7ff fac5 	bl	8000b64 <vPortExitCritical>

	return xReturn;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80015f4:	f7ff fa88 	bl	8000b08 <vPortEnterCritical>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d103      	bne.n	800160e <vQueueWaitForMessageRestricted+0x2a>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001614:	b25b      	sxtb	r3, r3
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d103      	bne.n	8001624 <vQueueWaitForMessageRestricted+0x40>
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001624:	f7ff fa9e 	bl	8000b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162c:	2b00      	cmp	r3, #0
 800162e:	d106      	bne.n	800163e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3324      	adds	r3, #36	; 0x24
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	68b9      	ldr	r1, [r7, #8]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fba7 	bl	8001d8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff50 	bl	80014e4 <prvUnlockQueue>
	}
 8001644:	bf00      	nop
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af04      	add	r7, sp, #16
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fb3f 	bl	8000ce4 <pvPortMalloc>
 8001666:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00e      	beq.n	800168c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800166e:	2050      	movs	r0, #80	; 0x50
 8001670:	f7ff fb38 	bl	8000ce4 <pvPortMalloc>
 8001674:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	631a      	str	r2, [r3, #48]	; 0x30
 8001682:	e005      	b.n	8001690 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff fb3f 	bl	8000d08 <vPortFree>
 800168a:	e001      	b.n	8001690 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d013      	beq.n	80016be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	2300      	movs	r3, #0
 800169a:	9303      	str	r3, [sp, #12]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f80e 	bl	80016ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80016b2:	69f8      	ldr	r0, [r7, #28]
 80016b4:	f000 f892 	bl	80017dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e002      	b.n	80016c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80016c4:	69bb      	ldr	r3, [r7, #24]
	}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b088      	sub	sp, #32
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016e6:	3b01      	subs	r3, #1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	f023 0307 	bic.w	r3, r3, #7
 80016f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d009      	beq.n	8001714 <prvInitialiseNewTask+0x46>
 8001700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	f3bf 8f6f 	isb	sy
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e7fe      	b.n	8001712 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01f      	beq.n	800175a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e012      	b.n	8001746 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	7819      	ldrb	r1, [r3, #0]
 8001728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	4413      	add	r3, r2
 800172e:	3334      	adds	r3, #52	; 0x34
 8001730:	460a      	mov	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	3301      	adds	r3, #1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b09      	cmp	r3, #9
 800174a:	d9e9      	bls.n	8001720 <prvInitialiseNewTask+0x52>
 800174c:	e000      	b.n	8001750 <prvInitialiseNewTask+0x82>
			{
				break;
 800174e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001758:	e003      	b.n	8001762 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	2b01      	cmp	r3, #1
 8001766:	d901      	bls.n	800176c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2200      	movs	r2, #0
 800177c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001780:	3304      	adds	r3, #4
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f847 	bl	8000816 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178a:	3318      	adds	r3, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f842 	bl	8000816 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	f1c3 0202 	rsb	r2, r3, #2
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80017a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80017a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017aa:	2200      	movs	r2, #0
 80017ac:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80017ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	68f9      	ldr	r1, [r7, #12]
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	f7ff f8bc 	bl	8000938 <pxPortInitialiseStack>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017e4:	f7ff f990 	bl	8000b08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <prvAddNewTaskToReadyList+0xb8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <prvAddNewTaskToReadyList+0xb8>)
 80017f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <prvAddNewTaskToReadyList+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017fa:	4a27      	ldr	r2, [pc, #156]	; (8001898 <prvAddNewTaskToReadyList+0xbc>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <prvAddNewTaskToReadyList+0xb8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d110      	bne.n	800182a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001808:	f000 fbe6 	bl	8001fd8 <prvInitialiseTaskLists>
 800180c:	e00d      	b.n	800182a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <prvAddNewTaskToReadyList+0xc0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <prvAddNewTaskToReadyList+0xbc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	429a      	cmp	r2, r3
 8001822:	d802      	bhi.n	800182a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <prvAddNewTaskToReadyList+0xbc>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <prvAddNewTaskToReadyList+0xc4>)
 8001832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	2201      	movs	r2, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <prvAddNewTaskToReadyList+0xc8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4313      	orrs	r3, r2
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <prvAddNewTaskToReadyList+0xc8>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <prvAddNewTaskToReadyList+0xcc>)
 8001854:	441a      	add	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3304      	adds	r3, #4
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f7fe ffe6 	bl	800082e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001862:	f7ff f97f 	bl	8000b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <prvAddNewTaskToReadyList+0xc0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00e      	beq.n	800188c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <prvAddNewTaskToReadyList+0xbc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <prvAddNewTaskToReadyList+0xd0>)
 800187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	f3bf 8f4f 	dsb	sy
 8001888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000160 	.word	0x20000160
 8001898:	200000c4 	.word	0x200000c4
 800189c:	2000016c 	.word	0x2000016c
 80018a0:	2000017c 	.word	0x2000017c
 80018a4:	20000168 	.word	0x20000168
 80018a8:	200000c8 	.word	0x200000c8
 80018ac:	e000ed04 	.word	0xe000ed04

080018b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <vTaskDelay+0x60>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <vTaskDelay+0x2e>
 80018ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ce:	f383 8811 	msr	BASEPRI, r3
 80018d2:	f3bf 8f6f 	isb	sy
 80018d6:	f3bf 8f4f 	dsb	sy
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	e7fe      	b.n	80018dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80018de:	f000 f867 	bl	80019b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018e2:	2100      	movs	r1, #0
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fcb5 	bl	8002254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018ea:	f000 f86f 	bl	80019cc <xTaskResumeAll>
 80018ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d107      	bne.n	8001906 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <vTaskDelay+0x64>)
 80018f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001906:	bf00      	nop
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000188 	.word	0x20000188
 8001914:	e000ed04 	.word	0xe000ed04

08001918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <vTaskStartScheduler+0x80>)
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2300      	movs	r3, #0
 8001928:	2246      	movs	r2, #70	; 0x46
 800192a:	491c      	ldr	r1, [pc, #112]	; (800199c <vTaskStartScheduler+0x84>)
 800192c:	481c      	ldr	r0, [pc, #112]	; (80019a0 <vTaskStartScheduler+0x88>)
 800192e:	f7ff fe8d 	bl	800164c <xTaskCreate>
 8001932:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800193a:	f000 fcf1 	bl	8002320 <xTimerCreateTimerTask>
 800193e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d115      	bne.n	8001972 <vTaskStartScheduler+0x5a>
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <vTaskStartScheduler+0x8c>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <vTaskStartScheduler+0x90>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <vTaskStartScheduler+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800196c:	f7ff f85c 	bl	8000a28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001970:	e00d      	b.n	800198e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d109      	bne.n	800198e <vTaskStartScheduler+0x76>
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e7fe      	b.n	800198c <vTaskStartScheduler+0x74>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000184 	.word	0x20000184
 800199c:	08003cd4 	.word	0x08003cd4
 80019a0:	08001fa9 	.word	0x08001fa9
 80019a4:	20000180 	.word	0x20000180
 80019a8:	2000016c 	.word	0x2000016c
 80019ac:	20000164 	.word	0x20000164

080019b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <vTaskSuspendAll+0x18>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <vTaskSuspendAll+0x18>)
 80019bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000188 	.word	0x20000188

080019cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <xTaskResumeAll+0x114>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <xTaskResumeAll+0x2a>
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	e7fe      	b.n	80019f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019f6:	f7ff f887 	bl	8000b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <xTaskResumeAll+0x114>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a37      	ldr	r2, [pc, #220]	; (8001ae0 <xTaskResumeAll+0x114>)
 8001a02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <xTaskResumeAll+0x114>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d161      	bne.n	8001ad0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <xTaskResumeAll+0x118>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05d      	beq.n	8001ad0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a14:	e02e      	b.n	8001a74 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <xTaskResumeAll+0x11c>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3318      	adds	r3, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe ff5e 	bl	80008e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe ff59 	bl	80008e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <xTaskResumeAll+0x120>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <xTaskResumeAll+0x120>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <xTaskResumeAll+0x124>)
 8001a52:	441a      	add	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7fe fee7 	bl	800082e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <xTaskResumeAll+0x128>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <xTaskResumeAll+0x12c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <xTaskResumeAll+0x11c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1cc      	bne.n	8001a16 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a82:	f000 fb25 	bl	80020d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <xTaskResumeAll+0x130>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a92:	f000 f845 	bl	8001b20 <xTaskIncrementTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <xTaskResumeAll+0x12c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f1      	bne.n	8001a92 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <xTaskResumeAll+0x130>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <xTaskResumeAll+0x12c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <xTaskResumeAll+0x134>)
 8001ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ad0:	f7ff f848 	bl	8000b64 <vPortExitCritical>

	return xAlreadyYielded;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000188 	.word	0x20000188
 8001ae4:	20000160 	.word	0x20000160
 8001ae8:	20000120 	.word	0x20000120
 8001aec:	20000168 	.word	0x20000168
 8001af0:	200000c8 	.word	0x200000c8
 8001af4:	200000c4 	.word	0x200000c4
 8001af8:	20000174 	.word	0x20000174
 8001afc:	20000170 	.word	0x20000170
 8001b00:	e000ed04 	.word	0xe000ed04

08001b04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <xTaskGetTickCount+0x18>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000164 	.word	0x20000164

08001b20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <xTaskIncrementTick+0x144>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 808d 	bne.w	8001c4e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b34:	4b4c      	ldr	r3, [pc, #304]	; (8001c68 <xTaskIncrementTick+0x148>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b3c:	4a4a      	ldr	r2, [pc, #296]	; (8001c68 <xTaskIncrementTick+0x148>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11f      	bne.n	8001b88 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <xTaskIncrementTick+0x14c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <xTaskIncrementTick+0x46>
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	e7fe      	b.n	8001b64 <xTaskIncrementTick+0x44>
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <xTaskIncrementTick+0x14c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <xTaskIncrementTick+0x150>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3e      	ldr	r2, [pc, #248]	; (8001c6c <xTaskIncrementTick+0x14c>)
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4a3e      	ldr	r2, [pc, #248]	; (8001c70 <xTaskIncrementTick+0x150>)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <xTaskIncrementTick+0x154>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <xTaskIncrementTick+0x154>)
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	f000 faa4 	bl	80020d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b88:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <xTaskIncrementTick+0x158>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d348      	bcc.n	8001c24 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b92:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <xTaskIncrementTick+0x14c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d104      	bne.n	8001ba6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <xTaskIncrementTick+0x158>)
 8001b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba2:	601a      	str	r2, [r3, #0]
					break;
 8001ba4:	e03e      	b.n	8001c24 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <xTaskIncrementTick+0x14c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d203      	bcs.n	8001bc6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <xTaskIncrementTick+0x158>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bc4:	e02e      	b.n	8001c24 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fe8a 	bl	80008e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3318      	adds	r3, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fe81 	bl	80008e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	2201      	movs	r2, #1
 8001be8:	409a      	lsls	r2, r3
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <xTaskIncrementTick+0x15c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <xTaskIncrementTick+0x15c>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <xTaskIncrementTick+0x160>)
 8001c02:	441a      	add	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f7fe fe0f 	bl	800082e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <xTaskIncrementTick+0x164>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3b9      	bcc.n	8001b92 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c22:	e7b6      	b.n	8001b92 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <xTaskIncrementTick+0x164>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2a:	4915      	ldr	r1, [pc, #84]	; (8001c80 <xTaskIncrementTick+0x160>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d901      	bls.n	8001c40 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <xTaskIncrementTick+0x168>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e004      	b.n	8001c58 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <xTaskIncrementTick+0x16c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <xTaskIncrementTick+0x16c>)
 8001c56:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c58:	697b      	ldr	r3, [r7, #20]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000188 	.word	0x20000188
 8001c68:	20000164 	.word	0x20000164
 8001c6c:	20000118 	.word	0x20000118
 8001c70:	2000011c 	.word	0x2000011c
 8001c74:	20000178 	.word	0x20000178
 8001c78:	20000180 	.word	0x20000180
 8001c7c:	20000168 	.word	0x20000168
 8001c80:	200000c8 	.word	0x200000c8
 8001c84:	200000c4 	.word	0x200000c4
 8001c88:	20000174 	.word	0x20000174
 8001c8c:	20000170 	.word	0x20000170

08001c90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <vTaskSwitchContext+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c9e:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <vTaskSwitchContext+0xa4>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ca4:	e03e      	b.n	8001d24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <vTaskSwitchContext+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cac:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <vTaskSwitchContext+0xa8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f1c3 031f 	rsb	r3, r3, #31
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	491e      	ldr	r1, [pc, #120]	; (8001d3c <vTaskSwitchContext+0xac>)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <vTaskSwitchContext+0x5a>
	__asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	e7fe      	b.n	8001ce8 <vTaskSwitchContext+0x58>
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4a11      	ldr	r2, [pc, #68]	; (8001d3c <vTaskSwitchContext+0xac>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d104      	bne.n	8001d1a <vTaskSwitchContext+0x8a>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <vTaskSwitchContext+0xb0>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000188 	.word	0x20000188
 8001d34:	20000174 	.word	0x20000174
 8001d38:	20000168 	.word	0x20000168
 8001d3c:	200000c8 	.word	0x200000c8
 8001d40:	200000c4 	.word	0x200000c4

08001d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <vTaskPlaceOnEventList+0x24>
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e7fe      	b.n	8001d66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d68:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <vTaskPlaceOnEventList+0x44>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7fe fd7f 	bl	8000874 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d76:	2101      	movs	r1, #1
 8001d78:	6838      	ldr	r0, [r7, #0]
 8001d7a:	f000 fa6b 	bl	8002254 <prvAddCurrentTaskToDelayedList>
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000c4 	.word	0x200000c4

08001d8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <vTaskPlaceOnEventListRestricted+0x26>
 8001d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e7fe      	b.n	8001db0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <vTaskPlaceOnEventListRestricted+0x50>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3318      	adds	r3, #24
 8001db8:	4619      	mov	r1, r3
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f7fe fd37 	bl	800082e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68b8      	ldr	r0, [r7, #8]
 8001dd0:	f000 fa40 	bl	8002254 <prvAddCurrentTaskToDelayedList>
	}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200000c4 	.word	0x200000c4

08001de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <xTaskRemoveFromEventList+0x2a>
 8001df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e7fe      	b.n	8001e08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fd68 	bl	80008e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <xTaskRemoveFromEventList+0xac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11c      	bne.n	8001e56 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fd5f 	bl	80008e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <xTaskRemoveFromEventList+0xb0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <xTaskRemoveFromEventList+0xb0>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4a13      	ldr	r2, [pc, #76]	; (8001e94 <xTaskRemoveFromEventList+0xb4>)
 8001e46:	441a      	add	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f7fe fced 	bl	800082e <vListInsertEnd>
 8001e54:	e005      	b.n	8001e62 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3318      	adds	r3, #24
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	480e      	ldr	r0, [pc, #56]	; (8001e98 <xTaskRemoveFromEventList+0xb8>)
 8001e5e:	f7fe fce6 	bl	800082e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <xTaskRemoveFromEventList+0xbc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d905      	bls.n	8001e7c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <xTaskRemoveFromEventList+0xc0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e001      	b.n	8001e80 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e80:	697b      	ldr	r3, [r7, #20]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000188 	.word	0x20000188
 8001e90:	20000168 	.word	0x20000168
 8001e94:	200000c8 	.word	0x200000c8
 8001e98:	20000120 	.word	0x20000120
 8001e9c:	200000c4 	.word	0x200000c4
 8001ea0:	20000174 	.word	0x20000174

08001ea4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <vTaskInternalSetTimeOutState+0x24>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <vTaskInternalSetTimeOutState+0x28>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	605a      	str	r2, [r3, #4]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000178 	.word	0x20000178
 8001ecc:	20000164 	.word	0x20000164

08001ed0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <xTaskCheckForTimeOut+0x24>
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	f383 8811 	msr	BASEPRI, r3
 8001ee8:	f3bf 8f6f 	isb	sy
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	e7fe      	b.n	8001ef2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <xTaskCheckForTimeOut+0x3e>
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e7fe      	b.n	8001f0c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001f0e:	f7fe fdfb 	bl	8000b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <xTaskCheckForTimeOut+0xb8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d102      	bne.n	8001f32 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e023      	b.n	8001f7a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <xTaskCheckForTimeOut+0xbc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d007      	beq.n	8001f4e <xTaskCheckForTimeOut+0x7e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d802      	bhi.n	8001f4e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e015      	b.n	8001f7a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d90b      	bls.n	8001f70 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff9d 	bl	8001ea4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e004      	b.n	8001f7a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f7a:	f7fe fdf3 	bl	8000b64 <vPortExitCritical>

	return xReturn;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000164 	.word	0x20000164
 8001f8c:	20000178 	.word	0x20000178

08001f90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <vTaskMissedYield+0x14>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000174 	.word	0x20000174

08001fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fb0:	f000 f852 	bl	8002058 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <prvIdleTask+0x28>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d9f9      	bls.n	8001fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <prvIdleTask+0x2c>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fcc:	e7f0      	b.n	8001fb0 <prvIdleTask+0x8>
 8001fce:	bf00      	nop
 8001fd0:	200000c8 	.word	0x200000c8
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e00c      	b.n	8001ffe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <prvInitialiseTaskLists+0x60>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fbf0 	bl	80007d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d9ef      	bls.n	8001fe4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <prvInitialiseTaskLists+0x64>)
 8002006:	f7fe fbe7 	bl	80007d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800200a:	480d      	ldr	r0, [pc, #52]	; (8002040 <prvInitialiseTaskLists+0x68>)
 800200c:	f7fe fbe4 	bl	80007d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <prvInitialiseTaskLists+0x6c>)
 8002012:	f7fe fbe1 	bl	80007d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <prvInitialiseTaskLists+0x70>)
 8002018:	f7fe fbde 	bl	80007d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800201c:	480b      	ldr	r0, [pc, #44]	; (800204c <prvInitialiseTaskLists+0x74>)
 800201e:	f7fe fbdb 	bl	80007d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <prvInitialiseTaskLists+0x78>)
 8002024:	4a05      	ldr	r2, [pc, #20]	; (800203c <prvInitialiseTaskLists+0x64>)
 8002026:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <prvInitialiseTaskLists+0x7c>)
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <prvInitialiseTaskLists+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200000c8 	.word	0x200000c8
 800203c:	200000f0 	.word	0x200000f0
 8002040:	20000104 	.word	0x20000104
 8002044:	20000120 	.word	0x20000120
 8002048:	20000134 	.word	0x20000134
 800204c:	2000014c 	.word	0x2000014c
 8002050:	20000118 	.word	0x20000118
 8002054:	2000011c 	.word	0x2000011c

08002058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800205e:	e019      	b.n	8002094 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002060:	f7fe fd52 	bl	8000b08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <prvCheckTasksWaitingTermination+0x4c>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fc37 	bl	80008e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <prvCheckTasksWaitingTermination+0x50>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <prvCheckTasksWaitingTermination+0x50>)
 800207e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <prvCheckTasksWaitingTermination+0x54>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <prvCheckTasksWaitingTermination+0x54>)
 8002088:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800208a:	f7fe fd6b 	bl	8000b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f80e 	bl	80020b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <prvCheckTasksWaitingTermination+0x54>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e1      	bne.n	8002060 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000134 	.word	0x20000134
 80020a8:	20000160 	.word	0x20000160
 80020ac:	20000148 	.word	0x20000148

080020b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fe23 	bl	8000d08 <vPortFree>
			vPortFree( pxTCB );
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe fe20 	bl	8000d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <prvResetNextTaskUnblockTime+0x38>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020e0:	4b0a      	ldr	r3, [pc, #40]	; (800210c <prvResetNextTaskUnblockTime+0x3c>)
 80020e2:	f04f 32ff 	mov.w	r2, #4294967295
 80020e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020e8:	e008      	b.n	80020fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <prvResetNextTaskUnblockTime+0x38>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <prvResetNextTaskUnblockTime+0x3c>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000118 	.word	0x20000118
 800210c:	20000180 	.word	0x20000180

08002110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <xTaskGetSchedulerState+0x34>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800211e:	2301      	movs	r3, #1
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	e008      	b.n	8002136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <xTaskGetSchedulerState+0x38>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800212c:	2302      	movs	r3, #2
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	e001      	b.n	8002136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002136:	687b      	ldr	r3, [r7, #4]
	}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	2000016c 	.word	0x2000016c
 8002148:	20000188 	.word	0x20000188

0800214c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06c      	beq.n	800223c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <xTaskPriorityDisinherit+0xfc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d009      	beq.n	8002180 <xTaskPriorityDisinherit+0x34>
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e7fe      	b.n	800217e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <xTaskPriorityDisinherit+0x50>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	e7fe      	b.n	800219a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d044      	beq.n	800223c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d140      	bne.n	800223c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3304      	adds	r3, #4
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fb90 	bl	80008e4 <uxListRemove>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d115      	bne.n	80021f6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ce:	491f      	ldr	r1, [pc, #124]	; (800224c <xTaskPriorityDisinherit+0x100>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <xTaskPriorityDisinherit+0xaa>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	2201      	movs	r2, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <xTaskPriorityDisinherit+0x104>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4013      	ands	r3, r2
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <xTaskPriorityDisinherit+0x104>)
 80021f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f1c3 0202 	rsb	r2, r3, #2
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <xTaskPriorityDisinherit+0x104>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <xTaskPriorityDisinherit+0x104>)
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <xTaskPriorityDisinherit+0x100>)
 800222a:	441a      	add	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7fe fafb 	bl	800082e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002238:	2301      	movs	r3, #1
 800223a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800223c:	697b      	ldr	r3, [r7, #20]
	}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200000c4 	.word	0x200000c4
 800224c:	200000c8 	.word	0x200000c8
 8002250:	20000168 	.word	0x20000168

08002254 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3304      	adds	r3, #4
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fb3a 	bl	80008e4 <uxListRemove>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10b      	bne.n	800228e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	2201      	movs	r2, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4013      	ands	r3, r2
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <prvAddCurrentTaskToDelayedList+0xb8>)
 800228c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d10a      	bne.n	80022ac <prvAddCurrentTaskToDelayedList+0x58>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3304      	adds	r3, #4
 80022a2:	4619      	mov	r1, r3
 80022a4:	481a      	ldr	r0, [pc, #104]	; (8002310 <prvAddCurrentTaskToDelayedList+0xbc>)
 80022a6:	f7fe fac2 	bl	800082e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022aa:	e026      	b.n	80022fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d209      	bcs.n	80022d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <prvAddCurrentTaskToDelayedList+0xc0>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4610      	mov	r0, r2
 80022d2:	f7fe facf 	bl	8000874 <vListInsert>
}
 80022d6:	e010      	b.n	80022fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <prvAddCurrentTaskToDelayedList+0xc4>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fe fac5 	bl	8000874 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <prvAddCurrentTaskToDelayedList+0xc8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d202      	bcs.n	80022fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80022f4:	4a09      	ldr	r2, [pc, #36]	; (800231c <prvAddCurrentTaskToDelayedList+0xc8>)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6013      	str	r3, [r2, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000164 	.word	0x20000164
 8002308:	200000c4 	.word	0x200000c4
 800230c:	20000168 	.word	0x20000168
 8002310:	2000014c 	.word	0x2000014c
 8002314:	2000011c 	.word	0x2000011c
 8002318:	20000118 	.word	0x20000118
 800231c:	20000180 	.word	0x20000180

08002320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800232a:	f000 facd 	bl	80028c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <xTimerCreateTimerTask+0x50>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <xTimerCreateTimerTask+0x54>)
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2303      	movs	r3, #3
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	2246      	movs	r2, #70	; 0x46
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <xTimerCreateTimerTask+0x58>)
 8002344:	480d      	ldr	r0, [pc, #52]	; (800237c <xTimerCreateTimerTask+0x5c>)
 8002346:	f7ff f981 	bl	800164c <xTaskCreate>
 800234a:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <xTimerCreateTimerTask+0x46>
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	e7fe      	b.n	8002364 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8002366:	687b      	ldr	r3, [r7, #4]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001bc 	.word	0x200001bc
 8002374:	200001c0 	.word	0x200001c0
 8002378:	08003cdc 	.word	0x08003cdc
 800237c:	080024b1 	.word	0x080024b1

08002380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <xTimerGenericCommand+0x2c>
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	e7fe      	b.n	80023aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <xTimerGenericCommand+0x94>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02a      	beq.n	800240a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b05      	cmp	r3, #5
 80023c4:	dc18      	bgt.n	80023f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023c6:	f7ff fea3 	bl	8002110 <xTaskGetSchedulerState>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d109      	bne.n	80023e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <xTimerGenericCommand+0x94>)
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	f107 0114 	add.w	r1, r7, #20
 80023d8:	2300      	movs	r3, #0
 80023da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023dc:	f7fe fd62 	bl	8000ea4 <xQueueGenericSend>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24
 80023e2:	e012      	b.n	800240a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <xTimerGenericCommand+0x94>)
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0114 	add.w	r1, r7, #20
 80023ec:	2300      	movs	r3, #0
 80023ee:	2200      	movs	r2, #0
 80023f0:	f7fe fd58 	bl	8000ea4 <xQueueGenericSend>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24
 80023f6:	e008      	b.n	800240a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <xTimerGenericCommand+0x94>)
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	f107 0114 	add.w	r1, r7, #20
 8002400:	2300      	movs	r3, #0
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	f7fe fe48 	bl	8001098 <xQueueGenericSendFromISR>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800240c:	4618      	mov	r0, r3
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200001bc 	.word	0x200001bc

08002418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af02      	add	r7, sp, #8
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002422:	4b22      	ldr	r3, [pc, #136]	; (80024ac <prvProcessExpiredTimer+0x94>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3304      	adds	r3, #4
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fa57 	bl	80008e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d021      	beq.n	8002488 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	18d1      	adds	r1, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6978      	ldr	r0, [r7, #20]
 8002452:	f000 f8cf 	bl	80025f4 <prvInsertTimerInActiveList>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01e      	beq.n	800249a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	2100      	movs	r1, #0
 8002466:	6978      	ldr	r0, [r7, #20]
 8002468:	f7ff ff8a 	bl	8002380 <xTimerGenericCommand>
 800246c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d112      	bne.n	800249a <prvProcessExpiredTimer+0x82>
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e7fe      	b.n	8002486 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	b2da      	uxtb	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	4798      	blx	r3
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200001b4 	.word	0x200001b4

080024b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f857 	bl	8002570 <prvGetNextExpireTime>
 80024c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4619      	mov	r1, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f803 	bl	80024d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024ce:	f000 f8d3 	bl	8002678 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024d2:	e7f1      	b.n	80024b8 <prvTimerTask+0x8>

080024d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80024de:	f7ff fa67 	bl	80019b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f864 	bl	80025b4 <prvSampleTimeNow>
 80024ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d130      	bne.n	8002556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <prvProcessTimerOrBlockTask+0x3c>
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d806      	bhi.n	8002510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002502:	f7ff fa63 	bl	80019cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff85 	bl	8002418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800250e:	e024      	b.n	800255a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <prvProcessTimerOrBlockTask+0x90>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <prvProcessTimerOrBlockTask+0x50>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <prvProcessTimerOrBlockTask+0x52>
 8002524:	2300      	movs	r3, #0
 8002526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <prvProcessTimerOrBlockTask+0x94>)
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f7ff f855 	bl	80015e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800253a:	f7ff fa47 	bl	80019cc <xTaskResumeAll>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10a      	bne.n	800255a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <prvProcessTimerOrBlockTask+0x98>)
 8002546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	f3bf 8f6f 	isb	sy
}
 8002554:	e001      	b.n	800255a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002556:	f7ff fa39 	bl	80019cc <xTaskResumeAll>
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200001b8 	.word	0x200001b8
 8002568:	200001bc 	.word	0x200001bc
 800256c:	e000ed04 	.word	0xe000ed04

08002570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <prvGetNextExpireTime+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <prvGetNextExpireTime+0x16>
 8002582:	2201      	movs	r2, #1
 8002584:	e000      	b.n	8002588 <prvGetNextExpireTime+0x18>
 8002586:	2200      	movs	r2, #0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <prvGetNextExpireTime+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e001      	b.n	80025a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025a4:	68fb      	ldr	r3, [r7, #12]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	200001b4 	.word	0x200001b4

080025b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025bc:	f7ff faa2 	bl	8001b04 <xTaskGetTickCount>
 80025c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <prvSampleTimeNow+0x3c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d205      	bcs.n	80025d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80025cc:	f000 f918 	bl	8002800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e002      	b.n	80025de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80025de:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <prvSampleTimeNow+0x3c>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80025e4:	68fb      	ldr	r3, [r7, #12]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200001c4 	.word	0x200001c4

080025f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d812      	bhi.n	8002640 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	429a      	cmp	r2, r3
 8002626:	d302      	bcc.n	800262e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	e01b      	b.n	8002666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <prvInsertTimerInActiveList+0x7c>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3304      	adds	r3, #4
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7fe f91b 	bl	8000874 <vListInsert>
 800263e:	e012      	b.n	8002666 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d206      	bcs.n	8002656 <prvInsertTimerInActiveList+0x62>
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d302      	bcc.n	8002656 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002650:	2301      	movs	r3, #1
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e007      	b.n	8002666 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002656:	4b07      	ldr	r3, [pc, #28]	; (8002674 <prvInsertTimerInActiveList+0x80>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3304      	adds	r3, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4610      	mov	r0, r2
 8002662:	f7fe f907 	bl	8000874 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002666:	697b      	ldr	r3, [r7, #20]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200001b8 	.word	0x200001b8
 8002674:	200001b4 	.word	0x200001b4

08002678 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800267e:	e0ac      	b.n	80027da <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f2c0 80a9 	blt.w	80027da <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3304      	adds	r3, #4
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe f923 	bl	80008e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff87 	bl	80025b4 <prvSampleTimeNow>
 80026a6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	f200 8094 	bhi.w	80027d8 <prvProcessReceivedCommands+0x160>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <prvProcessReceivedCommands+0x40>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026e1 	.word	0x080026e1
 80026bc:	080026e1 	.word	0x080026e1
 80026c0:	080026e1 	.word	0x080026e1
 80026c4:	08002753 	.word	0x08002753
 80026c8:	08002767 	.word	0x08002767
 80026cc:	080027af 	.word	0x080027af
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026e1 	.word	0x080026e1
 80026d8:	08002753 	.word	0x08002753
 80026dc:	08002767 	.word	0x08002767
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	18d1      	adds	r1, r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002700:	f7ff ff78 	bl	80025f4 <prvInsertTimerInActiveList>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d067      	beq.n	80027da <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d05c      	beq.n	80027da <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	441a      	add	r2, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	2100      	movs	r1, #0
 8002730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002732:	f7ff fe25 	bl	8002380 <xTimerGenericCommand>
 8002736:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d14d      	bne.n	80027da <prvProcessReceivedCommands+0x162>
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61bb      	str	r3, [r7, #24]
 8002750:	e7fe      	b.n	8002750 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	b2da      	uxtb	r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002764:	e039      	b.n	80027da <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <prvProcessReceivedCommands+0x122>
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e7fe      	b.n	8002798 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	18d1      	adds	r1, r2, r3
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a8:	f7ff ff24 	bl	80025f4 <prvInsertTimerInActiveList>
					break;
 80027ac:	e015      	b.n	80027da <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d103      	bne.n	80027c4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fe faa3 	bl	8000d08 <vPortFree>
 80027c2:	e00a      	b.n	80027da <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027d6:	e000      	b.n	80027da <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80027d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <prvProcessReceivedCommands+0x184>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f107 0108 	add.w	r1, r7, #8
 80027e2:	2200      	movs	r2, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fcef 	bl	80011c8 <xQueueReceive>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f47f af47 	bne.w	8002680 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200001bc 	.word	0x200001bc

08002800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002806:	e047      	b.n	8002898 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3304      	adds	r3, #4
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f85f 	bl	80008e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	6938      	ldr	r0, [r7, #16]
 800282c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d02d      	beq.n	8002898 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4413      	add	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	429a      	cmp	r2, r3
 800284c:	d90e      	bls.n	800286c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4610      	mov	r0, r2
 8002866:	f7fe f805 	bl	8000874 <vListInsert>
 800286a:	e015      	b.n	8002898 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800286c:	2300      	movs	r3, #0
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	2100      	movs	r1, #0
 8002876:	6938      	ldr	r0, [r7, #16]
 8002878:	f7ff fd82 	bl	8002380 <xTimerGenericCommand>
 800287c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <prvSwitchTimerLists+0x98>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	e7fe      	b.n	8002896 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1b2      	bne.n	8002808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <prvSwitchTimerLists+0xc4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <prvSwitchTimerLists+0xc0>)
 80028ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <prvSwitchTimerLists+0xc4>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200001b4 	.word	0x200001b4
 80028c4:	200001b8 	.word	0x200001b8

080028c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028cc:	f7fe f91c 	bl	8000b08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <prvCheckForValidListAndQueue+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <prvCheckForValidListAndQueue+0x44>)
 80028da:	f7fd ff7d 	bl	80007d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028de:	480c      	ldr	r0, [pc, #48]	; (8002910 <prvCheckForValidListAndQueue+0x48>)
 80028e0:	f7fd ff7a 	bl	80007d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <prvCheckForValidListAndQueue+0x4c>)
 80028e6:	4a09      	ldr	r2, [pc, #36]	; (800290c <prvCheckForValidListAndQueue+0x44>)
 80028e8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <prvCheckForValidListAndQueue+0x50>)
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <prvCheckForValidListAndQueue+0x48>)
 80028ee:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028f0:	2200      	movs	r2, #0
 80028f2:	210c      	movs	r1, #12
 80028f4:	2005      	movs	r0, #5
 80028f6:	f7fe fa81 	bl	8000dfc <xQueueGenericCreate>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b02      	ldr	r3, [pc, #8]	; (8002908 <prvCheckForValidListAndQueue+0x40>)
 80028fe:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002900:	f7fe f930 	bl	8000b64 <vPortExitCritical>
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	200001bc 	.word	0x200001bc
 800290c:	2000018c 	.word	0x2000018c
 8002910:	200001a0 	.word	0x200001a0
 8002914:	200001b4 	.word	0x200001b4
 8002918:	200001b8 	.word	0x200001b8

0800291c <_ZN4packC1Ev>:

void ARadioTask (void* pvParameters);
void ARadioTaskS (void* pvParameters);

// Rf settings for CC1101
 struct pack
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	220a      	movs	r2, #10
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <_Z8aIAQCorePv>:

#include "i2c_sensor.h"


void aIAQCore(void *parameter)
{
 8002936:	b590      	push	{r4, r7, lr}
 8002938:	b08b      	sub	sp, #44	; 0x2c
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]

	iaq_core* iaq = new iaq_core();
 800293e:	2018      	movs	r0, #24
 8002940:	f000 ffd0 	bl	80038e4 <_Znwj>
 8002944:	4603      	mov	r3, r0
 8002946:	461c      	mov	r4, r3
 8002948:	4620      	mov	r0, r4
 800294a:	f000 f844 	bl	80029d6 <_ZN8iaq_coreC1Ev>
 800294e:	627c      	str	r4, [r7, #36]	; 0x24
	ens210_class* ens210 = new ens210_class();
 8002950:	2014      	movs	r0, #20
 8002952:	f000 ffc7 	bl	80038e4 <_Znwj>
 8002956:	4603      	mov	r3, r0
 8002958:	461c      	mov	r4, r3
 800295a:	4620      	mov	r0, r4
 800295c:	f000 f8a2 	bl	8002aa4 <_ZN12ens210_classC1Ev>
 8002960:	623c      	str	r4, [r7, #32]
	air_condition air;
	QueueHandle_t comQueue= (QueueHandle_t) parameter;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60fb      	str	r3, [r7, #12]
	vTaskDelay(100/ portTICK_PERIOD_MS);
 8002966:	2064      	movs	r0, #100	; 0x64
 8002968:	f7fe ffa2 	bl	80018b0 <vTaskDelay>
	//iaq->i2c_init();
	ens210->i2c_init();
 800296c:	6a38      	ldr	r0, [r7, #32]
 800296e:	f000 f8a9 	bl	8002ac4 <_ZN12ens210_class8i2c_initEv>
	ens210->sens_init();
 8002972:	6a38      	ldr	r0, [r7, #32]
 8002974:	f000 fa92 	bl	8002e9c <_ZN12ens210_class9sens_initEv>
	while (1)
	{
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 8002978:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800297c:	f7fe ff98 	bl	80018b0 <vTaskDelay>
			//iaq->hookRecievePack();
			ens210->appHook();
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f000 fab5 	bl	8002ef0 <_ZN12ens210_class7appHookEv>
			air.CO2=iaq->getCO2();
 8002986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002988:	f000 f876 	bl	8002a78 <_ZN8iaq_core6getCO2Ev>
 800298c:	4603      	mov	r3, r0
 800298e:	613b      	str	r3, [r7, #16]
			air.TVOC=iaq->getTVOC();
 8002990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002992:	f000 f87c 	bl	8002a8e <_ZN8iaq_core7getTVOCEv>
 8002996:	4603      	mov	r3, r0
 8002998:	617b      	str	r3, [r7, #20]
			air.temp=ens210->getTemp();
 800299a:	6a38      	ldr	r0, [r7, #32]
 800299c:	f000 faec 	bl	8002f78 <_ZN12ens210_class7getTempEv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	61bb      	str	r3, [r7, #24]
			air.humidity=ens210->getHumidity();
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f000 faf5 	bl	8002f94 <_ZN12ens210_class11getHumidityEv>
 80029aa:	4603      	mov	r3, r0
 80029ac:	61fb      	str	r3, [r7, #28]
			//ens210->readI2C(0x00);
			//ens210->readI2C(UID);
			if (uxQueueSpacesAvailable(comQueue))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fce5 	bl	8001380 <uxQueueSpacesAvailable>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0d8      	beq.n	8002978 <_Z8aIAQCorePv+0x42>
			{
				xQueueSend(comQueue, &air , 1);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f107 0110 	add.w	r1, r7, #16
 80029cc:	2300      	movs	r3, #0
 80029ce:	2201      	movs	r2, #1
 80029d0:	f7fe fa68 	bl	8000ea4 <xQueueGenericSend>
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 80029d4:	e7d0      	b.n	8002978 <_Z8aIAQCorePv+0x42>

080029d6 <_ZN8iaq_coreC1Ev>:



}

iaq_core::iaq_core()
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	22b5      	movs	r2, #181	; 0xb5
 80029e2:	725a      	strb	r2, [r3, #9]
{
	i2c_init();
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f807 	bl	80029f8 <_ZN8iaq_core8i2c_initEv>
	return;
 80029ea:	bf00      	nop
}
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <_ZN8iaq_core8i2c_initEv>:


void iaq_core::i2c_init(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <_ZN8iaq_core8i2c_initEv+0x74>)
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <_ZN8iaq_core8i2c_initEv+0x74>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <_ZN8iaq_core8i2c_initEv+0x74>)
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <_ZN8iaq_core8i2c_initEv+0x74>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a16:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a1e:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a28:	221c      	movs	r2, #28
 8002a2a:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a2e:	228c      	movs	r2, #140	; 0x8c
 8002a30:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a34:	221d      	movs	r2, #29
 8002a36:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <_ZN8iaq_core8i2c_initEv+0x78>)
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a52:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40005400 	.word	0x40005400
 8002a74:	40010c00 	.word	0x40010c00

08002a78 <_ZN8iaq_core6getCO2Ev>:
	return 1;

}

uint32_t iaq_core::getCO2(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	return sVal.co2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <_ZN8iaq_core7getTVOCEv>:

uint32_t iaq_core::getTVOC(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	return sVal.tvoc;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN12ens210_classC1Ev>:

ens210_class::ens210_class(void)
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2286      	movs	r2, #134	; 0x86
 8002ab0:	721a      	strb	r2, [r3, #8]
{
	i2c_init();
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f806 	bl	8002ac4 <_ZN12ens210_class8i2c_initEv>
	return;
 8002ab8:	bf00      	nop
}
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_ZN12ens210_class8i2c_initEv>:

void ens210_class::i2c_init(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8002acc:	4a1a      	ldr	r2, [pc, #104]	; (8002b38 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f043 0308 	orr.w	r3, r3, #8
 8002ad6:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae2:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aea:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002af4:	221c      	movs	r2, #28
 8002af6:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002afa:	228c      	movs	r2, #140	; 0x8c
 8002afc:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002b00:	221d      	movs	r2, #29
 8002b02:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <_ZN12ens210_class8i2c_initEv+0x78>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b1e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40005400 	.word	0x40005400
 8002b40:	40010c00 	.word	0x40010c00

08002b44 <_ZN12ens210_class7readI2CEhh>:

uint32_t ens210_class::readI2C(uint8_t saddr, uint8_t len)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
 8002b50:	4613      	mov	r3, r2
 8002b52:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
	if (len<0 || len > 10)  return 0;
 8002b58:	78bb      	ldrb	r3, [r7, #2]
 8002b5a:	2b0a      	cmp	r3, #10
 8002b5c:	dd01      	ble.n	8002b62 <_ZN12ens210_class7readI2CEhh+0x1e>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e0dd      	b.n	8002d1e <_ZN12ens210_class7readI2CEhh+0x1da>
	if ((I2C1->SR1 & 0xf0) != 0)
 8002b62:	4b71      	ldr	r3, [pc, #452]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002b64:	8a9b      	ldrh	r3, [r3, #20]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <_ZN12ens210_class7readI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8002b7a:	4b6b      	ldr	r3, [pc, #428]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b80:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff9e 	bl	8002ac4 <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8002b88:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002b8a:	8b1b      	ldrh	r3, [r3, #24]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d014      	beq.n	8002bca <_ZN12ens210_class7readI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8002ba0:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002ba2:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8002bb0:	4b5d      	ldr	r3, [pc, #372]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bb2:	8b1b      	ldrh	r3, [r3, #24]
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2300      	movne	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d000      	beq.n	8002bca <_ZN12ens210_class7readI2CEhh+0x86>
 8002bc8:	e7f2      	b.n	8002bb0 <_ZN12ens210_class7readI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8002bca:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bcc:	4b56      	ldr	r3, [pc, #344]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8002bda:	4a53      	ldr	r2, [pc, #332]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bdc:	4b52      	ldr	r3, [pc, #328]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002bea:	4b4f      	ldr	r3, [pc, #316]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002bec:	8a9b      	ldrh	r3, [r3, #20]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d000      	beq.n	8002c04 <_ZN12ens210_class7readI2CEhh+0xc0>
 8002c02:	e7f2      	b.n	8002bea <_ZN12ens210_class7readI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address to read
 8002c04:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7a1b      	ldrb	r3, [r3, #8]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c10:	8a9b      	ldrh	r3, [r3, #20]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d000      	beq.n	8002c28 <_ZN12ens210_class7readI2CEhh+0xe4>
 8002c26:	e7f2      	b.n	8002c0e <_ZN12ens210_class7readI2CEhh+0xca>
	if (I2C1->SR2);
 8002c28:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c2a:	8b1b      	ldrh	r3, [r3, #24]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	b292      	uxth	r2, r2
 8002c36:	821a      	strh	r2, [r3, #16]
	//I2C1->CR1|=I2C_CR1_STOP;
	while (!(I2C1->SR1 & I2C_SR1_BTF)); //?
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c3a:	8a9b      	ldrh	r3, [r3, #20]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d000      	beq.n	8002c52 <_ZN12ens210_class7readI2CEhh+0x10e>
 8002c50:	e7f2      	b.n	8002c38 <_ZN12ens210_class7readI2CEhh+0xf4>
	I2C1->CR1|=I2C_CR1_START;
 8002c52:	4a35      	ldr	r2, [pc, #212]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c64:	8a9b      	ldrh	r3, [r3, #20]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d000      	beq.n	8002c7c <_ZN12ens210_class7readI2CEhh+0x138>
 8002c7a:	e7f2      	b.n	8002c62 <_ZN12ens210_class7readI2CEhh+0x11e>
	I2C1->DR=this->addr|0x01; // address  read mode
 8002c7c:	4a2a      	ldr	r2, [pc, #168]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7a1b      	ldrb	r3, [r3, #8]
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002c8e:	8a9b      	ldrh	r3, [r3, #20]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d000      	beq.n	8002ca6 <_ZN12ens210_class7readI2CEhh+0x162>
 8002ca4:	e7f2      	b.n	8002c8c <_ZN12ens210_class7readI2CEhh+0x148>
	if (I2C1->SR2);
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002ca8:	8b1b      	ldrh	r3, [r3, #24]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
	while (c < len)
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	78bb      	ldrb	r3, [r7, #2]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	da32      	bge.n	8002d1c <_ZN12ens210_class7readI2CEhh+0x1d8>
	{
		if (c==(len-1))I2C1->CR1&=~I2C_CR1_ACK;
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	78bb      	ldrb	r3, [r7, #2]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d107      	bne.n	8002cd0 <_ZN12ens210_class7readI2CEhh+0x18c>
 8002cc0:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002cc2:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR1&I2C_SR1_RXNE));
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002cd2:	8a9b      	ldrh	r3, [r3, #20]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d000      	beq.n	8002cea <_ZN12ens210_class7readI2CEhh+0x1a6>
 8002ce8:	e7f2      	b.n	8002cd0 <_ZN12ens210_class7readI2CEhh+0x18c>

		this->buffer[c]=I2C1->DR;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002cee:	8a12      	ldrh	r2, [r2, #16]
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	b2d1      	uxtb	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	725a      	strb	r2, [r3, #9]
		c++;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	78bb      	ldrb	r3, [r7, #2]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d1d1      	bne.n	8002cae <_ZN12ens210_class7readI2CEhh+0x16a>
		{
			I2C1->CR1|=I2C_CR1_STOP;
 8002d0a:	4a07      	ldr	r2, [pc, #28]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8002d1a:	e7c8      	b.n	8002cae <_ZN12ens210_class7readI2CEhh+0x16a>
		}


	};
	return 1;
 8002d1c:	2301      	movs	r3, #1
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40005400 	.word	0x40005400

08002d2c <_ZN12ens210_class8writeI2CEhh>:

uint32_t ens210_class::writeI2C(uint8_t saddr, uint8_t len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]
	if ( (len<0 || len > 10) )  return 0;
 8002d40:	78bb      	ldrb	r3, [r7, #2]
 8002d42:	2b0a      	cmp	r3, #10
 8002d44:	dd01      	ble.n	8002d4a <_ZN12ens210_class8writeI2CEhh+0x1e>
 8002d46:	2300      	movs	r3, #0
 8002d48:	e0a1      	b.n	8002e8e <_ZN12ens210_class8writeI2CEhh+0x162>
	if ((I2C1->SR1 & 0xf0) != 0)
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d4c:	8a9b      	ldrh	r3, [r3, #20]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d006      	beq.n	8002d70 <_ZN12ens210_class8writeI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002d68:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff feaa 	bl	8002ac4 <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8002d70:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d72:	8b1b      	ldrh	r3, [r3, #24]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d014      	beq.n	8002db2 <_ZN12ens210_class8writeI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8002d88:	4a43      	ldr	r2, [pc, #268]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d8a:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002d9a:	8b1b      	ldrh	r3, [r3, #24]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf0c      	ite	eq
 8002da6:	2301      	moveq	r3, #1
 8002da8:	2300      	movne	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d000      	beq.n	8002db2 <_ZN12ens210_class8writeI2CEhh+0x86>
 8002db0:	e7f2      	b.n	8002d98 <_ZN12ens210_class8writeI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8002db2:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002db4:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8002dc2:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002dc4:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002dd2:	4b31      	ldr	r3, [pc, #196]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002dd4:	8a9b      	ldrh	r3, [r3, #20]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d000      	beq.n	8002dec <_ZN12ens210_class8writeI2CEhh+0xc0>
 8002dea:	e7f2      	b.n	8002dd2 <_ZN12ens210_class8writeI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address to read
 8002dec:	4a2a      	ldr	r2, [pc, #168]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7a1b      	ldrb	r3, [r3, #8]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002df6:	4b28      	ldr	r3, [pc, #160]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002df8:	8a9b      	ldrh	r3, [r3, #20]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d000      	beq.n	8002e10 <_ZN12ens210_class8writeI2CEhh+0xe4>
 8002e0e:	e7f2      	b.n	8002df6 <_ZN12ens210_class8writeI2CEhh+0xca>
	if (I2C1->SR2);
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e12:	8b1b      	ldrh	r3, [r3, #24]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 8002e18:	4b1f      	ldr	r3, [pc, #124]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e22:	8a9b      	ldrh	r3, [r3, #20]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d000      	beq.n	8002e3a <_ZN12ens210_class8writeI2CEhh+0x10e>
 8002e38:	e7f2      	b.n	8002e20 <_ZN12ens210_class8writeI2CEhh+0xf4>
	while (c < len)
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	78bb      	ldrb	r3, [r7, #2]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	da24      	bge.n	8002e8c <_ZN12ens210_class8writeI2CEhh+0x160>
	{
		while (!(I2C1->SR1&I2C_SR1_TXE));
 8002e42:	4b15      	ldr	r3, [pc, #84]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e44:	8a9b      	ldrh	r3, [r3, #20]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d000      	beq.n	8002e5c <_ZN12ens210_class8writeI2CEhh+0x130>
 8002e5a:	e7f2      	b.n	8002e42 <_ZN12ens210_class8writeI2CEhh+0x116>
		I2C1->DR=this->buffer[c];
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	7a5b      	ldrb	r3, [r3, #9]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	820b      	strh	r3, [r1, #16]
		c++;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	78bb      	ldrb	r3, [r7, #2]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d1df      	bne.n	8002e3a <_ZN12ens210_class8writeI2CEhh+0x10e>
		{
			//I2C1->CR1&=~I2C_CR1_ACK;
			I2C1->CR1|=I2C_CR1_STOP;
 8002e7a:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8002e8a:	e7d6      	b.n	8002e3a <_ZN12ens210_class8writeI2CEhh+0x10e>
		}
	};
	return 1;
 8002e8c:	2301      	movs	r3, #1
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40005400 	.word	0x40005400

08002e9c <_ZN12ens210_class9sens_initEv>:

uint32_t ens210_class::sens_init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
	buffer[0]= 0x80;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	725a      	strb	r2, [r3, #9]
	writeI2C(SYS_CTRL);
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2110      	movs	r1, #16
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ff3c 	bl	8002d2c <_ZN12ens210_class8writeI2CEhh>
	vTaskDelay(10/ portTICK_PERIOD_MS);
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7fe fcfb 	bl	80018b0 <vTaskDelay>
	buffer[0]= 0x00;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	725a      	strb	r2, [r3, #9]
	writeI2C(SYS_CTRL);
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff31 	bl	8002d2c <_ZN12ens210_class8writeI2CEhh>
	buffer[0]= 0x03;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2203      	movs	r2, #3
 8002ece:	725a      	strb	r2, [r3, #9]
	writeI2C(SENS_RUN);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	2121      	movs	r1, #33	; 0x21
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <_ZN12ens210_class8writeI2CEhh>
	writeI2C(SENS_START);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2122      	movs	r1, #34	; 0x22
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ff24 	bl	8002d2c <_ZN12ens210_class8writeI2CEhh>
	return 1;
 8002ee4:	2301      	movs	r3, #1
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <_ZN12ens210_class7appHookEv>:

uint32_t ens210_class::appHook(void)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	//buffer[0]= 0x03;
	//writeI2C(SENS_START);
	readI2C(T_VAL, T_VAL_SIZE);
 8002ef8:	2203      	movs	r2, #3
 8002efa:	2130      	movs	r1, #48	; 0x30
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fe21 	bl	8002b44 <_ZN12ens210_class7readI2CEhh>
	temp=(( ( (uint32_t)((buffer[0]<<8) | buffer[1])) )/64)-273.15;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7a5b      	ldrb	r3, [r3, #9]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	7a92      	ldrb	r2, [r2, #10]
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	4313      	orrs	r3, r2
 8002f12:	099b      	lsrs	r3, r3, #6
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fa65 	bl	80003e4 <__aeabi_ui2d>
 8002f1a:	a315      	add	r3, pc, #84	; (adr r3, 8002f70 <_ZN12ens210_class7appHookEv+0x80>)
 8002f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f20:	f7fd f922 	bl	8000168 <__aeabi_dsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	4618      	mov	r0, r3
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	f7fd fad0 	bl	80004d0 <__aeabi_d2f>
 8002f30:	4602      	mov	r2, r0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
	readI2C(H_VAL, H_VAL_SIZE);
 8002f36:	2203      	movs	r2, #3
 8002f38:	2133      	movs	r1, #51	; 0x33
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fe02 	bl	8002b44 <_ZN12ens210_class7readI2CEhh>
	hum=(((buffer[0]<<8) | buffer[1])/512);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7a5b      	ldrb	r3, [r3, #9]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	7a92      	ldrb	r2, [r2, #10]
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	da01      	bge.n	8002f58 <_ZN12ens210_class7appHookEv+0x68>
 8002f54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f58:	125b      	asrs	r3, r3, #9
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fbc2 	bl	80006e4 <__aeabi_i2f>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	605a      	str	r2, [r3, #4]
	//readI2C(SENS_STAT);
	return 1;
 8002f66:	2301      	movs	r3, #1
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	66666666 	.word	0x66666666
 8002f74:	40711266 	.word	0x40711266

08002f78 <_ZN12ens210_class7getTempEv>:

int ens210_class::getTemp()
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	return this->temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fc01 	bl	800078c <__aeabi_f2iz>
 8002f8a:	4603      	mov	r3, r0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_ZN12ens210_class11getHumidityEv>:

int ens210_class::getHumidity()
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	return this->hum;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd fbf3 	bl	800078c <__aeabi_f2iz>
 8002fa6:	4603      	mov	r3, r0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <main>:
QueueHandle_t sQueue;



int main(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af02      	add	r7, sp, #8
	prvClockCoreInit();
 8002fb6:	f000 f875 	bl	80030a4 <_Z16prvClockCoreInitv>
	//prvCommunicationInit();
	GPIOC->CRL|= 0x4<<16;
 8002fba:	4a31      	ldr	r2, [pc, #196]	; (8003080 <main+0xd0>)
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <main+0xd0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
	RTask1.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	210d      	movs	r1, #13
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fd ff16 	bl	8000dfc <xQueueGenericCreate>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <main+0xd4>)
 8002fd4:	611a      	str	r2, [r3, #16]
	RTask1.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	210d      	movs	r1, #13
 8002fda:	2001      	movs	r0, #1
 8002fdc:	f7fd ff0e 	bl	8000dfc <xQueueGenericCreate>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <main+0xd4>)
 8002fe4:	615a      	str	r2, [r3, #20]
	RTask2.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	210d      	movs	r1, #13
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7fd ff06 	bl	8000dfc <xQueueGenericCreate>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <main+0xd8>)
 8002ff4:	611a      	str	r2, [r3, #16]
	RTask2.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	210d      	movs	r1, #13
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7fd fefe 	bl	8000dfc <xQueueGenericCreate>
 8003000:	4602      	mov	r2, r0
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <main+0xd8>)
 8003004:	615a      	str	r2, [r3, #20]
	pQComm.a1RX=RTask1.xCommRX;
 8003006:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <main+0xd4>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	4a20      	ldr	r2, [pc, #128]	; (800308c <main+0xdc>)
 800300c:	6053      	str	r3, [r2, #4]
	pQComm.a1TX = RTask1.xCommTX;
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <main+0xd4>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4a1e      	ldr	r2, [pc, #120]	; (800308c <main+0xdc>)
 8003014:	6013      	str	r3, [r2, #0]
	pQComm.a2RX = RTask2.xCommRX;
 8003016:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <main+0xd8>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <main+0xdc>)
 800301c:	60d3      	str	r3, [r2, #12]
	pQComm.a2TX = RTask2.xCommTX;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <main+0xd8>)
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	4a1a      	ldr	r2, [pc, #104]	; (800308c <main+0xdc>)
 8003024:	6093      	str	r3, [r2, #8]
	pQComm.qSensor= xQueueCreate(3, sizeof(air_condition));
 8003026:	2200      	movs	r2, #0
 8003028:	2110      	movs	r1, #16
 800302a:	2003      	movs	r0, #3
 800302c:	f7fd fee6 	bl	8000dfc <xQueueGenericCreate>
 8003030:	4602      	mov	r2, r0
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <main+0xdc>)
 8003034:	611a      	str	r2, [r3, #16]

//xTaskCreate(ATaskCanBus, "CAN Task",  100, NULL, tskIDLE_PRIORITY,  NULL);
	//xTaskCreate(ARadioTask, "RF Task1",  500,(void*) &RTask1 ,2,  NULL);
	//xTaskCreate(ARadioTaskS, "RF Task2",  500,(void*) &RTask2 ,2,  NULL);
	//delete RTask1;
	xTaskCreate(aIAQCore, "TaskSensor",  100, (void*)pQComm.qSensor, 2,  NULL);
 8003036:	4b15      	ldr	r3, [pc, #84]	; (800308c <main+0xdc>)
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	2300      	movs	r3, #0
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2302      	movs	r3, #2
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	2264      	movs	r2, #100	; 0x64
 8003046:	4912      	ldr	r1, [pc, #72]	; (8003090 <main+0xe0>)
 8003048:	4812      	ldr	r0, [pc, #72]	; (8003094 <main+0xe4>)
 800304a:	f7fe faff 	bl	800164c <xTaskCreate>
	xTaskCreate(run1Task, "Run2 Task",  100, NULL,2,  NULL);
 800304e:	2300      	movs	r3, #0
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	2264      	movs	r2, #100	; 0x64
 800305a:	490f      	ldr	r1, [pc, #60]	; (8003098 <main+0xe8>)
 800305c:	480f      	ldr	r0, [pc, #60]	; (800309c <main+0xec>)
 800305e:	f7fe faf5 	bl	800164c <xTaskCreate>
	xTaskCreate(aTaskUart, "Run2 Task",  300, &pQComm, 2,  NULL);
 8003062:	2300      	movs	r3, #0
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <main+0xdc>)
 800306c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003070:	4909      	ldr	r1, [pc, #36]	; (8003098 <main+0xe8>)
 8003072:	480b      	ldr	r0, [pc, #44]	; (80030a0 <main+0xf0>)
 8003074:	f7fe faea 	bl	800164c <xTaskCreate>
	vTaskStartScheduler();
 8003078:	f7fe fc4e 	bl	8001918 <vTaskStartScheduler>

  while (1)
 800307c:	e7fe      	b.n	800307c <main+0xcc>
 800307e:	bf00      	nop
 8003080:	40011000 	.word	0x40011000
 8003084:	20000004 	.word	0x20000004
 8003088:	20000020 	.word	0x20000020
 800308c:	200001c8 	.word	0x200001c8
 8003090:	08003ce4 	.word	0x08003ce4
 8003094:	08002937 	.word	0x08002937
 8003098:	08003cf0 	.word	0x08003cf0
 800309c:	08003159 	.word	0x08003159
 80030a0:	08003389 	.word	0x08003389

080030a4 <_Z16prvClockCoreInitv>:



//core  clock init function, this a critical function
void prvClockCoreInit (void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_2;// flash latency delay 2t
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <_Z16prvClockCoreInitv+0xac>)
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <_Z16prvClockCoreInitv+0xac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE;// Perfech enable
 80030b4:	4a26      	ldr	r2, [pc, #152]	; (8003150 <_Z16prvClockCoreInitv+0xac>)
 80030b6:	4b26      	ldr	r3, [pc, #152]	; (8003150 <_Z16prvClockCoreInitv+0xac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f043 0310 	orr.w	r3, r3, #16
 80030be:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0xC<<18);// set mul x14
 80030c0:	4a24      	ldr	r2, [pc, #144]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80030ca:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=~0x00010000; // set pll clk hsi div 2
 80030cc:	4a21      	ldr	r2, [pc, #132]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=0xfffffffc;
 80030d8:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030da:	4b1e      	ldr	r3, [pc, #120]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=0x2;// use pll1 from clock
 80030e4:	4a1b      	ldr	r2, [pc, #108]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f043 0302 	orr.w	r3, r3, #2
 80030ee:	6053      	str	r3, [r2, #4]
	RCC->CR|=0x1000000;// enable pll
 80030f0:	4a18      	ldr	r2, [pc, #96]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030f2:	4b18      	ldr	r3, [pc, #96]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0<<13); //APB2 no div
 80030fc:	4a15      	ldr	r2, [pc, #84]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(4<<10);  // APB1 /2 28  MHz
 8003104:	4a13      	ldr	r2, [pc, #76]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800310e:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(0<<7); // AHB no div
 8003110:	4a10      	ldr	r2, [pc, #64]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	6053      	str	r3, [r2, #4]
	while(!(RCC->CR & RCC_CR_PLLRDY));// wait stabilize pll
 8003118:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <_Z16prvClockCoreInitv+0x8c>
 800312e:	e7f3      	b.n	8003118 <_Z16prvClockCoreInitv+0x74>
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));//56 Mhz
 8003130:	4b08      	ldr	r3, [pc, #32]	; (8003154 <_Z16prvClockCoreInitv+0xb0>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <_Z16prvClockCoreInitv+0xa4>
 8003146:	e7f3      	b.n	8003130 <_Z16prvClockCoreInitv+0x8c>
	/*RCC->APB1ENR=RCC_APB1ENR_CAN1EN;
		RCC->APB2ENR=RCC_APB2ENR_TIM1EN|RCC_APB2ENR_USART1EN;
		RCC->APB2ENR=RCC_APB2ENR_AFIOEN|RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN|RCC_APB2ENR_IOPCEN|
		RCC_APB2ENR_TIM1EN|RCC_APB2ENR_ADC1EN;// enable clk pereph here
		*/
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000

08003158 <_Z8run1TaskPv>:
	SPI1->CR1|=SPI_CR1_SPE;*/

}

void run1Task(void *pvParameters)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	int x,y;
	for(;;)
	{
		x++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
		y=x+y;
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	60bb      	str	r3, [r7, #8]
		if (x>1000000) x=0;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a05      	ldr	r2, [pc, #20]	; (8003188 <_Z8run1TaskPv+0x30>)
 8003172:	4293      	cmp	r3, r2
 8003174:	dd01      	ble.n	800317a <_Z8run1TaskPv+0x22>
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
		if (y>999999)y=0;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4a03      	ldr	r2, [pc, #12]	; (800318c <_Z8run1TaskPv+0x34>)
 800317e:	4293      	cmp	r3, r2
 8003180:	ddee      	ble.n	8003160 <_Z8run1TaskPv+0x8>
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
		x++;
 8003186:	e7eb      	b.n	8003160 <_Z8run1TaskPv+0x8>
 8003188:	000f4240 	.word	0x000f4240
 800318c:	000f423f 	.word	0x000f423f

08003190 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003190:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003194:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003196:	e003      	b.n	80031a0 <LoopCopyDataInit>

08003198 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800319a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800319c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800319e:	3104      	adds	r1, #4

080031a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031a0:	480b      	ldr	r0, [pc, #44]	; (80031d0 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80031a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031a8:	d3f6      	bcc.n	8003198 <CopyDataInit>
	ldr	r2, =_sbss
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80031ac:	e002      	b.n	80031b4 <LoopFillZerobss>

080031ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031b0:	f842 3b04 	str.w	r3, [r2], #4

080031b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80031b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031b8:	d3f9      	bcc.n	80031ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031ba:	f000 f82b 	bl	8003214 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031be:	f000 fbb3 	bl	8003928 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031c2:	f7ff fef5 	bl	8002fb0 <main>
	bx	lr
 80031c6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031c8:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80031cc:	08003d6c 	.word	0x08003d6c
	ldr	r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031d4:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 80031d8:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 80031dc:	20000258 	.word	0x20000258

080031e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031e0:	e7fe      	b.n	80031e0 <ADC1_2_IRQHandler>

080031e2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <HardFault_Handler+0x4>

080031f4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <MemManage_Handler+0x4>

080031fa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <BusFault_Handler+0x4>

08003200 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003204:	e7fe      	b.n	8003204 <UsageFault_Handler+0x4>

08003206 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
	...

08003214 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <SystemInit+0x5c>)
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <SystemInit+0x5c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003224:	4912      	ldr	r1, [pc, #72]	; (8003270 <SystemInit+0x5c>)
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <SystemInit+0x5c>)
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <SystemInit+0x60>)
 800322c:	4013      	ands	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003230:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <SystemInit+0x5c>)
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <SystemInit+0x5c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003240:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <SystemInit+0x5c>)
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <SystemInit+0x5c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <SystemInit+0x5c>)
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <SystemInit+0x5c>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003256:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <SystemInit+0x5c>)
 800325a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800325e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003260:	f000 f80c 	bl	800327c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <SystemInit+0x64>)
 8003266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800326a:	609a      	str	r2, [r3, #8]
#endif 
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40021000 	.word	0x40021000
 8003274:	f8ff0000 	.word	0xf8ff0000
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_36MHz
  SetSysClockTo36();
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
 8003280:	f000 f802 	bl	8003288 <SetSysClockTo56>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}

08003288 <SetSysClockTo56>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo56(void)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	2300      	movs	r3, #0
 8003294:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003296:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <SetSysClockTo56+0xf8>)
 8003298:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SetSysClockTo56+0xf8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032a2:	4b37      	ldr	r3, [pc, #220]	; (8003380 <SetSysClockTo56+0xf8>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3301      	adds	r3, #1
 80032b0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <SetSysClockTo56+0x38>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032be:	d1f0      	bne.n	80032a2 <SetSysClockTo56+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80032c0:	4b2f      	ldr	r3, [pc, #188]	; (8003380 <SetSysClockTo56+0xf8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <SetSysClockTo56+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80032cc:	2301      	movs	r3, #1
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	e001      	b.n	80032d6 <SetSysClockTo56+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d14b      	bne.n	8003374 <SetSysClockTo56+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80032dc:	4a29      	ldr	r2, [pc, #164]	; (8003384 <SetSysClockTo56+0xfc>)
 80032de:	4b29      	ldr	r3, [pc, #164]	; (8003384 <SetSysClockTo56+0xfc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f043 0310 	orr.w	r3, r3, #16
 80032e6:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <SetSysClockTo56+0xfc>)
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <SetSysClockTo56+0xfc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <SetSysClockTo56+0xfc>)
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <SetSysClockTo56+0xfc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	6013      	str	r3, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <SetSysClockTo56+0xf8>)
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <SetSysClockTo56+0xf8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <SetSysClockTo56+0xf8>)
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <SetSysClockTo56+0xf8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <SetSysClockTo56+0xf8>)
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <SetSysClockTo56+0xf8>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL7); 
#else     
    /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <SetSysClockTo56+0xf8>)
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <SetSysClockTo56+0xf8>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003326:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <SetSysClockTo56+0xf8>)
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <SetSysClockTo56+0xf8>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8003332:	6053      	str	r3, [r2, #4]

#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <SetSysClockTo56+0xf8>)
 8003336:	4b12      	ldr	r3, [pc, #72]	; (8003380 <SetSysClockTo56+0xf8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003340:	bf00      	nop
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <SetSysClockTo56+0xf8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f9      	beq.n	8003342 <SetSysClockTo56+0xba>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <SetSysClockTo56+0xf8>)
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <SetSysClockTo56+0xf8>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 0303 	bic.w	r3, r3, #3
 8003358:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <SetSysClockTo56+0xf8>)
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <SetSysClockTo56+0xf8>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003366:	bf00      	nop
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SetSysClockTo56+0xf8>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d1f9      	bne.n	8003368 <SetSysClockTo56+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	40022000 	.word	0x40022000

08003388 <_Z9aTaskUartPv>:
char bufTx[50];
char bufTmp[50];

char* rawtohex(void* data, uint32_t count,  char * str);
void aTaskUart(void * pvParameters)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b090      	sub	sp, #64	; 0x40
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

	pQueueComm* pQComm = (pQueueComm*)pvParameters;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
	//preset ports
	pack rx;
 8003394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fabf 	bl	800291c <_ZN4packC1Ev>
	pack tx;
 800339e:	f107 031c 	add.w	r3, r7, #28
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff faba 	bl	800291c <_ZN4packC1Ev>
	air_condition airData;

	RCC->APB2ENR|= RCC_APB2ENR_IOPAEN;
 80033a8:	4a5b      	ldr	r2, [pc, #364]	; (8003518 <_Z9aTaskUartPv+0x190>)
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <_Z9aTaskUartPv+0x190>)
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN;
 80033b4:	4a58      	ldr	r2, [pc, #352]	; (8003518 <_Z9aTaskUartPv+0x190>)
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <_Z9aTaskUartPv+0x190>)
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033be:	6193      	str	r3, [r2, #24]
	USART1->CR1=0;
 80033c0:	4b56      	ldr	r3, [pc, #344]	; (800351c <_Z9aTaskUartPv+0x194>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	819a      	strh	r2, [r3, #12]
	GPIOA->CRH&=~(0x00ff<<4);
 80033c6:	4a56      	ldr	r2, [pc, #344]	; (8003520 <_Z9aTaskUartPv+0x198>)
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <_Z9aTaskUartPv+0x198>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80033d0:	6053      	str	r3, [r2, #4]
	GPIOA->CRH|=0x0089<<4;
 80033d2:	4a53      	ldr	r2, [pc, #332]	; (8003520 <_Z9aTaskUartPv+0x198>)
 80033d4:	4b52      	ldr	r3, [pc, #328]	; (8003520 <_Z9aTaskUartPv+0x198>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f443 6309 	orr.w	r3, r3, #2192	; 0x890
 80033dc:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR=1<<10;
 80033de:	4b50      	ldr	r3, [pc, #320]	; (8003520 <_Z9aTaskUartPv+0x198>)
 80033e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e4:	611a      	str	r2, [r3, #16]
	USART1->BRR=((0x1e<<4)|4);//115200
 80033e6:	4b4d      	ldr	r3, [pc, #308]	; (800351c <_Z9aTaskUartPv+0x194>)
 80033e8:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80033ec:	811a      	strh	r2, [r3, #8]
	USART1->CR1=USART_CR1_RE | USART_CR1_TE;
 80033ee:	4b4b      	ldr	r3, [pc, #300]	; (800351c <_Z9aTaskUartPv+0x194>)
 80033f0:	220c      	movs	r2, #12
 80033f2:	819a      	strh	r2, [r3, #12]
	USART1->CR1|= USART_CR1_UE;
 80033f4:	4a49      	ldr	r2, [pc, #292]	; (800351c <_Z9aTaskUartPv+0x194>)
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <_Z9aTaskUartPv+0x194>)
 80033f8:	899b      	ldrh	r3, [r3, #12]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003400:	b29b      	uxth	r3, r3
 8003402:	8193      	strh	r3, [r2, #12]
	tx.addrdst=87;
 8003404:	2357      	movs	r3, #87	; 0x57
 8003406:	777b      	strb	r3, [r7, #29]
	tx.bLeng=10;
 8003408:	230a      	movs	r3, #10
 800340a:	773b      	strb	r3, [r7, #28]
	tx.addrsrc=255;
 800340c:	23ff      	movs	r3, #255	; 0xff
 800340e:	77bb      	strb	r3, [r7, #30]
	tx.crc8d=255;
 8003410:	23ff      	movs	r3, #255	; 0xff
 8003412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	tx.data[0]=127;
 8003416:	237f      	movs	r3, #127	; 0x7f
 8003418:	77fb      	strb	r3, [r7, #31]
	tx.data[1]=255;
 800341a:	23ff      	movs	r3, #255	; 0xff
 800341c:	f887 3020 	strb.w	r3, [r7, #32]
	tx.data[2]=127;
 8003420:	237f      	movs	r3, #127	; 0x7f
 8003422:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx.data[3]=255;
 8003426:	23ff      	movs	r3, #255	; 0xff
 8003428:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	tx.data[4]=255;
 800342c:	23ff      	movs	r3, #255	; 0xff
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tx.data[5]=255;
 8003432:	23ff      	movs	r3, #255	; 0xff
 8003434:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tx.rssi=255;
 8003438:	23ff      	movs	r3, #255	; 0xff
 800343a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bufTx[0]=0;
 800343e:	4b39      	ldr	r3, [pc, #228]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
	//USART1->CR1|= USART_CR1_SBK;
	//vTaskDelay(1000 / portTICK_PERIOD_MS);
	if(uxQueueSpacesAvailable(pQComm->a1TX))
 8003444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd ff99 	bl	8001380 <uxQueueSpacesAvailable>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <_Z9aTaskUartPv+0xf2>
				{
					tx.addrdst=88;
 800345e:	2358      	movs	r3, #88	; 0x58
 8003460:	777b      	strb	r3, [r7, #29]
					tx.rssi=rx.rssi_r;
 8003462:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					xQueueSend(pQComm->a1TX,&tx,0);
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	f107 011c 	add.w	r1, r7, #28
 8003472:	2300      	movs	r3, #0
 8003474:	2200      	movs	r2, #0
 8003476:	f7fd fd15 	bl	8000ea4 <xQueueGenericSend>
		/*strcpy(bufTx, "Hello\n");
		printUart(bufTx);
		vTaskDelay(1000 / portTICK_PERIOD_MS);
*/

		if(xQueueReceive( pQComm->a1RX, &rx,0)==pdPASS)
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003482:	2200      	movs	r2, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fe9f 	bl	80011c8 <xQueueReceive>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d04c      	beq.n	8003534 <_Z9aTaskUartPv+0x1ac>
		{
			//xQueueReceive( pQComm->a1RX, &rx,0);
			strcpy(bufTx, "APP1 data:\0");
 800349a:	4b22      	ldr	r3, [pc, #136]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <_Z9aTaskUartPv+0x1a0>)
 800349e:	ca07      	ldmia	r2, {r0, r1, r2}
 80034a0:	c303      	stmia	r3!, {r0, r1}
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	3302      	adds	r3, #2
 80034a6:	0c12      	lsrs	r2, r2, #16
 80034a8:	701a      	strb	r2, [r3, #0]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 80034aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <_Z9aTaskUartPv+0x1a4>)
 80034b0:	210d      	movs	r1, #13
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f992 	bl	80037dc <_Z8rawtohexPvmPc>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4819      	ldr	r0, [pc, #100]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 80034be:	f000 fb8b 	bl	8003bd8 <strcat>
			strcat(bufTx, "\n");
 80034c2:	4818      	ldr	r0, [pc, #96]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 80034c4:	f7fc fe44 	bl	8000150 <strlen>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 80034ce:	4413      	add	r3, r2
 80034d0:	4917      	ldr	r1, [pc, #92]	; (8003530 <_Z9aTaskUartPv+0x1a8>)
 80034d2:	461a      	mov	r2, r3
 80034d4:	460b      	mov	r3, r1
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80034da:	4812      	ldr	r0, [pc, #72]	; (8003524 <_Z9aTaskUartPv+0x19c>)
 80034dc:	f000 f944 	bl	8003768 <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a1TX))
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd ff4b 	bl	8001380 <uxQueueSpacesAvailable>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d073      	beq.n	80035e2 <_Z9aTaskUartPv+0x25a>
			{
				tx.addrdst=88;
 80034fa:	2358      	movs	r3, #88	; 0x58
 80034fc:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 80034fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003502:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a1TX,&tx,0);
 8003506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f107 011c 	add.w	r1, r7, #28
 800350e:	2300      	movs	r3, #0
 8003510:	2200      	movs	r2, #0
 8003512:	f7fd fcc7 	bl	8000ea4 <xQueueGenericSend>
 8003516:	e064      	b.n	80035e2 <_Z9aTaskUartPv+0x25a>
 8003518:	40021000 	.word	0x40021000
 800351c:	40013800 	.word	0x40013800
 8003520:	40010800 	.word	0x40010800
 8003524:	200001dc 	.word	0x200001dc
 8003528:	08003cfc 	.word	0x08003cfc
 800352c:	20000210 	.word	0x20000210
 8003530:	08003d08 	.word	0x08003d08
			};


		}else if(xQueueReceive( pQComm->a2RX, &rx,0)==pdPASS)
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800353c:	2200      	movs	r2, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f7fd fe42 	bl	80011c8 <xQueueReceive>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d046      	beq.n	80035e2 <_Z9aTaskUartPv+0x25a>
		{
			//xQueueReceive( pQComm->a2RX, &rx,0);
			strcat(bufTx, "APP2 data:\0");
 8003554:	487b      	ldr	r0, [pc, #492]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003556:	f7fc fdfb 	bl	8000150 <strlen>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	4b79      	ldr	r3, [pc, #484]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003560:	4413      	add	r3, r2
 8003562:	4979      	ldr	r1, [pc, #484]	; (8003748 <_Z9aTaskUartPv+0x3c0>)
 8003564:	461a      	mov	r2, r3
 8003566:	460b      	mov	r3, r1
 8003568:	cb03      	ldmia	r3!, {r0, r1}
 800356a:	6010      	str	r0, [r2, #0]
 800356c:	6051      	str	r1, [r2, #4]
 800356e:	8819      	ldrh	r1, [r3, #0]
 8003570:	789b      	ldrb	r3, [r3, #2]
 8003572:	8111      	strh	r1, [r2, #8]
 8003574:	7293      	strb	r3, [r2, #10]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 8003576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800357a:	4a74      	ldr	r2, [pc, #464]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 800357c:	210d      	movs	r1, #13
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f92c 	bl	80037dc <_Z8rawtohexPvmPc>
 8003584:	4603      	mov	r3, r0
 8003586:	4619      	mov	r1, r3
 8003588:	486e      	ldr	r0, [pc, #440]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800358a:	f000 fb25 	bl	8003bd8 <strcat>
			strcat(bufTx, "\n\0");
 800358e:	486d      	ldr	r0, [pc, #436]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003590:	f7fc fdde 	bl	8000150 <strlen>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800359a:	4413      	add	r3, r2
 800359c:	496c      	ldr	r1, [pc, #432]	; (8003750 <_Z9aTaskUartPv+0x3c8>)
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80035a6:	4867      	ldr	r0, [pc, #412]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80035a8:	f000 f8de 	bl	8003768 <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a2TX))
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fee5 	bl	8001380 <uxQueueSpacesAvailable>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <_Z9aTaskUartPv+0x25a>
			{
				tx.addrdst=87;
 80035c6:	2357      	movs	r3, #87	; 0x57
 80035c8:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 80035ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a2TX,&tx,0);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	6898      	ldr	r0, [r3, #8]
 80035d6:	f107 011c 	add.w	r1, r7, #28
 80035da:	2300      	movs	r3, #0
 80035dc:	2200      	movs	r2, #0
 80035de:	f7fd fc61 	bl	8000ea4 <xQueueGenericSend>
			};
		};
		if(xQueueReceive( pQComm->qSensor, &airData,0)==pdPASS)
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f107 010c 	add.w	r1, r7, #12
 80035ea:	2200      	movs	r2, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fd fdeb 	bl	80011c8 <xQueueReceive>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	bf0c      	ite	eq
 80035f8:	2301      	moveq	r3, #1
 80035fa:	2300      	movne	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f43f af3b 	beq.w	800347a <_Z9aTaskUartPv+0xf2>
		{
			strcat(bufTx, "CO2: ");
 8003604:	484f      	ldr	r0, [pc, #316]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003606:	f7fc fda3 	bl	8000150 <strlen>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003610:	4413      	add	r3, r2
 8003612:	4a50      	ldr	r2, [pc, #320]	; (8003754 <_Z9aTaskUartPv+0x3cc>)
 8003614:	6810      	ldr	r0, [r2, #0]
 8003616:	6018      	str	r0, [r3, #0]
 8003618:	8892      	ldrh	r2, [r2, #4]
 800361a:	809a      	strh	r2, [r3, #4]
			strcat(bufTx, itoa((int)airData.CO2, bufTmp, 10));
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	220a      	movs	r2, #10
 8003620:	494a      	ldr	r1, [pc, #296]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9bc 	bl	80039a0 <itoa>
 8003628:	4603      	mov	r3, r0
 800362a:	4619      	mov	r1, r3
 800362c:	4845      	ldr	r0, [pc, #276]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800362e:	f000 fad3 	bl	8003bd8 <strcat>
			strcat(bufTx,"\n");
 8003632:	4844      	ldr	r0, [pc, #272]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003634:	f7fc fd8c 	bl	8000150 <strlen>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	4b41      	ldr	r3, [pc, #260]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800363e:	4413      	add	r3, r2
 8003640:	4945      	ldr	r1, [pc, #276]	; (8003758 <_Z9aTaskUartPv+0x3d0>)
 8003642:	461a      	mov	r2, r3
 8003644:	460b      	mov	r3, r1
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "TVOC: ");
 800364a:	483e      	ldr	r0, [pc, #248]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800364c:	f7fc fd80 	bl	8000150 <strlen>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003656:	4413      	add	r3, r2
 8003658:	4a40      	ldr	r2, [pc, #256]	; (800375c <_Z9aTaskUartPv+0x3d4>)
 800365a:	6810      	ldr	r0, [r2, #0]
 800365c:	6018      	str	r0, [r3, #0]
 800365e:	8891      	ldrh	r1, [r2, #4]
 8003660:	7992      	ldrb	r2, [r2, #6]
 8003662:	8099      	strh	r1, [r3, #4]
 8003664:	719a      	strb	r2, [r3, #6]
			strcat(bufTx, itoa((int)airData.TVOC, bufTmp, 10));
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	220a      	movs	r2, #10
 800366a:	4938      	ldr	r1, [pc, #224]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 800366c:	4618      	mov	r0, r3
 800366e:	f000 f997 	bl	80039a0 <itoa>
 8003672:	4603      	mov	r3, r0
 8003674:	4619      	mov	r1, r3
 8003676:	4833      	ldr	r0, [pc, #204]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003678:	f000 faae 	bl	8003bd8 <strcat>
			strcat(bufTx,"\n");
 800367c:	4831      	ldr	r0, [pc, #196]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800367e:	f7fc fd67 	bl	8000150 <strlen>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003688:	4413      	add	r3, r2
 800368a:	4933      	ldr	r1, [pc, #204]	; (8003758 <_Z9aTaskUartPv+0x3d0>)
 800368c:	461a      	mov	r2, r3
 800368e:	460b      	mov	r3, r1
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 8003694:	482b      	ldr	r0, [pc, #172]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003696:	f000 f867 	bl	8003768 <_Z9printUartPc>
			strcat(bufTx, "Temp: ");
 800369a:	482a      	ldr	r0, [pc, #168]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800369c:	f7fc fd58 	bl	8000150 <strlen>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036a6:	4413      	add	r3, r2
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <_Z9aTaskUartPv+0x3d8>)
 80036aa:	6810      	ldr	r0, [r2, #0]
 80036ac:	6018      	str	r0, [r3, #0]
 80036ae:	8891      	ldrh	r1, [r2, #4]
 80036b0:	7992      	ldrb	r2, [r2, #6]
 80036b2:	8099      	strh	r1, [r3, #4]
 80036b4:	719a      	strb	r2, [r3, #6]
			strcat(bufTx, itoa((int)airData.temp, bufTmp, 10));
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	220a      	movs	r2, #10
 80036ba:	4924      	ldr	r1, [pc, #144]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f96f 	bl	80039a0 <itoa>
 80036c2:	4603      	mov	r3, r0
 80036c4:	4619      	mov	r1, r3
 80036c6:	481f      	ldr	r0, [pc, #124]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036c8:	f000 fa86 	bl	8003bd8 <strcat>
			strcat(bufTx,"\n");
 80036cc:	481d      	ldr	r0, [pc, #116]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036ce:	f7fc fd3f 	bl	8000150 <strlen>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036d8:	4413      	add	r3, r2
 80036da:	491f      	ldr	r1, [pc, #124]	; (8003758 <_Z9aTaskUartPv+0x3d0>)
 80036dc:	461a      	mov	r2, r3
 80036de:	460b      	mov	r3, r1
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "Humidity: ");
 80036e4:	4817      	ldr	r0, [pc, #92]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036e6:	f7fc fd33 	bl	8000150 <strlen>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 80036f0:	4413      	add	r3, r2
 80036f2:	491c      	ldr	r1, [pc, #112]	; (8003764 <_Z9aTaskUartPv+0x3dc>)
 80036f4:	461a      	mov	r2, r3
 80036f6:	460b      	mov	r3, r1
 80036f8:	cb03      	ldmia	r3!, {r0, r1}
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	6051      	str	r1, [r2, #4]
 80036fe:	8819      	ldrh	r1, [r3, #0]
 8003700:	789b      	ldrb	r3, [r3, #2]
 8003702:	8111      	strh	r1, [r2, #8]
 8003704:	7293      	strb	r3, [r2, #10]
			strcat(bufTx, itoa((int)airData.humidity, bufTmp, 10));
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	220a      	movs	r2, #10
 800370a:	4910      	ldr	r1, [pc, #64]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f947 	bl	80039a0 <itoa>
 8003712:	4603      	mov	r3, r0
 8003714:	4619      	mov	r1, r3
 8003716:	480b      	ldr	r0, [pc, #44]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003718:	f000 fa5e 	bl	8003bd8 <strcat>
			strcat(bufTx, bufTmp);
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <_Z9aTaskUartPv+0x3c4>)
 800371e:	4809      	ldr	r0, [pc, #36]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003720:	f000 fa5a 	bl	8003bd8 <strcat>
			strcat(bufTx,"\n");
 8003724:	4807      	ldr	r0, [pc, #28]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003726:	f7fc fd13 	bl	8000150 <strlen>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 8003730:	4413      	add	r3, r2
 8003732:	4909      	ldr	r1, [pc, #36]	; (8003758 <_Z9aTaskUartPv+0x3d0>)
 8003734:	461a      	mov	r2, r3
 8003736:	460b      	mov	r3, r1
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 800373c:	4801      	ldr	r0, [pc, #4]	; (8003744 <_Z9aTaskUartPv+0x3bc>)
 800373e:	f000 f813 	bl	8003768 <_Z9printUartPc>
		if(xQueueReceive( pQComm->a1RX, &rx,0)==pdPASS)
 8003742:	e69a      	b.n	800347a <_Z9aTaskUartPv+0xf2>
 8003744:	200001dc 	.word	0x200001dc
 8003748:	08003d0c 	.word	0x08003d0c
 800374c:	20000210 	.word	0x20000210
 8003750:	08003d18 	.word	0x08003d18
 8003754:	08003d1c 	.word	0x08003d1c
 8003758:	08003d08 	.word	0x08003d08
 800375c:	08003d24 	.word	0x08003d24
 8003760:	08003d2c 	.word	0x08003d2c
 8003764:	08003d34 	.word	0x08003d34

08003768 <_Z9printUartPc>:

	}

}
void printUart(char * str)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

	int i=0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d016      	beq.n	80037ae <_Z9printUartPc+0x46>
	{
		if ((USART1->SR & USART_SR_TXE)){
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <_Z9printUartPc+0x70>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ed      	beq.n	8003774 <_Z9printUartPc+0xc>
		USART1->DR=str[i];
 8003798:	490f      	ldr	r1, [pc, #60]	; (80037d8 <_Z9printUartPc+0x70>)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	4413      	add	r3, r2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	808b      	strh	r3, [r1, #4]
		i++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 80037ac:	e7e2      	b.n	8003774 <_Z9printUartPc+0xc>
		};
	}
	while (!(USART1->SR & USART_SR_TXE));
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <_Z9printUartPc+0x70>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d000      	beq.n	80037c8 <_Z9printUartPc+0x60>
 80037c6:	e7f2      	b.n	80037ae <_Z9printUartPc+0x46>
	//USART1->CR1|= USART_CR1_SBK;
	str[0]=0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]

}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40013800 	.word	0x40013800

080037dc <_Z8rawtohexPvmPc>:

char* rawtohex(void* data, uint32_t count,  char * str)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
	uint32_t i=0, is=0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
	while (i<count)
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d269      	bcs.n	80038cc <_Z8rawtohexPvmPc+0xf0>
	{
		char b, c=0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 80037fc:	7dbb      	ldrb	r3, [r7, #22]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	dc58      	bgt.n	80038b4 <_Z8rawtohexPvmPc+0xd8>
		{
			if (c==0) b= ( *((uint8_t*)data+i) >> 4 ) & 0x0f; else b = *((uint8_t*)data+i) & 0x0f;
 8003802:	7dbb      	ldrb	r3, [r7, #22]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <_Z8rawtohexPvmPc+0x3a>
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	75fb      	strb	r3, [r7, #23]
 8003814:	e006      	b.n	8003824 <_Z8rawtohexPvmPc+0x48>
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	75fb      	strb	r3, [r7, #23]
			switch (b)
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	2b0f      	cmp	r3, #15
 8003828:	d838      	bhi.n	800389c <_Z8rawtohexPvmPc+0xc0>
 800382a:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <_Z8rawtohexPvmPc+0x54>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003871 	.word	0x08003871
 8003834:	08003871 	.word	0x08003871
 8003838:	08003871 	.word	0x08003871
 800383c:	08003871 	.word	0x08003871
 8003840:	08003871 	.word	0x08003871
 8003844:	08003871 	.word	0x08003871
 8003848:	08003871 	.word	0x08003871
 800384c:	08003871 	.word	0x08003871
 8003850:	08003871 	.word	0x08003871
 8003854:	08003871 	.word	0x08003871
 8003858:	08003879 	.word	0x08003879
 800385c:	0800387f 	.word	0x0800387f
 8003860:	08003885 	.word	0x08003885
 8003864:	0800388b 	.word	0x0800388b
 8003868:	08003891 	.word	0x08003891
 800386c:	08003897 	.word	0x08003897
			{
			case 0: case 1:	case 2:	case 3:	case 4:	case 5:	case 6:	case 7:	case 8:	case 9:
			{
				b+=0x30; break;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	3330      	adds	r3, #48	; 0x30
 8003874:	75fb      	strb	r3, [r7, #23]
 8003876:	e011      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			};
			case 10: b='A'; break;
 8003878:	2341      	movs	r3, #65	; 0x41
 800387a:	75fb      	strb	r3, [r7, #23]
 800387c:	e00e      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			case 11: b='B'; break;
 800387e:	2342      	movs	r3, #66	; 0x42
 8003880:	75fb      	strb	r3, [r7, #23]
 8003882:	e00b      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			case 12: b='C'; break;
 8003884:	2343      	movs	r3, #67	; 0x43
 8003886:	75fb      	strb	r3, [r7, #23]
 8003888:	e008      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			case 13: b='D'; break;
 800388a:	2344      	movs	r3, #68	; 0x44
 800388c:	75fb      	strb	r3, [r7, #23]
 800388e:	e005      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			case 14: b='E'; break;
 8003890:	2345      	movs	r3, #69	; 0x45
 8003892:	75fb      	strb	r3, [r7, #23]
 8003894:	e002      	b.n	800389c <_Z8rawtohexPvmPc+0xc0>
			case 15: b='F'; break;
 8003896:	2346      	movs	r3, #70	; 0x46
 8003898:	75fb      	strb	r3, [r7, #23]
 800389a:	bf00      	nop
			}
			str[is]=b;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4413      	add	r3, r2
 80038a2:	7dfa      	ldrb	r2, [r7, #23]
 80038a4:	701a      	strb	r2, [r3, #0]
			is++;
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	3301      	adds	r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
			c++;
 80038ac:	7dbb      	ldrb	r3, [r7, #22]
 80038ae:	3301      	adds	r3, #1
 80038b0:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 80038b2:	e7a3      	b.n	80037fc <_Z8rawtohexPvmPc+0x20>
		}
		str[is]=',';
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4413      	add	r3, r2
 80038ba:	222c      	movs	r2, #44	; 0x2c
 80038bc:	701a      	strb	r2, [r3, #0]
		is++;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	3301      	adds	r3, #1
 80038c2:	61bb      	str	r3, [r7, #24]
		i++;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61fb      	str	r3, [r7, #28]
	while (i<count)
 80038ca:	e791      	b.n	80037f0 <_Z8rawtohexPvmPc+0x14>
	}
	str[is-1]=0;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
	return str;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3724      	adds	r7, #36	; 0x24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <_Znwj>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	2800      	cmp	r0, #0
 80038e8:	bf14      	ite	ne
 80038ea:	4604      	movne	r4, r0
 80038ec:	2401      	moveq	r4, #1
 80038ee:	4620      	mov	r0, r4
 80038f0:	f000 f858 	bl	80039a4 <malloc>
 80038f4:	b930      	cbnz	r0, 8003904 <_Znwj+0x20>
 80038f6:	f000 f807 	bl	8003908 <_ZSt15get_new_handlerv>
 80038fa:	b908      	cbnz	r0, 8003900 <_Znwj+0x1c>
 80038fc:	f000 f80c 	bl	8003918 <abort>
 8003900:	4780      	blx	r0
 8003902:	e7f4      	b.n	80038ee <_Znwj+0xa>
 8003904:	bd10      	pop	{r4, pc}
	...

08003908 <_ZSt15get_new_handlerv>:
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <_ZSt15get_new_handlerv+0xc>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	f3bf 8f5b 	dmb	ish
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000244 	.word	0x20000244

08003918 <abort>:
 8003918:	b508      	push	{r3, lr}
 800391a:	2006      	movs	r0, #6
 800391c:	f000 f940 	bl	8003ba0 <raise>
 8003920:	2001      	movs	r0, #1
 8003922:	f000 f9c9 	bl	8003cb8 <_exit>
	...

08003928 <__libc_init_array>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	2500      	movs	r5, #0
 800392c:	4e0c      	ldr	r6, [pc, #48]	; (8003960 <__libc_init_array+0x38>)
 800392e:	4c0d      	ldr	r4, [pc, #52]	; (8003964 <__libc_init_array+0x3c>)
 8003930:	1ba4      	subs	r4, r4, r6
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	42a5      	cmp	r5, r4
 8003936:	d109      	bne.n	800394c <__libc_init_array+0x24>
 8003938:	f000 f9c0 	bl	8003cbc <_init>
 800393c:	2500      	movs	r5, #0
 800393e:	4e0a      	ldr	r6, [pc, #40]	; (8003968 <__libc_init_array+0x40>)
 8003940:	4c0a      	ldr	r4, [pc, #40]	; (800396c <__libc_init_array+0x44>)
 8003942:	1ba4      	subs	r4, r4, r6
 8003944:	10a4      	asrs	r4, r4, #2
 8003946:	42a5      	cmp	r5, r4
 8003948:	d105      	bne.n	8003956 <__libc_init_array+0x2e>
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003950:	4798      	blx	r3
 8003952:	3501      	adds	r5, #1
 8003954:	e7ee      	b.n	8003934 <__libc_init_array+0xc>
 8003956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800395a:	4798      	blx	r3
 800395c:	3501      	adds	r5, #1
 800395e:	e7f2      	b.n	8003946 <__libc_init_array+0x1e>
 8003960:	08003d64 	.word	0x08003d64
 8003964:	08003d64 	.word	0x08003d64
 8003968:	08003d64 	.word	0x08003d64
 800396c:	08003d68 	.word	0x08003d68

08003970 <__itoa>:
 8003970:	1e93      	subs	r3, r2, #2
 8003972:	2b22      	cmp	r3, #34	; 0x22
 8003974:	b510      	push	{r4, lr}
 8003976:	460c      	mov	r4, r1
 8003978:	d904      	bls.n	8003984 <__itoa+0x14>
 800397a:	2300      	movs	r3, #0
 800397c:	461c      	mov	r4, r3
 800397e:	700b      	strb	r3, [r1, #0]
 8003980:	4620      	mov	r0, r4
 8003982:	bd10      	pop	{r4, pc}
 8003984:	2a0a      	cmp	r2, #10
 8003986:	d109      	bne.n	800399c <__itoa+0x2c>
 8003988:	2800      	cmp	r0, #0
 800398a:	da07      	bge.n	800399c <__itoa+0x2c>
 800398c:	232d      	movs	r3, #45	; 0x2d
 800398e:	700b      	strb	r3, [r1, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	4240      	negs	r0, r0
 8003994:	4421      	add	r1, r4
 8003996:	f000 f92f 	bl	8003bf8 <__utoa>
 800399a:	e7f1      	b.n	8003980 <__itoa+0x10>
 800399c:	2100      	movs	r1, #0
 800399e:	e7f9      	b.n	8003994 <__itoa+0x24>

080039a0 <itoa>:
 80039a0:	f7ff bfe6 	b.w	8003970 <__itoa>

080039a4 <malloc>:
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <malloc+0xc>)
 80039a6:	4601      	mov	r1, r0
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f000 b863 	b.w	8003a74 <_malloc_r>
 80039ae:	bf00      	nop
 80039b0:	2000003c 	.word	0x2000003c

080039b4 <free>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	; (80039c0 <free+0xc>)
 80039b6:	4601      	mov	r1, r0
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f000 b80f 	b.w	80039dc <_free_r>
 80039be:	bf00      	nop
 80039c0:	2000003c 	.word	0x2000003c

080039c4 <memcpy>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	1e43      	subs	r3, r0, #1
 80039c8:	440a      	add	r2, r1
 80039ca:	4291      	cmp	r1, r2
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039d8:	e7f7      	b.n	80039ca <memcpy+0x6>
	...

080039dc <_free_r>:
 80039dc:	b538      	push	{r3, r4, r5, lr}
 80039de:	4605      	mov	r5, r0
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d043      	beq.n	8003a6c <_free_r+0x90>
 80039e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e8:	1f0c      	subs	r4, r1, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfb8      	it	lt
 80039ee:	18e4      	addlt	r4, r4, r3
 80039f0:	f000 f942 	bl	8003c78 <__malloc_lock>
 80039f4:	4a1e      	ldr	r2, [pc, #120]	; (8003a70 <_free_r+0x94>)
 80039f6:	6813      	ldr	r3, [r2, #0]
 80039f8:	4610      	mov	r0, r2
 80039fa:	b933      	cbnz	r3, 8003a0a <_free_r+0x2e>
 80039fc:	6063      	str	r3, [r4, #4]
 80039fe:	6014      	str	r4, [r2, #0]
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a06:	f000 b938 	b.w	8003c7a <__malloc_unlock>
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	d90b      	bls.n	8003a26 <_free_r+0x4a>
 8003a0e:	6821      	ldr	r1, [r4, #0]
 8003a10:	1862      	adds	r2, r4, r1
 8003a12:	4293      	cmp	r3, r2
 8003a14:	bf01      	itttt	eq
 8003a16:	681a      	ldreq	r2, [r3, #0]
 8003a18:	685b      	ldreq	r3, [r3, #4]
 8003a1a:	1852      	addeq	r2, r2, r1
 8003a1c:	6022      	streq	r2, [r4, #0]
 8003a1e:	6063      	str	r3, [r4, #4]
 8003a20:	6004      	str	r4, [r0, #0]
 8003a22:	e7ed      	b.n	8003a00 <_free_r+0x24>
 8003a24:	4613      	mov	r3, r2
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	b10a      	cbz	r2, 8003a2e <_free_r+0x52>
 8003a2a:	42a2      	cmp	r2, r4
 8003a2c:	d9fa      	bls.n	8003a24 <_free_r+0x48>
 8003a2e:	6819      	ldr	r1, [r3, #0]
 8003a30:	1858      	adds	r0, r3, r1
 8003a32:	42a0      	cmp	r0, r4
 8003a34:	d10b      	bne.n	8003a4e <_free_r+0x72>
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	4401      	add	r1, r0
 8003a3a:	1858      	adds	r0, r3, r1
 8003a3c:	4282      	cmp	r2, r0
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	d1de      	bne.n	8003a00 <_free_r+0x24>
 8003a42:	6810      	ldr	r0, [r2, #0]
 8003a44:	6852      	ldr	r2, [r2, #4]
 8003a46:	4401      	add	r1, r0
 8003a48:	6019      	str	r1, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e7d8      	b.n	8003a00 <_free_r+0x24>
 8003a4e:	d902      	bls.n	8003a56 <_free_r+0x7a>
 8003a50:	230c      	movs	r3, #12
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	e7d4      	b.n	8003a00 <_free_r+0x24>
 8003a56:	6820      	ldr	r0, [r4, #0]
 8003a58:	1821      	adds	r1, r4, r0
 8003a5a:	428a      	cmp	r2, r1
 8003a5c:	bf01      	itttt	eq
 8003a5e:	6811      	ldreq	r1, [r2, #0]
 8003a60:	6852      	ldreq	r2, [r2, #4]
 8003a62:	1809      	addeq	r1, r1, r0
 8003a64:	6021      	streq	r1, [r4, #0]
 8003a66:	6062      	str	r2, [r4, #4]
 8003a68:	605c      	str	r4, [r3, #4]
 8003a6a:	e7c9      	b.n	8003a00 <_free_r+0x24>
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000248 	.word	0x20000248

08003a74 <_malloc_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	1ccd      	adds	r5, r1, #3
 8003a78:	f025 0503 	bic.w	r5, r5, #3
 8003a7c:	3508      	adds	r5, #8
 8003a7e:	2d0c      	cmp	r5, #12
 8003a80:	bf38      	it	cc
 8003a82:	250c      	movcc	r5, #12
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	4606      	mov	r6, r0
 8003a88:	db01      	blt.n	8003a8e <_malloc_r+0x1a>
 8003a8a:	42a9      	cmp	r1, r5
 8003a8c:	d903      	bls.n	8003a96 <_malloc_r+0x22>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	2000      	movs	r0, #0
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	f000 f8ef 	bl	8003c78 <__malloc_lock>
 8003a9a:	4a23      	ldr	r2, [pc, #140]	; (8003b28 <_malloc_r+0xb4>)
 8003a9c:	6814      	ldr	r4, [r2, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	b991      	cbnz	r1, 8003ac8 <_malloc_r+0x54>
 8003aa2:	4c22      	ldr	r4, [pc, #136]	; (8003b2c <_malloc_r+0xb8>)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	b91b      	cbnz	r3, 8003ab0 <_malloc_r+0x3c>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f841 	bl	8003b30 <_sbrk_r>
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 f83c 	bl	8003b30 <_sbrk_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d126      	bne.n	8003b0a <_malloc_r+0x96>
 8003abc:	230c      	movs	r3, #12
 8003abe:	4630      	mov	r0, r6
 8003ac0:	6033      	str	r3, [r6, #0]
 8003ac2:	f000 f8da 	bl	8003c7a <__malloc_unlock>
 8003ac6:	e7e4      	b.n	8003a92 <_malloc_r+0x1e>
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	1b5b      	subs	r3, r3, r5
 8003acc:	d41a      	bmi.n	8003b04 <_malloc_r+0x90>
 8003ace:	2b0b      	cmp	r3, #11
 8003ad0:	d90f      	bls.n	8003af2 <_malloc_r+0x7e>
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	18cc      	adds	r4, r1, r3
 8003ad6:	50cd      	str	r5, [r1, r3]
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 f8ce 	bl	8003c7a <__malloc_unlock>
 8003ade:	f104 000b 	add.w	r0, r4, #11
 8003ae2:	1d23      	adds	r3, r4, #4
 8003ae4:	f020 0007 	bic.w	r0, r0, #7
 8003ae8:	1ac3      	subs	r3, r0, r3
 8003aea:	d01b      	beq.n	8003b24 <_malloc_r+0xb0>
 8003aec:	425a      	negs	r2, r3
 8003aee:	50e2      	str	r2, [r4, r3]
 8003af0:	bd70      	pop	{r4, r5, r6, pc}
 8003af2:	428c      	cmp	r4, r1
 8003af4:	bf0b      	itete	eq
 8003af6:	6863      	ldreq	r3, [r4, #4]
 8003af8:	684b      	ldrne	r3, [r1, #4]
 8003afa:	6013      	streq	r3, [r2, #0]
 8003afc:	6063      	strne	r3, [r4, #4]
 8003afe:	bf18      	it	ne
 8003b00:	460c      	movne	r4, r1
 8003b02:	e7e9      	b.n	8003ad8 <_malloc_r+0x64>
 8003b04:	460c      	mov	r4, r1
 8003b06:	6849      	ldr	r1, [r1, #4]
 8003b08:	e7ca      	b.n	8003aa0 <_malloc_r+0x2c>
 8003b0a:	1cc4      	adds	r4, r0, #3
 8003b0c:	f024 0403 	bic.w	r4, r4, #3
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d005      	beq.n	8003b20 <_malloc_r+0xac>
 8003b14:	1a21      	subs	r1, r4, r0
 8003b16:	4630      	mov	r0, r6
 8003b18:	f000 f80a 	bl	8003b30 <_sbrk_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d0cd      	beq.n	8003abc <_malloc_r+0x48>
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	e7d9      	b.n	8003ad8 <_malloc_r+0x64>
 8003b24:	bd70      	pop	{r4, r5, r6, pc}
 8003b26:	bf00      	nop
 8003b28:	20000248 	.word	0x20000248
 8003b2c:	2000024c 	.word	0x2000024c

08003b30 <_sbrk_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	2300      	movs	r3, #0
 8003b34:	4c05      	ldr	r4, [pc, #20]	; (8003b4c <_sbrk_r+0x1c>)
 8003b36:	4605      	mov	r5, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	f000 f8ae 	bl	8003c9c <_sbrk>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d102      	bne.n	8003b4a <_sbrk_r+0x1a>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	b103      	cbz	r3, 8003b4a <_sbrk_r+0x1a>
 8003b48:	602b      	str	r3, [r5, #0]
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	20000254 	.word	0x20000254

08003b50 <_raise_r>:
 8003b50:	291f      	cmp	r1, #31
 8003b52:	b538      	push	{r3, r4, r5, lr}
 8003b54:	4604      	mov	r4, r0
 8003b56:	460d      	mov	r5, r1
 8003b58:	d904      	bls.n	8003b64 <_raise_r+0x14>
 8003b5a:	2316      	movs	r3, #22
 8003b5c:	6003      	str	r3, [r0, #0]
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003b66:	b112      	cbz	r2, 8003b6e <_raise_r+0x1e>
 8003b68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b6c:	b94b      	cbnz	r3, 8003b82 <_raise_r+0x32>
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f000 f830 	bl	8003bd4 <_getpid_r>
 8003b74:	462a      	mov	r2, r5
 8003b76:	4601      	mov	r1, r0
 8003b78:	4620      	mov	r0, r4
 8003b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b7e:	f000 b817 	b.w	8003bb0 <_kill_r>
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d00a      	beq.n	8003b9c <_raise_r+0x4c>
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	d103      	bne.n	8003b92 <_raise_r+0x42>
 8003b8a:	2316      	movs	r3, #22
 8003b8c:	6003      	str	r3, [r0, #0]
 8003b8e:	2001      	movs	r0, #1
 8003b90:	bd38      	pop	{r3, r4, r5, pc}
 8003b92:	2400      	movs	r4, #0
 8003b94:	4628      	mov	r0, r5
 8003b96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003b9a:	4798      	blx	r3
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}

08003ba0 <raise>:
 8003ba0:	4b02      	ldr	r3, [pc, #8]	; (8003bac <raise+0xc>)
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f7ff bfd3 	b.w	8003b50 <_raise_r>
 8003baa:	bf00      	nop
 8003bac:	2000003c 	.word	0x2000003c

08003bb0 <_kill_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4c06      	ldr	r4, [pc, #24]	; (8003bd0 <_kill_r+0x20>)
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	f000 f865 	bl	8003c8c <_kill>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d102      	bne.n	8003bcc <_kill_r+0x1c>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	b103      	cbz	r3, 8003bcc <_kill_r+0x1c>
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000254 	.word	0x20000254

08003bd4 <_getpid_r>:
 8003bd4:	f000 b852 	b.w	8003c7c <_getpid>

08003bd8 <strcat>:
 8003bd8:	4602      	mov	r2, r0
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	4613      	mov	r3, r2
 8003bde:	781c      	ldrb	r4, [r3, #0]
 8003be0:	3201      	adds	r2, #1
 8003be2:	2c00      	cmp	r4, #0
 8003be4:	d1fa      	bne.n	8003bdc <strcat+0x4>
 8003be6:	3b01      	subs	r3, #1
 8003be8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d1f9      	bne.n	8003be8 <strcat+0x10>
 8003bf4:	bd10      	pop	{r4, pc}
	...

08003bf8 <__utoa>:
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	b08b      	sub	sp, #44	; 0x2c
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	460f      	mov	r7, r1
 8003c00:	466d      	mov	r5, sp
 8003c02:	4c1c      	ldr	r4, [pc, #112]	; (8003c74 <__utoa+0x7c>)
 8003c04:	f104 0e20 	add.w	lr, r4, #32
 8003c08:	462e      	mov	r6, r5
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	6861      	ldr	r1, [r4, #4]
 8003c0e:	3408      	adds	r4, #8
 8003c10:	c603      	stmia	r6!, {r0, r1}
 8003c12:	4574      	cmp	r4, lr
 8003c14:	4635      	mov	r5, r6
 8003c16:	d1f7      	bne.n	8003c08 <__utoa+0x10>
 8003c18:	7921      	ldrb	r1, [r4, #4]
 8003c1a:	6820      	ldr	r0, [r4, #0]
 8003c1c:	7131      	strb	r1, [r6, #4]
 8003c1e:	1e91      	subs	r1, r2, #2
 8003c20:	2922      	cmp	r1, #34	; 0x22
 8003c22:	6030      	str	r0, [r6, #0]
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	d904      	bls.n	8003c34 <__utoa+0x3c>
 8003c2a:	7039      	strb	r1, [r7, #0]
 8003c2c:	460f      	mov	r7, r1
 8003c2e:	4638      	mov	r0, r7
 8003c30:	b00b      	add	sp, #44	; 0x2c
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c34:	1e78      	subs	r0, r7, #1
 8003c36:	4606      	mov	r6, r0
 8003c38:	fbb3 f5f2 	udiv	r5, r3, r2
 8003c3c:	fb02 3315 	mls	r3, r2, r5, r3
 8003c40:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003c44:	4473      	add	r3, lr
 8003c46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c4a:	1c4c      	adds	r4, r1, #1
 8003c4c:	f806 3f01 	strb.w	r3, [r6, #1]!
 8003c50:	462b      	mov	r3, r5
 8003c52:	b965      	cbnz	r5, 8003c6e <__utoa+0x76>
 8003c54:	553d      	strb	r5, [r7, r4]
 8003c56:	187a      	adds	r2, r7, r1
 8003c58:	1acc      	subs	r4, r1, r3
 8003c5a:	42a3      	cmp	r3, r4
 8003c5c:	dae7      	bge.n	8003c2e <__utoa+0x36>
 8003c5e:	7844      	ldrb	r4, [r0, #1]
 8003c60:	7815      	ldrb	r5, [r2, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	f800 5f01 	strb.w	r5, [r0, #1]!
 8003c68:	f802 4901 	strb.w	r4, [r2], #-1
 8003c6c:	e7f4      	b.n	8003c58 <__utoa+0x60>
 8003c6e:	4621      	mov	r1, r4
 8003c70:	e7e2      	b.n	8003c38 <__utoa+0x40>
 8003c72:	bf00      	nop
 8003c74:	08003d3f 	.word	0x08003d3f

08003c78 <__malloc_lock>:
 8003c78:	4770      	bx	lr

08003c7a <__malloc_unlock>:
 8003c7a:	4770      	bx	lr

08003c7c <_getpid>:
 8003c7c:	2258      	movs	r2, #88	; 0x58
 8003c7e:	4b02      	ldr	r3, [pc, #8]	; (8003c88 <_getpid+0xc>)
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	4770      	bx	lr
 8003c88:	20000254 	.word	0x20000254

08003c8c <_kill>:
 8003c8c:	2258      	movs	r2, #88	; 0x58
 8003c8e:	4b02      	ldr	r3, [pc, #8]	; (8003c98 <_kill+0xc>)
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	4770      	bx	lr
 8003c98:	20000254 	.word	0x20000254

08003c9c <_sbrk>:
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <_sbrk+0x14>)
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	b909      	cbnz	r1, 8003ca8 <_sbrk+0xc>
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <_sbrk+0x18>)
 8003ca6:	6019      	str	r1, [r3, #0]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	4402      	add	r2, r0
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4770      	bx	lr
 8003cb0:	20000250 	.word	0x20000250
 8003cb4:	20000258 	.word	0x20000258

08003cb8 <_exit>:
 8003cb8:	e7fe      	b.n	8003cb8 <_exit>
	...

08003cbc <_init>:
 8003cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbe:	bf00      	nop
 8003cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc2:	bc08      	pop	{r3}
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	4770      	bx	lr

08003cc8 <_fini>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr
