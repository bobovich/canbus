
canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d0  20000000  080056b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001bc  200000d0  08005780  000200d0  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000028c  08005780  0002028c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bb84  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d14  00000000  00000000  0002bc7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006c8  00000000  00000000  0002d998  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f0  00000000  00000000  0002e060  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000403c  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002b38  00000000  00000000  0003268c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000351c4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000020d4  00000000  00000000  00035240  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00037314  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000076  00000000  00000000  00037350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000d0 	.word	0x200000d0
 800012c:	00000000 	.word	0x00000000
 8000130:	080055ac 	.word	0x080055ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000d4 	.word	0x200000d4
 800014c:	080055ac 	.word	0x080055ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_d2f>:
 80004d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d8:	bf24      	itt	cs
 80004da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004e2:	d90d      	bls.n	8000500 <__aeabi_d2f+0x30>
 80004e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f8:	bf08      	it	eq
 80004fa:	f020 0001 	biceq.w	r0, r0, #1
 80004fe:	4770      	bx	lr
 8000500:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000504:	d121      	bne.n	800054a <__aeabi_d2f+0x7a>
 8000506:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800050a:	bfbc      	itt	lt
 800050c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000510:	4770      	bxlt	lr
 8000512:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000516:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800051a:	f1c2 0218 	rsb	r2, r2, #24
 800051e:	f1c2 0c20 	rsb	ip, r2, #32
 8000522:	fa10 f30c 	lsls.w	r3, r0, ip
 8000526:	fa20 f002 	lsr.w	r0, r0, r2
 800052a:	bf18      	it	ne
 800052c:	f040 0001 	orrne.w	r0, r0, #1
 8000530:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000534:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000538:	fa03 fc0c 	lsl.w	ip, r3, ip
 800053c:	ea40 000c 	orr.w	r0, r0, ip
 8000540:	fa23 f302 	lsr.w	r3, r3, r2
 8000544:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000548:	e7cc      	b.n	80004e4 <__aeabi_d2f+0x14>
 800054a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800054e:	d107      	bne.n	8000560 <__aeabi_d2f+0x90>
 8000550:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000554:	bf1e      	ittt	ne
 8000556:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800055a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800055e:	4770      	bxne	lr
 8000560:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000564:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000568:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <__aeabi_frsub>:
 8000570:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000574:	e002      	b.n	800057c <__addsf3>
 8000576:	bf00      	nop

08000578 <__aeabi_fsub>:
 8000578:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800057c <__addsf3>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	bf1f      	itttt	ne
 8000580:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000584:	ea92 0f03 	teqne	r2, r3
 8000588:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800058c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000590:	d06a      	beq.n	8000668 <__addsf3+0xec>
 8000592:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000596:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800059a:	bfc1      	itttt	gt
 800059c:	18d2      	addgt	r2, r2, r3
 800059e:	4041      	eorgt	r1, r0
 80005a0:	4048      	eorgt	r0, r1
 80005a2:	4041      	eorgt	r1, r0
 80005a4:	bfb8      	it	lt
 80005a6:	425b      	neglt	r3, r3
 80005a8:	2b19      	cmp	r3, #25
 80005aa:	bf88      	it	hi
 80005ac:	4770      	bxhi	lr
 80005ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005ba:	bf18      	it	ne
 80005bc:	4240      	negne	r0, r0
 80005be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005ca:	bf18      	it	ne
 80005cc:	4249      	negne	r1, r1
 80005ce:	ea92 0f03 	teq	r2, r3
 80005d2:	d03f      	beq.n	8000654 <__addsf3+0xd8>
 80005d4:	f1a2 0201 	sub.w	r2, r2, #1
 80005d8:	fa41 fc03 	asr.w	ip, r1, r3
 80005dc:	eb10 000c 	adds.w	r0, r0, ip
 80005e0:	f1c3 0320 	rsb	r3, r3, #32
 80005e4:	fa01 f103 	lsl.w	r1, r1, r3
 80005e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80005ec:	d502      	bpl.n	80005f4 <__addsf3+0x78>
 80005ee:	4249      	negs	r1, r1
 80005f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80005f8:	d313      	bcc.n	8000622 <__addsf3+0xa6>
 80005fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005fe:	d306      	bcc.n	800060e <__addsf3+0x92>
 8000600:	0840      	lsrs	r0, r0, #1
 8000602:	ea4f 0131 	mov.w	r1, r1, rrx
 8000606:	f102 0201 	add.w	r2, r2, #1
 800060a:	2afe      	cmp	r2, #254	; 0xfe
 800060c:	d251      	bcs.n	80006b2 <__addsf3+0x136>
 800060e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000612:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000616:	bf08      	it	eq
 8000618:	f020 0001 	biceq.w	r0, r0, #1
 800061c:	ea40 0003 	orr.w	r0, r0, r3
 8000620:	4770      	bx	lr
 8000622:	0049      	lsls	r1, r1, #1
 8000624:	eb40 0000 	adc.w	r0, r0, r0
 8000628:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800062c:	f1a2 0201 	sub.w	r2, r2, #1
 8000630:	d1ed      	bne.n	800060e <__addsf3+0x92>
 8000632:	fab0 fc80 	clz	ip, r0
 8000636:	f1ac 0c08 	sub.w	ip, ip, #8
 800063a:	ebb2 020c 	subs.w	r2, r2, ip
 800063e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000642:	bfaa      	itet	ge
 8000644:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000648:	4252      	neglt	r2, r2
 800064a:	4318      	orrge	r0, r3
 800064c:	bfbc      	itt	lt
 800064e:	40d0      	lsrlt	r0, r2
 8000650:	4318      	orrlt	r0, r3
 8000652:	4770      	bx	lr
 8000654:	f092 0f00 	teq	r2, #0
 8000658:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800065c:	bf06      	itte	eq
 800065e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000662:	3201      	addeq	r2, #1
 8000664:	3b01      	subne	r3, #1
 8000666:	e7b5      	b.n	80005d4 <__addsf3+0x58>
 8000668:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	bf18      	it	ne
 8000672:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000676:	d021      	beq.n	80006bc <__addsf3+0x140>
 8000678:	ea92 0f03 	teq	r2, r3
 800067c:	d004      	beq.n	8000688 <__addsf3+0x10c>
 800067e:	f092 0f00 	teq	r2, #0
 8000682:	bf08      	it	eq
 8000684:	4608      	moveq	r0, r1
 8000686:	4770      	bx	lr
 8000688:	ea90 0f01 	teq	r0, r1
 800068c:	bf1c      	itt	ne
 800068e:	2000      	movne	r0, #0
 8000690:	4770      	bxne	lr
 8000692:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000696:	d104      	bne.n	80006a2 <__addsf3+0x126>
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	bf28      	it	cs
 800069c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006a0:	4770      	bx	lr
 80006a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006a6:	bf3c      	itt	cc
 80006a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006ac:	4770      	bxcc	lr
 80006ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ba:	4770      	bx	lr
 80006bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006c0:	bf16      	itet	ne
 80006c2:	4608      	movne	r0, r1
 80006c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006c8:	4601      	movne	r1, r0
 80006ca:	0242      	lsls	r2, r0, #9
 80006cc:	bf06      	itte	eq
 80006ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006d2:	ea90 0f01 	teqeq	r0, r1
 80006d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80006da:	4770      	bx	lr

080006dc <__aeabi_ui2f>:
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	e004      	b.n	80006ec <__aeabi_i2f+0x8>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2f>:
 80006e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	ea5f 0c00 	movs.w	ip, r0
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80006f8:	4601      	mov	r1, r0
 80006fa:	f04f 0000 	mov.w	r0, #0
 80006fe:	e01c      	b.n	800073a <__aeabi_l2f+0x2a>

08000700 <__aeabi_ul2f>:
 8000700:	ea50 0201 	orrs.w	r2, r0, r1
 8000704:	bf08      	it	eq
 8000706:	4770      	bxeq	lr
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	e00a      	b.n	8000724 <__aeabi_l2f+0x14>
 800070e:	bf00      	nop

08000710 <__aeabi_l2f>:
 8000710:	ea50 0201 	orrs.w	r2, r0, r1
 8000714:	bf08      	it	eq
 8000716:	4770      	bxeq	lr
 8000718:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800071c:	d502      	bpl.n	8000724 <__aeabi_l2f+0x14>
 800071e:	4240      	negs	r0, r0
 8000720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000724:	ea5f 0c01 	movs.w	ip, r1
 8000728:	bf02      	ittt	eq
 800072a:	4684      	moveq	ip, r0
 800072c:	4601      	moveq	r1, r0
 800072e:	2000      	moveq	r0, #0
 8000730:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000734:	bf08      	it	eq
 8000736:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800073a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800073e:	fabc f28c 	clz	r2, ip
 8000742:	3a08      	subs	r2, #8
 8000744:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000748:	db10      	blt.n	800076c <__aeabi_l2f+0x5c>
 800074a:	fa01 fc02 	lsl.w	ip, r1, r2
 800074e:	4463      	add	r3, ip
 8000750:	fa00 fc02 	lsl.w	ip, r0, r2
 8000754:	f1c2 0220 	rsb	r2, r2, #32
 8000758:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800075c:	fa20 f202 	lsr.w	r2, r0, r2
 8000760:	eb43 0002 	adc.w	r0, r3, r2
 8000764:	bf08      	it	eq
 8000766:	f020 0001 	biceq.w	r0, r0, #1
 800076a:	4770      	bx	lr
 800076c:	f102 0220 	add.w	r2, r2, #32
 8000770:	fa01 fc02 	lsl.w	ip, r1, r2
 8000774:	f1c2 0220 	rsb	r2, r2, #32
 8000778:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800077c:	fa21 f202 	lsr.w	r2, r1, r2
 8000780:	eb43 0002 	adc.w	r0, r3, r2
 8000784:	bf08      	it	eq
 8000786:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800078a:	4770      	bx	lr

0800078c <__aeabi_fmul>:
 800078c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000790:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000794:	bf1e      	ittt	ne
 8000796:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800079a:	ea92 0f0c 	teqne	r2, ip
 800079e:	ea93 0f0c 	teqne	r3, ip
 80007a2:	d06f      	beq.n	8000884 <__aeabi_fmul+0xf8>
 80007a4:	441a      	add	r2, r3
 80007a6:	ea80 0c01 	eor.w	ip, r0, r1
 80007aa:	0240      	lsls	r0, r0, #9
 80007ac:	bf18      	it	ne
 80007ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007b2:	d01e      	beq.n	80007f2 <__aeabi_fmul+0x66>
 80007b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007c0:	fba0 3101 	umull	r3, r1, r0, r1
 80007c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007cc:	bf3e      	ittt	cc
 80007ce:	0049      	lslcc	r1, r1, #1
 80007d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80007d4:	005b      	lslcc	r3, r3, #1
 80007d6:	ea40 0001 	orr.w	r0, r0, r1
 80007da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80007de:	2afd      	cmp	r2, #253	; 0xfd
 80007e0:	d81d      	bhi.n	800081e <__aeabi_fmul+0x92>
 80007e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80007e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ea:	bf08      	it	eq
 80007ec:	f020 0001 	biceq.w	r0, r0, #1
 80007f0:	4770      	bx	lr
 80007f2:	f090 0f00 	teq	r0, #0
 80007f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80007fa:	bf08      	it	eq
 80007fc:	0249      	lsleq	r1, r1, #9
 80007fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000802:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000806:	3a7f      	subs	r2, #127	; 0x7f
 8000808:	bfc2      	ittt	gt
 800080a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800080e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000812:	4770      	bxgt	lr
 8000814:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000818:	f04f 0300 	mov.w	r3, #0
 800081c:	3a01      	subs	r2, #1
 800081e:	dc5d      	bgt.n	80008dc <__aeabi_fmul+0x150>
 8000820:	f112 0f19 	cmn.w	r2, #25
 8000824:	bfdc      	itt	le
 8000826:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800082a:	4770      	bxle	lr
 800082c:	f1c2 0200 	rsb	r2, r2, #0
 8000830:	0041      	lsls	r1, r0, #1
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	f1c2 0220 	rsb	r2, r2, #32
 800083a:	fa00 fc02 	lsl.w	ip, r0, r2
 800083e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000842:	f140 0000 	adc.w	r0, r0, #0
 8000846:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800084a:	bf08      	it	eq
 800084c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000850:	4770      	bx	lr
 8000852:	f092 0f00 	teq	r2, #0
 8000856:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800085a:	bf02      	ittt	eq
 800085c:	0040      	lsleq	r0, r0, #1
 800085e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000862:	3a01      	subeq	r2, #1
 8000864:	d0f9      	beq.n	800085a <__aeabi_fmul+0xce>
 8000866:	ea40 000c 	orr.w	r0, r0, ip
 800086a:	f093 0f00 	teq	r3, #0
 800086e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000872:	bf02      	ittt	eq
 8000874:	0049      	lsleq	r1, r1, #1
 8000876:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800087a:	3b01      	subeq	r3, #1
 800087c:	d0f9      	beq.n	8000872 <__aeabi_fmul+0xe6>
 800087e:	ea41 010c 	orr.w	r1, r1, ip
 8000882:	e78f      	b.n	80007a4 <__aeabi_fmul+0x18>
 8000884:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000888:	ea92 0f0c 	teq	r2, ip
 800088c:	bf18      	it	ne
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d00a      	beq.n	80008aa <__aeabi_fmul+0x11e>
 8000894:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000898:	bf18      	it	ne
 800089a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800089e:	d1d8      	bne.n	8000852 <__aeabi_fmul+0xc6>
 80008a0:	ea80 0001 	eor.w	r0, r0, r1
 80008a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	bf17      	itett	ne
 80008b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008b4:	4608      	moveq	r0, r1
 80008b6:	f091 0f00 	teqne	r1, #0
 80008ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008be:	d014      	beq.n	80008ea <__aeabi_fmul+0x15e>
 80008c0:	ea92 0f0c 	teq	r2, ip
 80008c4:	d101      	bne.n	80008ca <__aeabi_fmul+0x13e>
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	d10f      	bne.n	80008ea <__aeabi_fmul+0x15e>
 80008ca:	ea93 0f0c 	teq	r3, ip
 80008ce:	d103      	bne.n	80008d8 <__aeabi_fmul+0x14c>
 80008d0:	024b      	lsls	r3, r1, #9
 80008d2:	bf18      	it	ne
 80008d4:	4608      	movne	r0, r1
 80008d6:	d108      	bne.n	80008ea <__aeabi_fmul+0x15e>
 80008d8:	ea80 0001 	eor.w	r0, r0, r1
 80008dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_fdiv>:
 80008f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80008fc:	bf1e      	ittt	ne
 80008fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000902:	ea92 0f0c 	teqne	r2, ip
 8000906:	ea93 0f0c 	teqne	r3, ip
 800090a:	d069      	beq.n	80009e0 <__aeabi_fdiv+0xec>
 800090c:	eba2 0203 	sub.w	r2, r2, r3
 8000910:	ea80 0c01 	eor.w	ip, r0, r1
 8000914:	0249      	lsls	r1, r1, #9
 8000916:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800091a:	d037      	beq.n	800098c <__aeabi_fdiv+0x98>
 800091c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000920:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000924:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000928:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800092c:	428b      	cmp	r3, r1
 800092e:	bf38      	it	cc
 8000930:	005b      	lslcc	r3, r3, #1
 8000932:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000936:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800093a:	428b      	cmp	r3, r1
 800093c:	bf24      	itt	cs
 800093e:	1a5b      	subcs	r3, r3, r1
 8000940:	ea40 000c 	orrcs.w	r0, r0, ip
 8000944:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000948:	bf24      	itt	cs
 800094a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800094e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000952:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000956:	bf24      	itt	cs
 8000958:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000964:	bf24      	itt	cs
 8000966:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800096a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	bf18      	it	ne
 8000972:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000976:	d1e0      	bne.n	800093a <__aeabi_fdiv+0x46>
 8000978:	2afd      	cmp	r2, #253	; 0xfd
 800097a:	f63f af50 	bhi.w	800081e <__aeabi_fmul+0x92>
 800097e:	428b      	cmp	r3, r1
 8000980:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000990:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000994:	327f      	adds	r2, #127	; 0x7f
 8000996:	bfc2      	ittt	gt
 8000998:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800099c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a0:	4770      	bxgt	lr
 80009a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a6:	f04f 0300 	mov.w	r3, #0
 80009aa:	3a01      	subs	r2, #1
 80009ac:	e737      	b.n	800081e <__aeabi_fmul+0x92>
 80009ae:	f092 0f00 	teq	r2, #0
 80009b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009b6:	bf02      	ittt	eq
 80009b8:	0040      	lsleq	r0, r0, #1
 80009ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009be:	3a01      	subeq	r2, #1
 80009c0:	d0f9      	beq.n	80009b6 <__aeabi_fdiv+0xc2>
 80009c2:	ea40 000c 	orr.w	r0, r0, ip
 80009c6:	f093 0f00 	teq	r3, #0
 80009ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009ce:	bf02      	ittt	eq
 80009d0:	0049      	lsleq	r1, r1, #1
 80009d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009d6:	3b01      	subeq	r3, #1
 80009d8:	d0f9      	beq.n	80009ce <__aeabi_fdiv+0xda>
 80009da:	ea41 010c 	orr.w	r1, r1, ip
 80009de:	e795      	b.n	800090c <__aeabi_fdiv+0x18>
 80009e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80009e4:	ea92 0f0c 	teq	r2, ip
 80009e8:	d108      	bne.n	80009fc <__aeabi_fdiv+0x108>
 80009ea:	0242      	lsls	r2, r0, #9
 80009ec:	f47f af7d 	bne.w	80008ea <__aeabi_fmul+0x15e>
 80009f0:	ea93 0f0c 	teq	r3, ip
 80009f4:	f47f af70 	bne.w	80008d8 <__aeabi_fmul+0x14c>
 80009f8:	4608      	mov	r0, r1
 80009fa:	e776      	b.n	80008ea <__aeabi_fmul+0x15e>
 80009fc:	ea93 0f0c 	teq	r3, ip
 8000a00:	d104      	bne.n	8000a0c <__aeabi_fdiv+0x118>
 8000a02:	024b      	lsls	r3, r1, #9
 8000a04:	f43f af4c 	beq.w	80008a0 <__aeabi_fmul+0x114>
 8000a08:	4608      	mov	r0, r1
 8000a0a:	e76e      	b.n	80008ea <__aeabi_fmul+0x15e>
 8000a0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a10:	bf18      	it	ne
 8000a12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a16:	d1ca      	bne.n	80009ae <__aeabi_fdiv+0xba>
 8000a18:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a1c:	f47f af5c 	bne.w	80008d8 <__aeabi_fmul+0x14c>
 8000a20:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a24:	f47f af3c 	bne.w	80008a0 <__aeabi_fmul+0x114>
 8000a28:	e75f      	b.n	80008ea <__aeabi_fmul+0x15e>
 8000a2a:	bf00      	nop

08000a2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f103 0208 	add.w	r2, r3, #8
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f103 0208 	add.w	r2, r3, #8
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f103 0208 	add.w	r2, r3, #8
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1c5a      	adds	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ade:	d103      	bne.n	8000ae8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e00c      	b.n	8000b02 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3308      	adds	r3, #8
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e002      	b.n	8000af6 <vListInsert+0x2e>
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d9f6      	bls.n	8000af0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	683a      	ldr	r2, [r7, #0]
 8000b10:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	6892      	ldr	r2, [r2, #8]
 8000b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	6852      	ldr	r2, [r2, #4]
 8000b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d103      	bne.n	8000b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1e5a      	subs	r2, r3, #1
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
	...

08000b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	3b04      	subs	r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	f023 0201 	bic.w	r2, r3, #1
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3b04      	subs	r3, #4
 8000bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <pxPortInitialiseStack+0x54>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b14      	subs	r3, #20
 8000bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3b20      	subs	r3, #32
 8000bd2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	08000be5 	.word	0x08000be5

08000be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <prvTaskExitError+0x4c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf6:	d009      	beq.n	8000c0c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e7fe      	b.n	8000c0a <prvTaskExitError+0x26>
 8000c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c10:	f383 8811 	msr	BASEPRI, r3
 8000c14:	f3bf 8f6f 	isb	sy
 8000c18:	f3bf 8f4f 	dsb	sy
 8000c1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000c1e:	bf00      	nop
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0fc      	beq.n	8000c20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000000 	.word	0x20000000
	...

08000c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <pxCurrentTCBConst2>)
 8000c42:	6819      	ldr	r1, [r3, #0]
 8000c44:	6808      	ldr	r0, [r1, #0]
 8000c46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c4a:	f380 8809 	msr	PSP, r0
 8000c4e:	f3bf 8f6f 	isb	sy
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	f380 8811 	msr	BASEPRI, r0
 8000c5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000c5e:	4770      	bx	lr

08000c60 <pxCurrentTCBConst2>:
 8000c60:	200000f4 	.word	0x200000f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop

08000c68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <prvPortStartFirstTask+0x1c>)
 8000c6a:	6800      	ldr	r0, [r0, #0]
 8000c6c:	6800      	ldr	r0, [r0, #0]
 8000c6e:	f380 8808 	msr	MSP, r0
 8000c72:	b662      	cpsie	i
 8000c74:	b661      	cpsie	f
 8000c76:	f3bf 8f4f 	dsb	sy
 8000c7a:	f3bf 8f6f 	isb	sy
 8000c7e:	df00      	svc	0
 8000c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000c82:	bf00      	nop
 8000c84:	e000ed08 	.word	0xe000ed08

08000c88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c8e:	4b31      	ldr	r3, [pc, #196]	; (8000d54 <xPortStartScheduler+0xcc>)
 8000c90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b29      	ldr	r3, [pc, #164]	; (8000d58 <xPortStartScheduler+0xd0>)
 8000cb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000cbc:	e009      	b.n	8000cd2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000cc6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000cc8:	78fb      	ldrb	r3, [r7, #3]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	2b80      	cmp	r3, #128	; 0x80
 8000cdc:	d0ef      	beq.n	8000cbe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000cde:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d009      	beq.n	8000cfe <xPortStartScheduler+0x76>
 8000cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cee:	f383 8811 	msr	BASEPRI, r3
 8000cf2:	f3bf 8f6f 	isb	sy
 8000cf6:	f3bf 8f4f 	dsb	sy
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	e7fe      	b.n	8000cfc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000d06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000d10:	4a12      	ldr	r2, [pc, #72]	; (8000d5c <xPortStartScheduler+0xd4>)
 8000d12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <xPortStartScheduler+0xd8>)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <xPortStartScheduler+0xd8>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <xPortStartScheduler+0xd8>)
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <xPortStartScheduler+0xd8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000d32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000d34:	f000 f8b0 	bl	8000e98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <xPortStartScheduler+0xdc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000d3e:	f7ff ff93 	bl	8000c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000d42:	f001 f8d5 	bl	8001ef0 <vTaskSwitchContext>
	prvTaskExitError();
 8000d46:	f7ff ff4d 	bl	8000be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	e000e400 	.word	0xe000e400
 8000d58:	200000ec 	.word	0x200000ec
 8000d5c:	200000f0 	.word	0x200000f0
 8000d60:	e000ed20 	.word	0xe000ed20
 8000d64:	20000000 	.word	0x20000000

08000d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d72:	f383 8811 	msr	BASEPRI, r3
 8000d76:	f3bf 8f6f 	isb	sy
 8000d7a:	f3bf 8f4f 	dsb	sy
 8000d7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <vPortEnterCritical+0x54>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <vPortEnterCritical+0x54>)
 8000d88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <vPortEnterCritical+0x54>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10e      	bne.n	8000db0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <vPortEnterCritical+0x58>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d009      	beq.n	8000db0 <vPortEnterCritical+0x48>
 8000d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da0:	f383 8811 	msr	BASEPRI, r3
 8000da4:	f3bf 8f6f 	isb	sy
 8000da8:	f3bf 8f4f 	dsb	sy
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	e7fe      	b.n	8000dae <vPortEnterCritical+0x46>
	}
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	e000ed04 	.word	0xe000ed04

08000dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <vPortExitCritical+0x48>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <vPortExitCritical+0x22>
 8000dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	e7fe      	b.n	8000de4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <vPortExitCritical+0x48>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <vPortExitCritical+0x48>)
 8000dee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <vPortExitCritical+0x48>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d104      	bne.n	8000e02 <vPortExitCritical+0x3e>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000000 	.word	0x20000000

08000e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e10:	f3ef 8009 	mrs	r0, PSP
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <pxCurrentTCBConst>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e20:	6010      	str	r0, [r2, #0]
 8000e22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000e26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e2a:	f380 8811 	msr	BASEPRI, r0
 8000e2e:	f001 f85f 	bl	8001ef0 <vTaskSwitchContext>
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	f380 8811 	msr	BASEPRI, r0
 8000e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000e3e:	6819      	ldr	r1, [r3, #0]
 8000e40:	6808      	ldr	r0, [r1, #0]
 8000e42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e46:	f380 8809 	msr	PSP, r0
 8000e4a:	f3bf 8f6f 	isb	sy
 8000e4e:	4770      	bx	lr

08000e50 <pxCurrentTCBConst>:
 8000e50:	200000f4 	.word	0x200000f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e54:	bf00      	nop
 8000e56:	bf00      	nop

08000e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8000e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e62:	f383 8811 	msr	BASEPRI, r3
 8000e66:	f3bf 8f6f 	isb	sy
 8000e6a:	f3bf 8f4f 	dsb	sy
 8000e6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000e70:	f000 ff86 	bl	8001d80 <xTaskIncrementTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SysTick_Handler+0x3c>)
 8000e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	e000ed04 	.word	0xe000ed04

08000e98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <vPortSetupTimerInterrupt+0x28>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <vPortSetupTimerInterrupt+0x2c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <vPortSetupTimerInterrupt+0x30>)
 8000eaa:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8000eae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <vPortSetupTimerInterrupt+0x28>)
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010
 8000ec4:	e000e018 	.word	0xe000e018
 8000ec8:	e000e014 	.word	0xe000e014

08000ecc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000ed2:	f3ef 8305 	mrs	r3, IPSR
 8000ed6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	d913      	bls.n	8000f06 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <vPortValidateInterruptPriority+0x68>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <vPortValidateInterruptPriority+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	7afa      	ldrb	r2, [r7, #11]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d209      	bcs.n	8000f06 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef6:	f383 8811 	msr	BASEPRI, r3
 8000efa:	f3bf 8f6f 	isb	sy
 8000efe:	f3bf 8f4f 	dsb	sy
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	e7fe      	b.n	8000f04 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <vPortValidateInterruptPriority+0x70>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <vPortValidateInterruptPriority+0x74>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d909      	bls.n	8000f2a <vPortValidateInterruptPriority+0x5e>
 8000f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f1a:	f383 8811 	msr	BASEPRI, r3
 8000f1e:	f3bf 8f6f 	isb	sy
 8000f22:	f3bf 8f4f 	dsb	sy
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	e7fe      	b.n	8000f28 <vPortValidateInterruptPriority+0x5c>
	}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	e000e3f0 	.word	0xe000e3f0
 8000f38:	200000ec 	.word	0x200000ec
 8000f3c:	e000ed0c 	.word	0xe000ed0c
 8000f40:	200000f0 	.word	0x200000f0

08000f44 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000f4c:	f000 fe60 	bl	8001c10 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f003 fe3b 	bl	8004bcc <malloc>
 8000f56:	4603      	mov	r3, r0
 8000f58:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000f5a:	f000 fe67 	bl	8001c2c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	if( pv )
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000f76:	f000 fe4b 	bl	8001c10 <vTaskSuspendAll>
		{
			free( pv );
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f003 fe2e 	bl	8004bdc <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8000f80:	f000 fe54 	bl	8001c2c <xTaskResumeAll>
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d109      	bne.n	8000fb4 <xQueueGenericReset+0x28>
 8000fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fa4:	f383 8811 	msr	BASEPRI, r3
 8000fa8:	f3bf 8f6f 	isb	sy
 8000fac:	f3bf 8f4f 	dsb	sy
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	e7fe      	b.n	8000fb2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000fb4:	f7ff fed8 	bl	8000d68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc0:	68f9      	ldr	r1, [r7, #12]
 8000fc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fc4:	fb01 f303 	mul.w	r3, r1, r3
 8000fc8:	441a      	add	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000fea:	fb01 f303 	mul.w	r3, r1, r3
 8000fee:	441a      	add	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	22ff      	movs	r2, #255	; 0xff
 8000ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d114      	bne.n	8001034 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d01a      	beq.n	8001048 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3310      	adds	r3, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f001 f812 	bl	8002040 <xTaskRemoveFromEventList>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d012      	beq.n	8001048 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <xQueueGenericReset+0xcc>)
 8001024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	f3bf 8f4f 	dsb	sy
 800102e:	f3bf 8f6f 	isb	sy
 8001032:	e009      	b.n	8001048 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3310      	adds	r3, #16
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fcf7 	bl	8000a2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3324      	adds	r3, #36	; 0x24
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fcf2 	bl	8000a2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001048:	f7ff febc 	bl	8000dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800104c:	2301      	movs	r3, #1
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000ed04 	.word	0xe000ed04

0800105c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af02      	add	r7, sp, #8
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	4613      	mov	r3, r2
 8001068:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <xQueueGenericCreate+0x28>
 8001070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	e7fe      	b.n	8001082 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3348      	adds	r3, #72	; 0x48
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff56 	bl	8000f44 <pvPortMalloc>
 8001098:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00d      	beq.n	80010bc <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3348      	adds	r3, #72	; 0x48
 80010a8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80010aa:	79fa      	ldrb	r2, [r7, #7]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f805 	bl	80010c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80010bc:	69bb      	ldr	r3, [r7, #24]
	}
 80010be:	4618      	mov	r0, r3
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e002      	b.n	80010e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80010f4:	2101      	movs	r1, #1
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f7ff ff48 	bl	8000f8c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111c:	2b00      	cmp	r3, #0
 800111e:	d109      	bne.n	8001134 <xQueueGenericSend+0x30>
 8001120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001124:	f383 8811 	msr	BASEPRI, r3
 8001128:	f3bf 8f6f 	isb	sy
 800112c:	f3bf 8f4f 	dsb	sy
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
 8001132:	e7fe      	b.n	8001132 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <xQueueGenericSend+0x3e>
 800113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <xQueueGenericSend+0x42>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <xQueueGenericSend+0x44>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <xQueueGenericSend+0x5c>
 800114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	e7fe      	b.n	800115e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d103      	bne.n	800116e <xQueueGenericSend+0x6a>
 8001166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <xQueueGenericSend+0x6e>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <xQueueGenericSend+0x70>
 8001172:	2300      	movs	r3, #0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d109      	bne.n	800118c <xQueueGenericSend+0x88>
 8001178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800117c:	f383 8811 	msr	BASEPRI, r3
 8001180:	f3bf 8f6f 	isb	sy
 8001184:	f3bf 8f4f 	dsb	sy
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	e7fe      	b.n	800118a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800118c:	f001 f8f0 	bl	8002370 <xTaskGetSchedulerState>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <xQueueGenericSend+0x98>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <xQueueGenericSend+0x9c>
 800119c:	2301      	movs	r3, #1
 800119e:	e000      	b.n	80011a2 <xQueueGenericSend+0x9e>
 80011a0:	2300      	movs	r3, #0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <xQueueGenericSend+0xb6>
 80011a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011aa:	f383 8811 	msr	BASEPRI, r3
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	f3bf 8f4f 	dsb	sy
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	e7fe      	b.n	80011b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011ba:	f7ff fdd5 	bl	8000d68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d302      	bcc.n	80011d0 <xQueueGenericSend+0xcc>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d129      	bne.n	8001224 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	68b9      	ldr	r1, [r7, #8]
 80011d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d6:	f000 fa25 	bl	8001624 <prvCopyDataToQueue>
 80011da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d010      	beq.n	8001206 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	3324      	adds	r3, #36	; 0x24
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 ff29 	bl	8002040 <xTaskRemoveFromEventList>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <xQueueGenericSend+0x1f0>)
 80011f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	f3bf 8f6f 	isb	sy
 8001204:	e00a      	b.n	800121c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d007      	beq.n	800121c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800120c:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <xQueueGenericSend+0x1f0>)
 800120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800121c:	f7ff fdd2 	bl	8000dc4 <vPortExitCritical>
				return pdPASS;
 8001220:	2301      	movs	r3, #1
 8001222:	e063      	b.n	80012ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800122a:	f7ff fdcb 	bl	8000dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800122e:	2300      	movs	r3, #0
 8001230:	e05c      	b.n	80012ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	2b00      	cmp	r3, #0
 8001236:	d106      	bne.n	8001246 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4618      	mov	r0, r3
 800123e:	f000 ff61 	bl	8002104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001242:	2301      	movs	r3, #1
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001246:	f7ff fdbd 	bl	8000dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800124a:	f000 fce1 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800124e:	f7ff fd8b 	bl	8000d68 <vPortEnterCritical>
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001258:	b25b      	sxtb	r3, r3
 800125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125e:	d103      	bne.n	8001268 <xQueueGenericSend+0x164>
 8001260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800126e:	b25b      	sxtb	r3, r3
 8001270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001274:	d103      	bne.n	800127e <xQueueGenericSend+0x17a>
 8001276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800127e:	f7ff fda1 	bl	8000dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001282:	1d3a      	adds	r2, r7, #4
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 ff50 	bl	8002130 <xTaskCheckForTimeOut>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d124      	bne.n	80012e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001298:	f000 fabc 	bl	8001814 <prvIsQueueFull>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d018      	beq.n	80012d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	3310      	adds	r3, #16
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fe7a 	bl	8001fa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80012b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012b2:	f000 fa47 	bl	8001744 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80012b6:	f000 fcb9 	bl	8001c2c <xTaskResumeAll>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f af7c 	bne.w	80011ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <xQueueGenericSend+0x1f0>)
 80012c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f3bf 8f4f 	dsb	sy
 80012ce:	f3bf 8f6f 	isb	sy
 80012d2:	e772      	b.n	80011ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80012d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012d6:	f000 fa35 	bl	8001744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80012da:	f000 fca7 	bl	8001c2c <xTaskResumeAll>
 80012de:	e76c      	b.n	80011ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80012e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012e2:	f000 fa2f 	bl	8001744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012e6:	f000 fca1 	bl	8001c2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80012ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3738      	adds	r7, #56	; 0x38
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	e000ed04 	.word	0xe000ed04

080012f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800130a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800130c:	2b00      	cmp	r3, #0
 800130e:	d109      	bne.n	8001324 <xQueueGenericSendFromISR+0x2c>
 8001310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001314:	f383 8811 	msr	BASEPRI, r3
 8001318:	f3bf 8f6f 	isb	sy
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
 8001322:	e7fe      	b.n	8001322 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d103      	bne.n	8001332 <xQueueGenericSendFromISR+0x3a>
 800132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <xQueueGenericSendFromISR+0x3e>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <xQueueGenericSendFromISR+0x40>
 8001336:	2300      	movs	r3, #0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <xQueueGenericSendFromISR+0x58>
 800133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001340:	f383 8811 	msr	BASEPRI, r3
 8001344:	f3bf 8f6f 	isb	sy
 8001348:	f3bf 8f4f 	dsb	sy
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
 800134e:	e7fe      	b.n	800134e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d103      	bne.n	800135e <xQueueGenericSendFromISR+0x66>
 8001356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <xQueueGenericSendFromISR+0x6a>
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <xQueueGenericSendFromISR+0x6c>
 8001362:	2300      	movs	r3, #0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d109      	bne.n	800137c <xQueueGenericSendFromISR+0x84>
 8001368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136c:	f383 8811 	msr	BASEPRI, r3
 8001370:	f3bf 8f6f 	isb	sy
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	623b      	str	r3, [r7, #32]
 800137a:	e7fe      	b.n	800137a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800137c:	f7ff fda6 	bl	8000ecc <vPortValidateInterruptPriority>
	__asm volatile
 8001380:	f3ef 8211 	mrs	r2, BASEPRI
 8001384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001388:	f383 8811 	msr	BASEPRI, r3
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f3bf 8f4f 	dsb	sy
 8001394:	61fa      	str	r2, [r7, #28]
 8001396:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001398:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800139c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800139e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d302      	bcc.n	80013ae <xQueueGenericSendFromISR+0xb6>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d12f      	bne.n	800140e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80013ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013c4:	f000 f92e 	bl	8001624 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80013c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d112      	bne.n	80013f8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d016      	beq.n	8001408 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013dc:	3324      	adds	r3, #36	; 0x24
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fe2e 	bl	8002040 <xTaskRemoveFromEventList>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00e      	beq.n	8001408 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80013f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b25a      	sxtb	r2, r3
 8001402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001408:	2301      	movs	r3, #1
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800140c:	e001      	b.n	8001412 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800140e:	2300      	movs	r3, #0
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001414:	617b      	str	r3, [r7, #20]
	__asm volatile
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800141c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800141e:	4618      	mov	r0, r3
 8001420:	3740      	adds	r7, #64	; 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <xQueueReceive+0x2e>
	__asm volatile
 8001442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001446:	f383 8811 	msr	BASEPRI, r3
 800144a:	f3bf 8f6f 	isb	sy
 800144e:	f3bf 8f4f 	dsb	sy
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	e7fe      	b.n	8001454 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <xQueueReceive+0x3c>
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <xQueueReceive+0x40>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <xQueueReceive+0x42>
 8001468:	2300      	movs	r3, #0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <xQueueReceive+0x5a>
 800146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	e7fe      	b.n	8001480 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001482:	f000 ff75 	bl	8002370 <xTaskGetSchedulerState>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <xQueueReceive+0x6a>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <xQueueReceive+0x6e>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <xQueueReceive+0x70>
 8001496:	2300      	movs	r3, #0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d109      	bne.n	80014b0 <xQueueReceive+0x88>
 800149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a0:	f383 8811 	msr	BASEPRI, r3
 80014a4:	f3bf 8f6f 	isb	sy
 80014a8:	f3bf 8f4f 	dsb	sy
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	e7fe      	b.n	80014ae <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80014b0:	f7ff fc5a 	bl	8000d68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d01f      	beq.n	8001500 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c4:	f000 f918 	bl	80016f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00f      	beq.n	80014f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	3310      	adds	r3, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fdaf 	bl	8002040 <xTaskRemoveFromEventList>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80014e8:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <xQueueReceive+0x1b4>)
 80014ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80014f8:	f7ff fc64 	bl	8000dc4 <vPortExitCritical>
				return pdPASS;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e069      	b.n	80015d4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001506:	f7ff fc5d 	bl	8000dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800150a:	2300      	movs	r3, #0
 800150c:	e062      	b.n	80015d4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	2b00      	cmp	r3, #0
 8001512:	d106      	bne.n	8001522 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fdf3 	bl	8002104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800151e:	2301      	movs	r3, #1
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001522:	f7ff fc4f 	bl	8000dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001526:	f000 fb73 	bl	8001c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800152a:	f7ff fc1d 	bl	8000d68 <vPortEnterCritical>
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001534:	b25b      	sxtb	r3, r3
 8001536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153a:	d103      	bne.n	8001544 <xQueueReceive+0x11c>
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800154a:	b25b      	sxtb	r3, r3
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d103      	bne.n	800155a <xQueueReceive+0x132>
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800155a:	f7ff fc33 	bl	8000dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fde2 	bl	8002130 <xTaskCheckForTimeOut>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d123      	bne.n	80015ba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001574:	f000 f938 	bl	80017e8 <prvIsQueueEmpty>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d017      	beq.n	80015ae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001580:	3324      	adds	r3, #36	; 0x24
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fd0c 	bl	8001fa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800158c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800158e:	f000 f8d9 	bl	8001744 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001592:	f000 fb4b 	bl	8001c2c <xTaskResumeAll>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d189      	bne.n	80014b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <xQueueReceive+0x1b4>)
 800159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f3bf 8f4f 	dsb	sy
 80015a8:	f3bf 8f6f 	isb	sy
 80015ac:	e780      	b.n	80014b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80015ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015b0:	f000 f8c8 	bl	8001744 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80015b4:	f000 fb3a 	bl	8001c2c <xTaskResumeAll>
 80015b8:	e77a      	b.n	80014b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80015ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015bc:	f000 f8c2 	bl	8001744 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80015c0:	f000 fb34 	bl	8001c2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015c6:	f000 f90f 	bl	80017e8 <prvIsQueueEmpty>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f43f af6f 	beq.w	80014b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80015d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3730      	adds	r7, #48	; 0x30
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	e000ed04 	.word	0xe000ed04

080015e0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <uxQueueSpacesAvailable+0x26>
 80015f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f6:	f383 8811 	msr	BASEPRI, r3
 80015fa:	f3bf 8f6f 	isb	sy
 80015fe:	f3bf 8f4f 	dsb	sy
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e7fe      	b.n	8001604 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8001606:	f7ff fbaf 	bl	8000d68 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8001616:	f7ff fbd5 	bl	8000dc4 <vPortExitCritical>

	return uxReturn;
 800161a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001638:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10d      	bne.n	800165e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d14d      	bne.n	80016e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	4618      	mov	r0, r3
 8001650:	f000 feac 	bl	80023ac <xTaskPriorityDisinherit>
 8001654:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	e043      	b.n	80016e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d119      	bne.n	8001698 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6858      	ldr	r0, [r3, #4]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	461a      	mov	r2, r3
 800166e:	68b9      	ldr	r1, [r7, #8]
 8001670:	f003 fabc 	bl	8004bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	441a      	add	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	429a      	cmp	r2, r3
 800168c:	d32b      	bcc.n	80016e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	e026      	b.n	80016e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68d8      	ldr	r0, [r3, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	461a      	mov	r2, r3
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	f003 faa2 	bl	8004bec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	425b      	negs	r3, r3
 80016b2:	441a      	add	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	425b      	negs	r3, r3
 80016ce:	441a      	add	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d105      	bne.n	80016e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80016ee:	697b      	ldr	r3, [r7, #20]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d018      	beq.n	800173c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	441a      	add	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d303      	bcc.n	800172c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68d9      	ldr	r1, [r3, #12]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	461a      	mov	r2, r3
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f003 fa58 	bl	8004bec <memcpy>
	}
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800174c:	f7ff fb0c 	bl	8000d68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001756:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001758:	e011      	b.n	800177e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	2b00      	cmp	r3, #0
 8001760:	d012      	beq.n	8001788 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3324      	adds	r3, #36	; 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fc6a 	bl	8002040 <xTaskRemoveFromEventList>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001772:	f000 fd3d 	bl	80021f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3b01      	subs	r3, #1
 800177a:	b2db      	uxtb	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	2b00      	cmp	r3, #0
 8001784:	dce9      	bgt.n	800175a <prvUnlockQueue+0x16>
 8001786:	e000      	b.n	800178a <prvUnlockQueue+0x46>
					break;
 8001788:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	22ff      	movs	r2, #255	; 0xff
 800178e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001792:	f7ff fb17 	bl	8000dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001796:	f7ff fae7 	bl	8000d68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80017a2:	e011      	b.n	80017c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d012      	beq.n	80017d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3310      	adds	r3, #16
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fc45 	bl	8002040 <xTaskRemoveFromEventList>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80017bc:	f000 fd18 	bl	80021f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80017c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	dce9      	bgt.n	80017a4 <prvUnlockQueue+0x60>
 80017d0:	e000      	b.n	80017d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80017d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	22ff      	movs	r2, #255	; 0xff
 80017d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80017dc:	f7ff faf2 	bl	8000dc4 <vPortExitCritical>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017f0:	f7ff faba 	bl	8000d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d102      	bne.n	8001802 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80017fc:	2301      	movs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e001      	b.n	8001806 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001806:	f7ff fadd 	bl	8000dc4 <vPortExitCritical>

	return xReturn;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800181c:	f7ff faa4 	bl	8000d68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	429a      	cmp	r2, r3
 800182a:	d102      	bne.n	8001832 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800182c:	2301      	movs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e001      	b.n	8001836 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001836:	f7ff fac5 	bl	8000dc4 <vPortExitCritical>

	return xReturn;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001854:	f7ff fa88 	bl	8000d68 <vPortEnterCritical>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800185e:	b25b      	sxtb	r3, r3
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d103      	bne.n	800186e <vQueueWaitForMessageRestricted+0x2a>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d103      	bne.n	8001884 <vQueueWaitForMessageRestricted+0x40>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001884:	f7ff fa9e 	bl	8000dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2b00      	cmp	r3, #0
 800188e:	d106      	bne.n	800189e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3324      	adds	r3, #36	; 0x24
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	4618      	mov	r0, r3
 800189a:	f000 fba7 	bl	8001fec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff50 	bl	8001744 <prvUnlockQueue>
	}
 80018a4:	bf00      	nop
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fb3f 	bl	8000f44 <pvPortMalloc>
 80018c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00e      	beq.n	80018ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80018ce:	2050      	movs	r0, #80	; 0x50
 80018d0:	f7ff fb38 	bl	8000f44 <pvPortMalloc>
 80018d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	e005      	b.n	80018f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7ff fb3f 	bl	8000f68 <vPortFree>
 80018ea:	e001      	b.n	80018f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d013      	beq.n	800191e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9303      	str	r3, [sp, #12]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f80e 	bl	800192e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001912:	69f8      	ldr	r0, [r7, #28]
 8001914:	f000 f892 	bl	8001a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	e002      	b.n	8001924 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001924:	69bb      	ldr	r3, [r7, #24]
	}
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001946:	3b01      	subs	r3, #1
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f023 0307 	bic.w	r3, r3, #7
 8001954:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <prvInitialiseNewTask+0x46>
 8001960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e7fe      	b.n	8001972 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d01f      	beq.n	80019ba <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	e012      	b.n	80019a6 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	4413      	add	r3, r2
 8001986:	7819      	ldrb	r1, [r3, #0]
 8001988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4413      	add	r3, r2
 800198e:	3334      	adds	r3, #52	; 0x34
 8001990:	460a      	mov	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4413      	add	r3, r2
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b09      	cmp	r3, #9
 80019aa:	d9e9      	bls.n	8001980 <prvInitialiseNewTask+0x52>
 80019ac:	e000      	b.n	80019b0 <prvInitialiseNewTask+0x82>
			{
				break;
 80019ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80019b8:	e003      	b.n	80019c2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d901      	bls.n	80019cc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80019cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80019d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80019de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e0:	3304      	adds	r3, #4
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff f841 	bl	8000a6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	3318      	adds	r3, #24
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff f83c 	bl	8000a6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fa:	f1c3 0202 	rsb	r2, r3, #2
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f7ff f8b6 	bl	8000b8c <pxPortInitialiseStack>
 8001a20:	4602      	mov	r2, r0
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a44:	f7ff f990 	bl	8000d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <prvAddNewTaskToReadyList+0xb8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a29      	ldr	r2, [pc, #164]	; (8001af4 <prvAddNewTaskToReadyList+0xb8>)
 8001a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <prvAddNewTaskToReadyList+0xbc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a5a:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <prvAddNewTaskToReadyList+0xbc>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <prvAddNewTaskToReadyList+0xb8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d110      	bne.n	8001a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001a68:	f000 fbe6 	bl	8002238 <prvInitialiseTaskLists>
 8001a6c:	e00d      	b.n	8001a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <prvAddNewTaskToReadyList+0xc0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <prvAddNewTaskToReadyList+0xbc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d802      	bhi.n	8001a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001a84:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <prvAddNewTaskToReadyList+0xbc>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <prvAddNewTaskToReadyList+0xc4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <prvAddNewTaskToReadyList+0xc4>)
 8001a92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2201      	movs	r2, #1
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <prvAddNewTaskToReadyList+0xc8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <prvAddNewTaskToReadyList+0xc8>)
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4a15      	ldr	r2, [pc, #84]	; (8001b08 <prvAddNewTaskToReadyList+0xcc>)
 8001ab4:	441a      	add	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7fe ffe0 	bl	8000a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001ac2:	f7ff f97f 	bl	8000dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <prvAddNewTaskToReadyList+0xc0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00e      	beq.n	8001aec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <prvAddNewTaskToReadyList+0xbc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <prvAddNewTaskToReadyList+0xd0>)
 8001ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000190 	.word	0x20000190
 8001af8:	200000f4 	.word	0x200000f4
 8001afc:	2000019c 	.word	0x2000019c
 8001b00:	200001ac 	.word	0x200001ac
 8001b04:	20000198 	.word	0x20000198
 8001b08:	200000f8 	.word	0x200000f8
 8001b0c:	e000ed04 	.word	0xe000ed04

08001b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d016      	beq.n	8001b50 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <vTaskDelay+0x60>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <vTaskDelay+0x2e>
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	e7fe      	b.n	8001b3c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001b3e:	f000 f867 	bl	8001c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b42:	2100      	movs	r1, #0
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fcb5 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b4a:	f000 f86f 	bl	8001c2c <xTaskResumeAll>
 8001b4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <vTaskDelay+0x64>)
 8001b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200001b8 	.word	0x200001b8
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <vTaskStartScheduler+0x80>)
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2300      	movs	r3, #0
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	2246      	movs	r2, #70	; 0x46
 8001b8a:	491c      	ldr	r1, [pc, #112]	; (8001bfc <vTaskStartScheduler+0x84>)
 8001b8c:	481c      	ldr	r0, [pc, #112]	; (8001c00 <vTaskStartScheduler+0x88>)
 8001b8e:	f7ff fe8d 	bl	80018ac <xTaskCreate>
 8001b92:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001b9a:	f000 fcf1 	bl	8002580 <xTimerCreateTimerTask>
 8001b9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d115      	bne.n	8001bd2 <vTaskStartScheduler+0x5a>
 8001ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <vTaskStartScheduler+0x8c>)
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <vTaskStartScheduler+0x90>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <vTaskStartScheduler+0x94>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bcc:	f7ff f85c 	bl	8000c88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001bd0:	e00d      	b.n	8001bee <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d109      	bne.n	8001bee <vTaskStartScheduler+0x76>
 8001bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bde:	f383 8811 	msr	BASEPRI, r3
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	f3bf 8f4f 	dsb	sy
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	e7fe      	b.n	8001bec <vTaskStartScheduler+0x74>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200001b4 	.word	0x200001b4
 8001bfc:	080055c4 	.word	0x080055c4
 8001c00:	08002209 	.word	0x08002209
 8001c04:	200001b0 	.word	0x200001b0
 8001c08:	2000019c 	.word	0x2000019c
 8001c0c:	20000194 	.word	0x20000194

08001c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <vTaskSuspendAll+0x18>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <vTaskSuspendAll+0x18>)
 8001c1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	200001b8 	.word	0x200001b8

08001c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d109      	bne.n	8001c56 <xTaskResumeAll+0x2a>
 8001c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	f3bf 8f6f 	isb	sy
 8001c4e:	f3bf 8f4f 	dsb	sy
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	e7fe      	b.n	8001c54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c56:	f7ff f887 	bl	8000d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c5a:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <xTaskResumeAll+0x114>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d161      	bne.n	8001d30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <xTaskResumeAll+0x118>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05d      	beq.n	8001d30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c74:	e02e      	b.n	8001cd4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <xTaskResumeAll+0x11c>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3318      	adds	r3, #24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff58 	bl	8000b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe ff53 	bl	8000b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <xTaskResumeAll+0x120>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <xTaskResumeAll+0x120>)
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <xTaskResumeAll+0x124>)
 8001cb2:	441a      	add	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7fe fee1 	bl	8000a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <xTaskResumeAll+0x128>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <xTaskResumeAll+0x11c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1cc      	bne.n	8001c76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ce2:	f000 fb25 	bl	8002330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <xTaskResumeAll+0x130>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001cf2:	f000 f845 	bl	8001d80 <xTaskIncrementTick>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f1      	bne.n	8001cf2 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 8001d0e:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <xTaskResumeAll+0x130>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <xTaskResumeAll+0x12c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <xTaskResumeAll+0x134>)
 8001d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d30:	f7ff f848 	bl	8000dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8001d34:	68bb      	ldr	r3, [r7, #8]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200001b8 	.word	0x200001b8
 8001d44:	20000190 	.word	0x20000190
 8001d48:	20000150 	.word	0x20000150
 8001d4c:	20000198 	.word	0x20000198
 8001d50:	200000f8 	.word	0x200000f8
 8001d54:	200000f4 	.word	0x200000f4
 8001d58:	200001a4 	.word	0x200001a4
 8001d5c:	200001a0 	.word	0x200001a0
 8001d60:	e000ed04 	.word	0xe000ed04

08001d64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <xTaskGetTickCount+0x18>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000194 	.word	0x20000194

08001d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <xTaskIncrementTick+0x144>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 808d 	bne.w	8001eae <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <xTaskIncrementTick+0x148>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <xTaskIncrementTick+0x148>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11f      	bne.n	8001de8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <xTaskIncrementTick+0x14c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <xTaskIncrementTick+0x46>
 8001db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db6:	f383 8811 	msr	BASEPRI, r3
 8001dba:	f3bf 8f6f 	isb	sy
 8001dbe:	f3bf 8f4f 	dsb	sy
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	e7fe      	b.n	8001dc4 <xTaskIncrementTick+0x44>
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <xTaskIncrementTick+0x14c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <xTaskIncrementTick+0x150>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a3e      	ldr	r2, [pc, #248]	; (8001ecc <xTaskIncrementTick+0x14c>)
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4a3e      	ldr	r2, [pc, #248]	; (8001ed0 <xTaskIncrementTick+0x150>)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <xTaskIncrementTick+0x154>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <xTaskIncrementTick+0x154>)
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	f000 faa4 	bl	8002330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <xTaskIncrementTick+0x158>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d348      	bcc.n	8001e84 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <xTaskIncrementTick+0x14c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dfc:	4b36      	ldr	r3, [pc, #216]	; (8001ed8 <xTaskIncrementTick+0x158>)
 8001dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001e02:	601a      	str	r2, [r3, #0]
					break;
 8001e04:	e03e      	b.n	8001e84 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <xTaskIncrementTick+0x14c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d203      	bcs.n	8001e26 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <xTaskIncrementTick+0x158>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e24:	e02e      	b.n	8001e84 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fe84 	bl	8000b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3318      	adds	r3, #24
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fe7b 	bl	8000b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	2201      	movs	r2, #1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <xTaskIncrementTick+0x15c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	4a22      	ldr	r2, [pc, #136]	; (8001edc <xTaskIncrementTick+0x15c>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <xTaskIncrementTick+0x160>)
 8001e62:	441a      	add	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f7fe fe09 	bl	8000a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <xTaskIncrementTick+0x164>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d3b9      	bcc.n	8001df2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e82:	e7b6      	b.n	8001df2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <xTaskIncrementTick+0x164>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8a:	4915      	ldr	r1, [pc, #84]	; (8001ee0 <xTaskIncrementTick+0x160>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d901      	bls.n	8001ea0 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <xTaskIncrementTick+0x168>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e004      	b.n	8001eb8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <xTaskIncrementTick+0x16c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <xTaskIncrementTick+0x16c>)
 8001eb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001eb8:	697b      	ldr	r3, [r7, #20]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200001b8 	.word	0x200001b8
 8001ec8:	20000194 	.word	0x20000194
 8001ecc:	20000148 	.word	0x20000148
 8001ed0:	2000014c 	.word	0x2000014c
 8001ed4:	200001a8 	.word	0x200001a8
 8001ed8:	200001b0 	.word	0x200001b0
 8001edc:	20000198 	.word	0x20000198
 8001ee0:	200000f8 	.word	0x200000f8
 8001ee4:	200000f4 	.word	0x200000f4
 8001ee8:	200001a4 	.word	0x200001a4
 8001eec:	200001a0 	.word	0x200001a0

08001ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <vTaskSwitchContext+0xa0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <vTaskSwitchContext+0xa4>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f04:	e03e      	b.n	8001f84 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001f06:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <vTaskSwitchContext+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <vTaskSwitchContext+0xa8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f1a:	7afb      	ldrb	r3, [r7, #11]
 8001f1c:	f1c3 031f 	rsb	r3, r3, #31
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	491e      	ldr	r1, [pc, #120]	; (8001f9c <vTaskSwitchContext+0xac>)
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <vTaskSwitchContext+0x5a>
	__asm volatile
 8001f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3a:	f383 8811 	msr	BASEPRI, r3
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f3bf 8f4f 	dsb	sy
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e7fe      	b.n	8001f48 <vTaskSwitchContext+0x58>
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <vTaskSwitchContext+0xac>)
 8001f56:	4413      	add	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d104      	bne.n	8001f7a <vTaskSwitchContext+0x8a>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <vTaskSwitchContext+0xb0>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	371c      	adds	r7, #28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200001b8 	.word	0x200001b8
 8001f94:	200001a4 	.word	0x200001a4
 8001f98:	20000198 	.word	0x20000198
 8001f9c:	200000f8 	.word	0x200000f8
 8001fa0:	200000f4 	.word	0x200000f4

08001fa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <vTaskPlaceOnEventList+0x24>
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e7fe      	b.n	8001fc6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <vTaskPlaceOnEventList+0x44>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3318      	adds	r3, #24
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fd79 	bl	8000ac8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	6838      	ldr	r0, [r7, #0]
 8001fda:	f000 fa6b 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200000f4 	.word	0x200000f4

08001fec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <vTaskPlaceOnEventListRestricted+0x26>
 8001ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002002:	f383 8811 	msr	BASEPRI, r3
 8002006:	f3bf 8f6f 	isb	sy
 800200a:	f3bf 8f4f 	dsb	sy
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	e7fe      	b.n	8002010 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <vTaskPlaceOnEventListRestricted+0x50>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3318      	adds	r3, #24
 8002018:	4619      	mov	r1, r3
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f7fe fd31 	bl	8000a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68b8      	ldr	r0, [r7, #8]
 8002030:	f000 fa40 	bl	80024b4 <prvAddCurrentTaskToDelayedList>
	}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200000f4 	.word	0x200000f4

08002040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <xTaskRemoveFromEventList+0x2a>
 8002056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205a:	f383 8811 	msr	BASEPRI, r3
 800205e:	f3bf 8f6f 	isb	sy
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e7fe      	b.n	8002068 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	3318      	adds	r3, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fd62 	bl	8000b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <xTaskRemoveFromEventList+0xac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d11c      	bne.n	80020b6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	3304      	adds	r3, #4
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fd59 	bl	8000b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	2201      	movs	r2, #1
 800208c:	409a      	lsls	r2, r3
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <xTaskRemoveFromEventList+0xb0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <xTaskRemoveFromEventList+0xb0>)
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <xTaskRemoveFromEventList+0xb4>)
 80020a6:	441a      	add	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3304      	adds	r3, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f7fe fce7 	bl	8000a82 <vListInsertEnd>
 80020b4:	e005      	b.n	80020c2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3318      	adds	r3, #24
 80020ba:	4619      	mov	r1, r3
 80020bc:	480e      	ldr	r0, [pc, #56]	; (80020f8 <xTaskRemoveFromEventList+0xb8>)
 80020be:	f7fe fce0 	bl	8000a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <xTaskRemoveFromEventList+0xbc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d905      	bls.n	80020dc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80020d0:	2301      	movs	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <xTaskRemoveFromEventList+0xc0>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e001      	b.n	80020e0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80020e0:	697b      	ldr	r3, [r7, #20]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001b8 	.word	0x200001b8
 80020f0:	20000198 	.word	0x20000198
 80020f4:	200000f8 	.word	0x200000f8
 80020f8:	20000150 	.word	0x20000150
 80020fc:	200000f4 	.word	0x200000f4
 8002100:	200001a4 	.word	0x200001a4

08002104 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <vTaskInternalSetTimeOutState+0x24>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <vTaskInternalSetTimeOutState+0x28>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	605a      	str	r2, [r3, #4]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200001a8 	.word	0x200001a8
 800212c:	20000194 	.word	0x20000194

08002130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <xTaskCheckForTimeOut+0x24>
 8002140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002144:	f383 8811 	msr	BASEPRI, r3
 8002148:	f3bf 8f6f 	isb	sy
 800214c:	f3bf 8f4f 	dsb	sy
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e7fe      	b.n	8002152 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <xTaskCheckForTimeOut+0x3e>
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e7fe      	b.n	800216c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800216e:	f7fe fdfb 	bl	8000d68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <xTaskCheckForTimeOut+0xb8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d102      	bne.n	8002192 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	e023      	b.n	80021da <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <xTaskCheckForTimeOut+0xbc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d007      	beq.n	80021ae <xTaskCheckForTimeOut+0x7e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d802      	bhi.n	80021ae <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e015      	b.n	80021da <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d90b      	bls.n	80021d0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad2      	subs	r2, r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff9d 	bl	8002104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e004      	b.n	80021da <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80021da:	f7fe fdf3 	bl	8000dc4 <vPortExitCritical>

	return xReturn;
 80021de:	69fb      	ldr	r3, [r7, #28]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000194 	.word	0x20000194
 80021ec:	200001a8 	.word	0x200001a8

080021f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <vTaskMissedYield+0x14>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	200001a4 	.word	0x200001a4

08002208 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002210:	f000 f852 	bl	80022b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <prvIdleTask+0x28>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d9f9      	bls.n	8002210 <prvIdleTask+0x8>
			{
				taskYIELD();
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <prvIdleTask+0x2c>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800222c:	e7f0      	b.n	8002210 <prvIdleTask+0x8>
 800222e:	bf00      	nop
 8002230:	200000f8 	.word	0x200000f8
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	e00c      	b.n	800225e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <prvInitialiseTaskLists+0x60>)
 8002250:	4413      	add	r3, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fbea 	bl	8000a2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3301      	adds	r3, #1
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d9ef      	bls.n	8002244 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <prvInitialiseTaskLists+0x64>)
 8002266:	f7fe fbe1 	bl	8000a2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <prvInitialiseTaskLists+0x68>)
 800226c:	f7fe fbde 	bl	8000a2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <prvInitialiseTaskLists+0x6c>)
 8002272:	f7fe fbdb 	bl	8000a2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002276:	480c      	ldr	r0, [pc, #48]	; (80022a8 <prvInitialiseTaskLists+0x70>)
 8002278:	f7fe fbd8 	bl	8000a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <prvInitialiseTaskLists+0x74>)
 800227e:	f7fe fbd5 	bl	8000a2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <prvInitialiseTaskLists+0x78>)
 8002284:	4a05      	ldr	r2, [pc, #20]	; (800229c <prvInitialiseTaskLists+0x64>)
 8002286:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <prvInitialiseTaskLists+0x7c>)
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <prvInitialiseTaskLists+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200000f8 	.word	0x200000f8
 800229c:	20000120 	.word	0x20000120
 80022a0:	20000134 	.word	0x20000134
 80022a4:	20000150 	.word	0x20000150
 80022a8:	20000164 	.word	0x20000164
 80022ac:	2000017c 	.word	0x2000017c
 80022b0:	20000148 	.word	0x20000148
 80022b4:	2000014c 	.word	0x2000014c

080022b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022be:	e019      	b.n	80022f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80022c0:	f7fe fd52 	bl	8000d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <prvCheckTasksWaitingTermination+0x4c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fc31 	bl	8000b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <prvCheckTasksWaitingTermination+0x50>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3b01      	subs	r3, #1
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <prvCheckTasksWaitingTermination+0x50>)
 80022de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <prvCheckTasksWaitingTermination+0x54>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	4a09      	ldr	r2, [pc, #36]	; (800230c <prvCheckTasksWaitingTermination+0x54>)
 80022e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022ea:	f7fe fd6b 	bl	8000dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f80e 	bl	8002310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <prvCheckTasksWaitingTermination+0x54>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1e1      	bne.n	80022c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000164 	.word	0x20000164
 8002308:	20000190 	.word	0x20000190
 800230c:	20000178 	.word	0x20000178

08002310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fe23 	bl	8000f68 <vPortFree>
			vPortFree( pxTCB );
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fe20 	bl	8000f68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002336:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <prvResetNextTaskUnblockTime+0x38>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d104      	bne.n	800234a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <prvResetNextTaskUnblockTime+0x3c>)
 8002342:	f04f 32ff 	mov.w	r2, #4294967295
 8002346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002348:	e008      	b.n	800235c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <prvResetNextTaskUnblockTime+0x38>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <prvResetNextTaskUnblockTime+0x3c>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000148 	.word	0x20000148
 800236c:	200001b0 	.word	0x200001b0

08002370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <xTaskGetSchedulerState+0x34>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800237e:	2301      	movs	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	e008      	b.n	8002396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <xTaskGetSchedulerState+0x38>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800238c:	2302      	movs	r3, #2
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	e001      	b.n	8002396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002396:	687b      	ldr	r3, [r7, #4]
	}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000019c 	.word	0x2000019c
 80023a8:	200001b8 	.word	0x200001b8

080023ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d06c      	beq.n	800249c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <xTaskPriorityDisinherit+0xfc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d009      	beq.n	80023e0 <xTaskPriorityDisinherit+0x34>
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e7fe      	b.n	80023de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <xTaskPriorityDisinherit+0x50>
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	e7fe      	b.n	80023fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	429a      	cmp	r2, r3
 8002410:	d044      	beq.n	800249c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	2b00      	cmp	r3, #0
 8002418:	d140      	bne.n	800249c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3304      	adds	r3, #4
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fb8a 	bl	8000b38 <uxListRemove>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	491f      	ldr	r1, [pc, #124]	; (80024ac <xTaskPriorityDisinherit+0x100>)
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10a      	bne.n	8002456 <xTaskPriorityDisinherit+0xaa>
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	2201      	movs	r2, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <xTaskPriorityDisinherit+0x104>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4013      	ands	r3, r2
 8002452:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <xTaskPriorityDisinherit+0x104>)
 8002454:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f1c3 0202 	rsb	r2, r3, #2
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	2201      	movs	r2, #1
 8002470:	409a      	lsls	r2, r3
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <xTaskPriorityDisinherit+0x104>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <xTaskPriorityDisinherit+0x104>)
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4a08      	ldr	r2, [pc, #32]	; (80024ac <xTaskPriorityDisinherit+0x100>)
 800248a:	441a      	add	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f7fe faf5 	bl	8000a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800249c:	697b      	ldr	r3, [r7, #20]
	}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200000f4 	.word	0x200000f4
 80024ac:	200000f8 	.word	0x200000f8
 80024b0:	20000198 	.word	0x20000198

080024b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <prvAddCurrentTaskToDelayedList+0xb0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024c4:	4b28      	ldr	r3, [pc, #160]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3304      	adds	r3, #4
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fb34 	bl	8000b38 <uxListRemove>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10b      	bne.n	80024ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024d6:	4b24      	ldr	r3, [pc, #144]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43da      	mvns	r2, r3
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <prvAddCurrentTaskToDelayedList+0xb8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4013      	ands	r3, r2
 80024ea:	4a20      	ldr	r2, [pc, #128]	; (800256c <prvAddCurrentTaskToDelayedList+0xb8>)
 80024ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d10a      	bne.n	800250c <prvAddCurrentTaskToDelayedList+0x58>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3304      	adds	r3, #4
 8002502:	4619      	mov	r1, r3
 8002504:	481a      	ldr	r0, [pc, #104]	; (8002570 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002506:	f7fe fabc 	bl	8000a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800250a:	e026      	b.n	800255a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002514:	4b14      	ldr	r3, [pc, #80]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d209      	bcs.n	8002538 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3304      	adds	r3, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f7fe fac9 	bl	8000ac8 <vListInsert>
}
 8002536:	e010      	b.n	800255a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <prvAddCurrentTaskToDelayedList+0xc4>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <prvAddCurrentTaskToDelayedList+0xb4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3304      	adds	r3, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4610      	mov	r0, r2
 8002546:	f7fe fabf 	bl	8000ac8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <prvAddCurrentTaskToDelayedList+0xc8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	429a      	cmp	r2, r3
 8002552:	d202      	bcs.n	800255a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	6013      	str	r3, [r2, #0]
}
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000194 	.word	0x20000194
 8002568:	200000f4 	.word	0x200000f4
 800256c:	20000198 	.word	0x20000198
 8002570:	2000017c 	.word	0x2000017c
 8002574:	2000014c 	.word	0x2000014c
 8002578:	20000148 	.word	0x20000148
 800257c:	200001b0 	.word	0x200001b0

08002580 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800258a:	f000 facd 	bl	8002b28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <xTimerCreateTimerTask+0x50>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <xTimerCreateTimerTask+0x54>)
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2303      	movs	r3, #3
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	2246      	movs	r2, #70	; 0x46
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <xTimerCreateTimerTask+0x58>)
 80025a4:	480d      	ldr	r0, [pc, #52]	; (80025dc <xTimerCreateTimerTask+0x5c>)
 80025a6:	f7ff f981 	bl	80018ac <xTaskCreate>
 80025aa:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <xTimerCreateTimerTask+0x46>
 80025b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b6:	f383 8811 	msr	BASEPRI, r3
 80025ba:	f3bf 8f6f 	isb	sy
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	e7fe      	b.n	80025c4 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80025c6:	687b      	ldr	r3, [r7, #4]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200001ec 	.word	0x200001ec
 80025d4:	200001f0 	.word	0x200001f0
 80025d8:	080055cc 	.word	0x080055cc
 80025dc:	08002711 	.word	0x08002711

080025e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <xTimerGenericCommand+0x2c>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	e7fe      	b.n	800260a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <xTimerGenericCommand+0x94>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02a      	beq.n	800266a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b05      	cmp	r3, #5
 8002624:	dc18      	bgt.n	8002658 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002626:	f7ff fea3 	bl	8002370 <xTaskGetSchedulerState>
 800262a:	4603      	mov	r3, r0
 800262c:	2b02      	cmp	r3, #2
 800262e:	d109      	bne.n	8002644 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002630:	4b10      	ldr	r3, [pc, #64]	; (8002674 <xTimerGenericCommand+0x94>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	f107 0114 	add.w	r1, r7, #20
 8002638:	2300      	movs	r3, #0
 800263a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263c:	f7fe fd62 	bl	8001104 <xQueueGenericSend>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24
 8002642:	e012      	b.n	800266a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <xTimerGenericCommand+0x94>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f107 0114 	add.w	r1, r7, #20
 800264c:	2300      	movs	r3, #0
 800264e:	2200      	movs	r2, #0
 8002650:	f7fe fd58 	bl	8001104 <xQueueGenericSend>
 8002654:	6278      	str	r0, [r7, #36]	; 0x24
 8002656:	e008      	b.n	800266a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <xTimerGenericCommand+0x94>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f107 0114 	add.w	r1, r7, #20
 8002660:	2300      	movs	r3, #0
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	f7fe fe48 	bl	80012f8 <xQueueGenericSendFromISR>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800266c:	4618      	mov	r0, r3
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200001ec 	.word	0x200001ec

08002678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af02      	add	r7, sp, #8
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <prvProcessExpiredTimer+0x94>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3304      	adds	r3, #4
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fa51 	bl	8000b38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d021      	beq.n	80026e8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	18d1      	adds	r1, r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f000 f8cf 	bl	8002854 <prvInsertTimerInActiveList>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01e      	beq.n	80026fa <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	2100      	movs	r1, #0
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff8a 	bl	80025e0 <xTimerGenericCommand>
 80026cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d112      	bne.n	80026fa <prvProcessExpiredTimer+0x82>
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e7fe      	b.n	80026e6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	4798      	blx	r3
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200001e4 	.word	0x200001e4

08002710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002718:	f107 0308 	add.w	r3, r7, #8
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f857 	bl	80027d0 <prvGetNextExpireTime>
 8002722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4619      	mov	r1, r3
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f803 	bl	8002734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800272e:	f000 f8d3 	bl	80028d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002732:	e7f1      	b.n	8002718 <prvTimerTask+0x8>

08002734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800273e:	f7ff fa67 	bl	8001c10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f864 	bl	8002814 <prvSampleTimeNow>
 800274c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d130      	bne.n	80027b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <prvProcessTimerOrBlockTask+0x3c>
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	429a      	cmp	r2, r3
 8002760:	d806      	bhi.n	8002770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002762:	f7ff fa63 	bl	8001c2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff85 	bl	8002678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800276e:	e024      	b.n	80027ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <prvProcessTimerOrBlockTask+0x90>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <prvProcessTimerOrBlockTask+0x50>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <prvProcessTimerOrBlockTask+0x52>
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <prvProcessTimerOrBlockTask+0x94>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f7ff f855 	bl	8001844 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800279a:	f7ff fa47 	bl	8001c2c <xTaskResumeAll>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <prvProcessTimerOrBlockTask+0x98>)
 80027a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	f3bf 8f6f 	isb	sy
}
 80027b4:	e001      	b.n	80027ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80027b6:	f7ff fa39 	bl	8001c2c <xTaskResumeAll>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200001e8 	.word	0x200001e8
 80027c8:	200001ec 	.word	0x200001ec
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <prvGetNextExpireTime+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <prvGetNextExpireTime+0x16>
 80027e2:	2201      	movs	r2, #1
 80027e4:	e000      	b.n	80027e8 <prvGetNextExpireTime+0x18>
 80027e6:	2200      	movs	r2, #0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <prvGetNextExpireTime+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	e001      	b.n	8002804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002804:	68fb      	ldr	r3, [r7, #12]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	200001e4 	.word	0x200001e4

08002814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800281c:	f7ff faa2 	bl	8001d64 <xTaskGetTickCount>
 8002820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <prvSampleTimeNow+0x3c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d205      	bcs.n	8002838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800282c:	f000 f918 	bl	8002a60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e002      	b.n	800283e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <prvSampleTimeNow+0x3c>)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200001f4 	.word	0x200001f4

08002854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d812      	bhi.n	80028a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e01b      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <prvInsertTimerInActiveList+0x7c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7fe f915 	bl	8000ac8 <vListInsert>
 800289e:	e012      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d206      	bcs.n	80028b6 <prvInsertTimerInActiveList+0x62>
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e007      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <prvInsertTimerInActiveList+0x80>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3304      	adds	r3, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7fe f901 	bl	8000ac8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200001e8 	.word	0x200001e8
 80028d4:	200001e4 	.word	0x200001e4

080028d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028de:	e0ac      	b.n	8002a3a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f2c0 80a9 	blt.w	8002a3a <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3304      	adds	r3, #4
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f91d 	bl	8000b38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff87 	bl	8002814 <prvSampleTimeNow>
 8002906:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b09      	cmp	r3, #9
 800290c:	f200 8094 	bhi.w	8002a38 <prvProcessReceivedCommands+0x160>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <prvProcessReceivedCommands+0x40>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002941 	.word	0x08002941
 800291c:	08002941 	.word	0x08002941
 8002920:	08002941 	.word	0x08002941
 8002924:	080029b3 	.word	0x080029b3
 8002928:	080029c7 	.word	0x080029c7
 800292c:	08002a0f 	.word	0x08002a0f
 8002930:	08002941 	.word	0x08002941
 8002934:	08002941 	.word	0x08002941
 8002938:	080029b3 	.word	0x080029b3
 800293c:	080029c7 	.word	0x080029c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	b2da      	uxtb	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	18d1      	adds	r1, r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002960:	f7ff ff78 	bl	8002854 <prvInsertTimerInActiveList>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d067      	beq.n	8002a3a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05c      	beq.n	8002a3a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	441a      	add	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2300      	movs	r3, #0
 800298e:	2100      	movs	r1, #0
 8002990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002992:	f7ff fe25 	bl	80025e0 <xTimerGenericCommand>
 8002996:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d14d      	bne.n	8002a3a <prvProcessReceivedCommands+0x162>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e7fe      	b.n	80029b0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80029c4:	e039      	b.n	8002a3a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <prvProcessReceivedCommands+0x122>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e7fe      	b.n	80029f8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	18d1      	adds	r1, r2, r3
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a08:	f7ff ff24 	bl	8002854 <prvInsertTimerInActiveList>
					break;
 8002a0c:	e015      	b.n	8002a3a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8002a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a1e:	f7fe faa3 	bl	8000f68 <vPortFree>
 8002a22:	e00a      	b.n	8002a3a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002a36:	e000      	b.n	8002a3a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002a38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <prvProcessReceivedCommands+0x184>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f107 0108 	add.w	r1, r7, #8
 8002a42:	2200      	movs	r2, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fcef 	bl	8001428 <xQueueReceive>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f af47 	bne.w	80028e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002a52:	bf00      	nop
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	200001ec 	.word	0x200001ec

08002a60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a66:	e047      	b.n	8002af8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f859 	bl	8000b38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	6938      	ldr	r0, [r7, #16]
 8002a8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02d      	beq.n	8002af8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	699a      	ldr	r2, [r3, #24]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d90e      	bls.n	8002acc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7fd ffff 	bl	8000ac8 <vListInsert>
 8002aca:	e015      	b.n	8002af8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	6938      	ldr	r0, [r7, #16]
 8002ad8:	f7ff fd82 	bl	80025e0 <xTimerGenericCommand>
 8002adc:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <prvSwitchTimerLists+0x98>
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	e7fe      	b.n	8002af6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1b2      	bne.n	8002a68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002b02:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <prvSwitchTimerLists+0xc4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <prvSwitchTimerLists+0xc0>)
 8002b0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <prvSwitchTimerLists+0xc4>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200001e4 	.word	0x200001e4
 8002b24:	200001e8 	.word	0x200001e8

08002b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002b2c:	f7fe f91c 	bl	8000d68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002b30:	4b0d      	ldr	r3, [pc, #52]	; (8002b68 <prvCheckForValidListAndQueue+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d113      	bne.n	8002b60 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <prvCheckForValidListAndQueue+0x44>)
 8002b3a:	f7fd ff77 	bl	8000a2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002b3e:	480c      	ldr	r0, [pc, #48]	; (8002b70 <prvCheckForValidListAndQueue+0x48>)
 8002b40:	f7fd ff74 	bl	8000a2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <prvCheckForValidListAndQueue+0x4c>)
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <prvCheckForValidListAndQueue+0x44>)
 8002b48:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <prvCheckForValidListAndQueue+0x50>)
 8002b4c:	4a08      	ldr	r2, [pc, #32]	; (8002b70 <prvCheckForValidListAndQueue+0x48>)
 8002b4e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002b50:	2200      	movs	r2, #0
 8002b52:	210c      	movs	r1, #12
 8002b54:	2005      	movs	r0, #5
 8002b56:	f7fe fa81 	bl	800105c <xQueueGenericCreate>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <prvCheckForValidListAndQueue+0x40>)
 8002b5e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b60:	f7fe f930 	bl	8000dc4 <vPortExitCritical>
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200001ec 	.word	0x200001ec
 8002b6c:	200001bc 	.word	0x200001bc
 8002b70:	200001d0 	.word	0x200001d0
 8002b74:	200001e4 	.word	0x200001e4
 8002b78:	200001e8 	.word	0x200001e8

08002b7c <_Z10ARadioTaskPv>:
 *
 *
 * */

void ARadioTask (void* pvParameters)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	xTaskParam * xPort=(xTaskParam *) pvParameters;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	617b      	str	r3, [r7, #20]
	cc11xx_class *cc1101= new cc11xx_class(xPort, 46, rfSettings);
 8002b88:	2038      	movs	r0, #56	; 0x38
 8002b8a:	f001 ffbf 	bl	8004b0c <_Znwj>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461c      	mov	r4, r3
 8002b92:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <_Z10ARadioTaskPv+0x84>)
 8002b94:	222e      	movs	r2, #46	; 0x2e
 8002b96:	6979      	ldr	r1, [r7, #20]
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 f873 	bl	8002c84 <_ZN12cc11xx_classC1EP10xTaskParamhPh>
 8002b9e:	613c      	str	r4, [r7, #16]
#ifdef DEBUG
    RCC->APB2ENR|= RCC_APB2ENR_IOPCEN;
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <_Z10ARadioTaskPv+0x88>)
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <_Z10ARadioTaskPv+0x88>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	6193      	str	r3, [r2, #24]
    GPIOC->CRH|=0x2<<20;
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <_Z10ARadioTaskPv+0x8c>)
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <_Z10ARadioTaskPv+0x8c>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb6:	6053      	str	r3, [r2, #4]
    uint32_t* pt=(uint32_t*)(PERIPH_BB_BASE + ((GPIOC_BASE-PERIPH_BASE+0x0C)  * 32) + (13 * 4));
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <_Z10ARadioTaskPv+0x90>)
 8002bba:	60fb      	str	r3, [r7, #12]
#endif
	//base task loop
    cc1101->sendByte(9,  87);
 8002bbc:	2257      	movs	r2, #87	; 0x57
 8002bbe:	2109      	movs	r1, #9
 8002bc0:	6938      	ldr	r0, [r7, #16]
 8002bc2:	f000 f9ff 	bl	8002fc4 <_ZN12cc11xx_class8sendByteEhh>
    cc1101->sendSTB(SCAL);
 8002bc6:	2133      	movs	r1, #51	; 0x33
 8002bc8:	6938      	ldr	r0, [r7, #16]
 8002bca:	f000 fd76 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
    cc1101->sendSTB(SRX);
 8002bce:	2134      	movs	r1, #52	; 0x34
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f000 fd72 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
	for (;;)
	{


#ifdef DEBUG
		if (*pt==0)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <_Z10ARadioTaskPv+0x6a>
			*pt=1;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e002      	b.n	8002bec <_Z10ARadioTaskPv+0x70>
		else *pt=0;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

#endif
		cc1101->chekStatus();
 8002bec:	6938      	ldr	r0, [r7, #16]
 8002bee:	f000 fb4d 	bl	800328c <_ZN12cc11xx_class10chekStatusEv>
		cc1101->txEventHook();
 8002bf2:	6938      	ldr	r0, [r7, #16]
 8002bf4:	f000 fe4a 	bl	800388c <_ZN12cc11xx_class11txEventHookEv>
		cc1101->rxEventHook();
 8002bf8:	6938      	ldr	r0, [r7, #16]
 8002bfa:	f000 fe06 	bl	800380a <_ZN12cc11xx_class11rxEventHookEv>
		if (*pt==0)
 8002bfe:	e7ea      	b.n	8002bd6 <_Z10ARadioTaskPv+0x5a>
 8002c00:	20000004 	.word	0x20000004
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	422201b4 	.word	0x422201b4

08002c10 <_Z11ARadioTaskSPv>:
		//vTaskDelay(50 / portTICK_PERIOD_MS);
	};
}

void ARadioTaskS (void* pvParameters)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	xTaskParam * xPort=(xTaskParam *) pvParameters;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
	cc11xx_class *cc1101= new cc11xx_class(xPort, 46, rfSettings);
 8002c1c:	2038      	movs	r0, #56	; 0x38
 8002c1e:	f001 ff75 	bl	8004b0c <_Znwj>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461c      	mov	r4, r3
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <_Z11ARadioTaskSPv+0x54>)
 8002c28:	222e      	movs	r2, #46	; 0x2e
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f000 f829 	bl	8002c84 <_ZN12cc11xx_classC1EP10xTaskParamhPh>
 8002c32:	60bc      	str	r4, [r7, #8]
#ifdef DEBUG
   /* RCC->APB2ENR|= RCC_APB2ENR_IOPCEN;
    GPIOC->CRH|=0x2<<20;
    uint32_t* pt=(uint32_t*)(PERIPH_BB_BASE + ((GPIOC_BASE-PERIPH_BASE+0x0C)  * 32) + (13 * 4));*/
#endif
    cc1101->sendByte(9,  88);
 8002c34:	2258      	movs	r2, #88	; 0x58
 8002c36:	2109      	movs	r1, #9
 8002c38:	68b8      	ldr	r0, [r7, #8]
 8002c3a:	f000 f9c3 	bl	8002fc4 <_ZN12cc11xx_class8sendByteEhh>
    cc1101->sendSTB(SCAL);
 8002c3e:	2133      	movs	r1, #51	; 0x33
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f000 fd3a 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
    cc1101->sendSTB(SRX);
 8002c46:	2134      	movs	r1, #52	; 0x34
 8002c48:	68b8      	ldr	r0, [r7, #8]
 8002c4a:	f000 fd36 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
   	for (;;)
	{
		cc1101->chekStatus();
 8002c4e:	68b8      	ldr	r0, [r7, #8]
 8002c50:	f000 fb1c 	bl	800328c <_ZN12cc11xx_class10chekStatusEv>
		cc1101->txEventHook();
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	f000 fe19 	bl	800388c <_ZN12cc11xx_class11txEventHookEv>
		cc1101->rxEventHook();
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	f000 fdd5 	bl	800380a <_ZN12cc11xx_class11rxEventHookEv>
		cc1101->chekStatus();
 8002c60:	e7f5      	b.n	8002c4e <_Z11ARadioTaskSPv+0x3e>
 8002c62:	bf00      	nop
 8002c64:	20000004 	.word	0x20000004

08002c68 <_ZN4packC1Ev>:

void ARadioTask (void* pvParameters);
void ARadioTaskS (void* pvParameters);

// Rf settings for CC1101
 struct pack
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	220a      	movs	r2, #10
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
	...

08002c84 <_ZN12cc11xx_classC1EP10xTaskParamhPh>:

#include "CC1101.h"



cc11xx_class::cc11xx_class(xTaskParam * pPortParam, uint8_t set_len, uint8_t *rfSettings) // class constructor
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	71fb      	strb	r3, [r7, #7]
};

  class cc11xx_class
  {
  private:
	  pack *rxp= new pack;
 8002c94:	200d      	movs	r0, #13
 8002c96:	f001 ff39 	bl	8004b0c <_Znwj>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461c      	mov	r4, r3
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff ffe2 	bl	8002c68 <_ZN4packC1Ev>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601c      	str	r4, [r3, #0]
	  pack *txp= new pack;
 8002ca8:	200d      	movs	r0, #13
 8002caa:	f001 ff2f 	bl	8004b0c <_Znwj>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff ffd8 	bl	8002c68 <_ZN4packC1Ev>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605c      	str	r4, [r3, #4]
	  cc1101Status* cStatus= new cc1101Status;
 8002cbc:	2004      	movs	r0, #4
 8002cbe:	f001 ff25 	bl	8004b0c <_Znwj>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	609a      	str	r2, [r3, #8]
{
	SP=(SPI_TypeDef*)pPortParam->pTaskSerial;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	60da      	str	r2, [r3, #12]
	xPortHW= pPortParam->xTaskPortH;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	791a      	ldrb	r2, [r3, #4]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pRX=pPortParam->xCommRX;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	pTX=pPortParam->xCommTX;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	631a      	str	r2, [r3, #48]	; 0x30
	pErr=pPortParam->xErr;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	699a      	ldr	r2, [r3, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
	this->rxEvent=pPortParam->pRxEvent;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	61da      	str	r2, [r3, #28]
	this->txcEvent=pPortParam->pTxcEvent;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	621a      	str	r2, [r3, #32]
	switch  (xPortHW)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x92>
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d03e      	beq.n	8002d92 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x10e>
 8002d14:	e07e      	b.n	8002e14 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x190>
	{
		case PORT_NORMAL:
		{
			if (SP == (SPI_TypeDef*)SPI1_BASE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4a86      	ldr	r2, [pc, #536]	; (8002f34 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d117      	bne.n	8002d50 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0xcc>
			{
				RCC->APB2ENR|=RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 8002d20:	4a85      	ldr	r2, [pc, #532]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	6193      	str	r3, [r2, #24]
				GPIOA->CRL=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 8002d30:	4b82      	ldr	r3, [pc, #520]	; (8002f3c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b8>)
 8002d32:	4a83      	ldr	r2, [pc, #524]	; (8002f40 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2bc>)
 8002d34:	601a      	str	r2, [r3, #0]
				NSS_get=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x08)  * 32) + (4 * 4));//bit bang address
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a82      	ldr	r2, [pc, #520]	; (8002f44 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2c0>)
 8002d3a:	615a      	str	r2, [r3, #20]
				NSS_set=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x10)  * 32) + (4 * 4));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a82      	ldr	r2, [pc, #520]	; (8002f48 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2c4>)
 8002d40:	611a      	str	r2, [r3, #16]
				NSS_reset=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x14)  * 32) + (4 * 4));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a81      	ldr	r2, [pc, #516]	; (8002f4c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2c8>)
 8002d46:	619a      	str	r2, [r3, #24]
				MISO_lv=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOA_BASE-PERIPH_BASE+0x08)  * 32) + (6 * 4));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	; (8002f50 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2cc>)
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
			} else
			{
				// Return task init error here!!!!!!!!!!!!!!!
			};

			break;
 8002d4e:	e05e      	b.n	8002e0e <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18a>
			} else if (SP == (SPI_TypeDef*)SPI2_BASE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a7f      	ldr	r2, [pc, #508]	; (8002f54 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2d0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d159      	bne.n	8002e0e <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18a>
				RCC->APB2ENR|= RCC_APB2ENR_IOPBEN;
 8002d5a:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d5c:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	6193      	str	r3, [r2, #24]
				RCC->APB1ENR|= RCC_APB1ENR_SPI2EN;
 8002d66:	4a74      	ldr	r2, [pc, #464]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d68:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d70:	61d3      	str	r3, [r2, #28]
				GPIOB->CRH=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);		// set GPIO
 8002d72:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2d4>)
 8002d74:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2bc>)
 8002d76:	605a      	str	r2, [r3, #4]
				NSS_get=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x08)  * 32) + (12 * 4));//bit bang address
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2d8>)
 8002d7c:	615a      	str	r2, [r3, #20]
				NSS_set=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x10)  * 32) + (12 * 4));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a77      	ldr	r2, [pc, #476]	; (8002f60 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2dc>)
 8002d82:	611a      	str	r2, [r3, #16]
				NSS_reset=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x14)  * 32) + (12 * 4));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2e0>)
 8002d88:	619a      	str	r2, [r3, #24]
				MISO_lv=	(uint32_t*)(PERIPH_BB_BASE + ((GPIOB_BASE-PERIPH_BASE+0x08)  * 32) + (14 * 4));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2e4>)
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002d90:	e03d      	b.n	8002e0e <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18a>
		}
		case PORT_REMAP :
		{
			if (SP == (SPI_TypeDef*)SPI1_BASE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a67      	ldr	r2, [pc, #412]	; (8002f34 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d117      	bne.n	8002dcc <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x148>
			{
				RCC->APB2ENR|=RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 8002d9c:	4a66      	ldr	r2, [pc, #408]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002d9e:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da6:	f043 0304 	orr.w	r3, r3, #4
 8002daa:	6193      	str	r3, [r2, #24]
				GPIOA->CRL=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 8002dac:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b8>)
 8002dae:	4a64      	ldr	r2, [pc, #400]	; (8002f40 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2bc>)
 8002db0:	601a      	str	r2, [r3, #0]
				NSS_get=	0;//bit bang address
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	615a      	str	r2, [r3, #20]
				NSS_set=	0;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
				NSS_reset=	0;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
				MISO_lv=	0;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
				MISO_lv=0;
			} else
			{
						// Return task init error here!!!!!!!!!!!!!!!
			};
			break;
 8002dca:	e022      	b.n	8002e12 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18e>
			} else if (SP == (SPI_TypeDef*)SPI2_BASE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a60      	ldr	r2, [pc, #384]	; (8002f54 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2d0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d11d      	bne.n	8002e12 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18e>
				RCC->APB2ENR|= RCC_APB2ENR_IOPBEN;
 8002dd6:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002dd8:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f043 0308 	orr.w	r3, r3, #8
 8002de0:	6193      	str	r3, [r2, #24]
				RCC->APB1ENR|= RCC_APB1ENR_SPI2EN;
 8002de2:	4a55      	ldr	r2, [pc, #340]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2b4>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dec:	61d3      	str	r3, [r2, #28]
				GPIOB->CRH=(1<<16)|(0x9<<20)|(0x4<<24)|(0x9<<28);// set GPIO
 8002dee:	4b5a      	ldr	r3, [pc, #360]	; (8002f58 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2d4>)
 8002df0:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x2bc>)
 8002df2:	605a      	str	r2, [r3, #4]
				NSS_get=0;//bit bang address
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
				NSS_set=0;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
				NSS_reset=0;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
				MISO_lv=0;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8002e0c:	e001      	b.n	8002e12 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x18e>
			break;
 8002e0e:	bf00      	nop
 8002e10:	e000      	b.n	8002e14 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x190>
			break;
 8002e12:	bf00      	nop
		}
	};
	SP->CR1=0;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]
	SP->CR1=(0x6<<3);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2230      	movs	r2, #48	; 0x30
 8002e22:	801a      	strh	r2, [r3, #0]
	SP->CR1|=SPI_CR1_SSM|SPI_CR1_SSI;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	68d2      	ldr	r2, [r2, #12]
 8002e2c:	8812      	ldrh	r2, [r2, #0]
 8002e2e:	b292      	uxth	r2, r2
 8002e30:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e34:	b292      	uxth	r2, r2
 8002e36:	801a      	strh	r2, [r3, #0]
	// clock div 128(56M/128), SPI is a master mode
	if ((SP->SR&SPI_SR_MODF));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	891b      	ldrh	r3, [r3, #8]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
	SP->CR1|=SPI_CR1_MSTR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	b292      	uxth	r2, r2
 8002e52:	f042 0204 	orr.w	r2, r2, #4
 8002e56:	b292      	uxth	r2, r2
 8002e58:	801a      	strh	r2, [r3, #0]
	SP->CR1|=SPI_CR1_SPE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	8812      	ldrh	r2, [r2, #0]
 8002e64:	b292      	uxth	r2, r2
 8002e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e6a:	b292      	uxth	r2, r2
 8002e6c:	801a      	strh	r2, [r3, #0]
	selectChip();
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f87c 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1); //check miso low state
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f899 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d000      	beq.n	8002e8c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x208>
 8002e8a:	e7f3      	b.n	8002e74 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x1f0>
	deselectChip();
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f87d 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f86a 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1);
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f887 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	bf0c      	ite	eq
 8002ea4:	2301      	moveq	r3, #1
 8002ea6:	2300      	movne	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d000      	beq.n	8002eb0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x22c>
 8002eae:	e7f3      	b.n	8002e98 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x214>
	deselectChip();
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f86b 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	sendSTB(SRES);// reset chip
 8002eb6:	2130      	movs	r1, #48	; 0x30
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fbfe 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
	deselectChip();
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f864 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	vTaskDelay(10 / portTICK_PERIOD_MS);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f7fe fe23 	bl	8001b10 <vTaskDelay>
	selectChip();
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f84e 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1); //check miso low state
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f86b 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d000      	beq.n	8002ee8 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x264>
 8002ee6:	e7f3      	b.n	8002ed0 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x24c>
	deselectChip();
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f84f 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f83c 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO()==1);
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f859 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d000      	beq.n	8002f0c <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x288>
 8002f0a:	e7f3      	b.n	8002ef4 <_ZN12cc11xx_classC1EP10xTaskParamhPh+0x270>
	deselectChip();
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f83d 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	this->sendBurst(0,set_len, rfSettings);
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2100      	movs	r1, #0
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f8fa 	bl	8003112 <_ZN12cc11xx_class9sendBurstEhhPh>
	this->sendByte(PATAB, 0x50);
 8002f1e:	2250      	movs	r2, #80	; 0x50
 8002f20:	213e      	movs	r1, #62	; 0x3e
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f84e 	bl	8002fc4 <_ZN12cc11xx_class8sendByteEhh>
}
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40013000 	.word	0x40013000
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40010800 	.word	0x40010800
 8002f40:	94910000 	.word	0x94910000
 8002f44:	42210110 	.word	0x42210110
 8002f48:	42210210 	.word	0x42210210
 8002f4c:	42210290 	.word	0x42210290
 8002f50:	42210118 	.word	0x42210118
 8002f54:	40003800 	.word	0x40003800
 8002f58:	40010c00 	.word	0x40010c00
 8002f5c:	42218130 	.word	0x42218130
 8002f60:	42218230 	.word	0x42218230
 8002f64:	422182b0 	.word	0x422182b0
 8002f68:	42218138 	.word	0x42218138

08002f6c <_ZN12cc11xx_class10selectChipEv>:

btype_t cc11xx_class::selectChip()
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	*NSS_reset=1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
	return *NSS_get;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	681b      	ldr	r3, [r3, #0]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <_ZN12cc11xx_class12deselectChipEv>:

btype_t cc11xx_class::deselectChip()
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	*NSS_set=1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
	return *NSS_get;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	681b      	ldr	r3, [r3, #0]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <_ZN12cc11xx_class7getMISOEv>:

btype_t cc11xx_class::getMISO()
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

	return *MISO_lv;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	681b      	ldr	r3, [r3, #0]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <_ZN12cc11xx_class8sendByteEhh>:

btype_t cc11xx_class::sendByte (uint8_t address, uint8_t  cmd)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	70bb      	strb	r3, [r7, #2]
	uint8_t stsb;
	deselectChip();
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ffd9 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffc6 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ffe3 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d000      	beq.n	8002ff8 <_ZN12cc11xx_class8sendByteEhh+0x34>
 8002ff6:	e7f3      	b.n	8002fe0 <_ZN12cc11xx_class8sendByteEhh+0x1c>
	while  ((SP->SR & SPI_SR_BSY));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	891b      	ldrh	r3, [r3, #8]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d000      	beq.n	8003014 <_ZN12cc11xx_class8sendByteEhh+0x50>
 8003012:	e7f1      	b.n	8002ff8 <_ZN12cc11xx_class8sendByteEhh+0x34>
	if ((SP->SR & SPI_SR_OVR))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	891b      	ldrh	r3, [r3, #8]
 800301a:	b29b      	uxth	r3, r3
 800301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d013      	beq.n	8003056 <_ZN12cc11xx_class8sendByteEhh+0x92>
	{
		stsb=SP->DR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	899b      	ldrh	r3, [r3, #12]
 8003034:	b29b      	uxth	r3, r3
 8003036:	73fb      	strb	r3, [r7, #15]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	891b      	ldrh	r3, [r3, #8]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <_ZN12cc11xx_class8sendByteEhh+0x92>
 8003052:	2300      	movs	r3, #0
 8003054:	e059      	b.n	800310a <_ZN12cc11xx_class8sendByteEhh+0x146>
	};
	SP->DR=WRITE|address;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	b292      	uxth	r2, r2
 800305e:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	891b      	ldrh	r3, [r3, #8]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <_ZN12cc11xx_class8sendByteEhh+0xbc>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	891b      	ldrh	r3, [r3, #8]
 8003076:	b29b      	uxth	r3, r3
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <_ZN12cc11xx_class8sendByteEhh+0xc0>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <_ZN12cc11xx_class8sendByteEhh+0xc2>
 8003084:	2300      	movs	r3, #0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d000      	beq.n	800308c <_ZN12cc11xx_class8sendByteEhh+0xc8>
 800308a:	e7e9      	b.n	8003060 <_ZN12cc11xx_class8sendByteEhh+0x9c>
	stsb=SP->DR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	899b      	ldrh	r3, [r3, #12]
 8003092:	b29b      	uxth	r3, r3
 8003094:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	11d2      	asrs	r2, r2, #7
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	1112      	asrs	r2, r2, #4
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	f002 0207 	and.w	r2, r2, #7
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_tx_av = stsb & 0x0f;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	f002 020f 	and.w	r2, r2, #15
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	70da      	strb	r2, [r3, #3]
	SP->DR=cmd;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	78ba      	ldrb	r2, [r7, #2]
 80030c8:	b292      	uxth	r2, r2
 80030ca:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	891b      	ldrh	r3, [r3, #8]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <_ZN12cc11xx_class8sendByteEhh+0x128>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	891b      	ldrh	r3, [r3, #8]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <_ZN12cc11xx_class8sendByteEhh+0x12c>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <_ZN12cc11xx_class8sendByteEhh+0x12e>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d000      	beq.n	80030f8 <_ZN12cc11xx_class8sendByteEhh+0x134>
 80030f6:	e7e9      	b.n	80030cc <_ZN12cc11xx_class8sendByteEhh+0x108>
	stsb=SP->DR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	899b      	ldrh	r3, [r3, #12]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	73fb      	strb	r3, [r7, #15]
	deselectChip();
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff42 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	return 1;
 8003108:	2301      	movs	r3, #1
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <_ZN12cc11xx_class9sendBurstEhhPh>:
	deselectChip();
	return stsb;
}

btype_t cc11xx_class::sendBurst(uint8_t sAddress, uint8_t  cmdCount, uint8_t* cmds)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	72fb      	strb	r3, [r7, #11]
 8003120:	4613      	mov	r3, r2
 8003122:	72bb      	strb	r3, [r7, #10]
	uint8_t stsb;
	deselectChip();
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff ff31 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7ff ff1e 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff ff3b 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d000      	beq.n	8003148 <_ZN12cc11xx_class9sendBurstEhhPh+0x36>
 8003146:	e7f3      	b.n	8003130 <_ZN12cc11xx_class9sendBurstEhhPh+0x1e>
	while  ((SP->SR & SPI_SR_BSY));
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	891b      	ldrh	r3, [r3, #8]
 800314e:	b29b      	uxth	r3, r3
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d000      	beq.n	8003164 <_ZN12cc11xx_class9sendBurstEhhPh+0x52>
 8003162:	e7f1      	b.n	8003148 <_ZN12cc11xx_class9sendBurstEhhPh+0x36>
	if ((SP->SR & SPI_SR_OVR))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	891b      	ldrh	r3, [r3, #8]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf14      	ite	ne
 8003174:	2301      	movne	r3, #1
 8003176:	2300      	moveq	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d013      	beq.n	80031a6 <_ZN12cc11xx_class9sendBurstEhhPh+0x94>
	{
		stsb=SP->DR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	899b      	ldrh	r3, [r3, #12]
 8003184:	b29b      	uxth	r3, r3
 8003186:	74fb      	strb	r3, [r7, #19]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	891b      	ldrh	r3, [r3, #8]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <_ZN12cc11xx_class9sendBurstEhhPh+0x94>
 80031a2:	2300      	movs	r3, #0
 80031a4:	e06e      	b.n	8003284 <_ZN12cc11xx_class9sendBurstEhhPh+0x172>
	};
	stsb=SP->DR;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	899b      	ldrh	r3, [r3, #12]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	74fb      	strb	r3, [r7, #19]
	SP->DR=BURST|sAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	7afa      	ldrb	r2, [r7, #11]
 80031b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	b292      	uxth	r2, r2
 80031be:	819a      	strh	r2, [r3, #12]
	for (int i=0; i<cmdCount; i++)
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	7aba      	ldrb	r2, [r7, #10]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dd26      	ble.n	800321a <_ZN12cc11xx_class9sendBurstEhhPh+0x108>
	{
		while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	891b      	ldrh	r3, [r3, #8]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <_ZN12cc11xx_class9sendBurstEhhPh+0xda>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	891b      	ldrh	r3, [r3, #8]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <_ZN12cc11xx_class9sendBurstEhhPh+0xde>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <_ZN12cc11xx_class9sendBurstEhhPh+0xe0>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d000      	beq.n	80031f8 <_ZN12cc11xx_class9sendBurstEhhPh+0xe6>
 80031f6:	e7e9      	b.n	80031cc <_ZN12cc11xx_class9sendBurstEhhPh+0xba>
		SP->DR=*(cmds+i);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	440a      	add	r2, r1
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	b292      	uxth	r2, r2
 8003206:	819a      	strh	r2, [r3, #12]
		stsb=SP->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	899b      	ldrh	r3, [r3, #12]
 800320e:	b29b      	uxth	r3, r3
 8003210:	74fb      	strb	r3, [r7, #19]
	for (int i=0; i<cmdCount; i++)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3301      	adds	r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	e7d4      	b.n	80031c4 <_ZN12cc11xx_class9sendBurstEhhPh+0xb2>
	}
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	891b      	ldrh	r3, [r3, #8]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <_ZN12cc11xx_class9sendBurstEhhPh+0x128>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	891b      	ldrh	r3, [r3, #8]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <_ZN12cc11xx_class9sendBurstEhhPh+0x12c>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <_ZN12cc11xx_class9sendBurstEhhPh+0x12e>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d000      	beq.n	8003246 <_ZN12cc11xx_class9sendBurstEhhPh+0x134>
 8003244:	e7e9      	b.n	800321a <_ZN12cc11xx_class9sendBurstEhhPh+0x108>
	stsb=SP->DR;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	899b      	ldrh	r3, [r3, #12]
 800324c:	b29b      	uxth	r3, r3
 800324e:	74fb      	strb	r3, [r7, #19]
	cStatus->rdy= stsb>>7;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	7cfa      	ldrb	r2, [r7, #19]
 8003256:	11d2      	asrs	r2, r2, #7
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	7cfa      	ldrb	r2, [r7, #19]
 8003262:	1112      	asrs	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f002 0207 	and.w	r2, r2, #7
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_tx_av = stsb & 0x0f;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	7cfa      	ldrb	r2, [r7, #19]
 8003274:	f002 020f 	and.w	r2, r2, #15
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	70da      	strb	r2, [r3, #3]
	deselectChip();
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7ff fe85 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	return 1;
 8003282:	2301      	movs	r3, #1
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZN12cc11xx_class10chekStatusEv>:
	deselectChip();
	return 1;
}

btype_t cc11xx_class::chekStatus()
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	uint8_t stsb;

	selectChip();
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fe69 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fe86 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d000      	beq.n	80032b2 <_ZN12cc11xx_class10chekStatusEv+0x26>
 80032b0:	e7f3      	b.n	800329a <_ZN12cc11xx_class10chekStatusEv+0xe>
	while  ((SP->SR & SPI_SR_BSY));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	891b      	ldrh	r3, [r3, #8]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bf14      	ite	ne
 80032c2:	2301      	movne	r3, #1
 80032c4:	2300      	moveq	r3, #0
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d000      	beq.n	80032ce <_ZN12cc11xx_class10chekStatusEv+0x42>
 80032cc:	e7f1      	b.n	80032b2 <_ZN12cc11xx_class10chekStatusEv+0x26>
	if ((SP->SR & SPI_SR_OVR))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	891b      	ldrh	r3, [r3, #8]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d013      	beq.n	8003310 <_ZN12cc11xx_class10chekStatusEv+0x84>
	{
		stsb=SP->DR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	899b      	ldrh	r3, [r3, #12]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	73fb      	strb	r3, [r7, #15]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	891b      	ldrh	r3, [r3, #8]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <_ZN12cc11xx_class10chekStatusEv+0x84>
 800330c:	2300      	movs	r3, #0
 800330e:	e094      	b.n	800343a <_ZN12cc11xx_class10chekStatusEv+0x1ae>
	};
	//stsb=SP->DR;
	SP->DR=WRITE|SNOP;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	223d      	movs	r2, #61	; 0x3d
 8003316:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	891b      	ldrh	r3, [r3, #8]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <_ZN12cc11xx_class10chekStatusEv+0xac>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	891b      	ldrh	r3, [r3, #8]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <_ZN12cc11xx_class10chekStatusEv+0xb0>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <_ZN12cc11xx_class10chekStatusEv+0xb2>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d000      	beq.n	8003344 <_ZN12cc11xx_class10chekStatusEv+0xb8>
 8003342:	e7e9      	b.n	8003318 <_ZN12cc11xx_class10chekStatusEv+0x8c>
	stsb=SP->DR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	899b      	ldrh	r3, [r3, #12]
 800334a:	b29b      	uxth	r3, r3
 800334c:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	11d2      	asrs	r2, r2, #7
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	7bfa      	ldrb	r2, [r7, #15]
 8003360:	1112      	asrs	r2, r2, #4
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f002 0207 	and.w	r2, r2, #7
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_tx_av= stsb & 0x0f;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	7bfa      	ldrb	r2, [r7, #15]
 8003372:	f002 020f 	and.w	r2, r2, #15
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	70da      	strb	r2, [r3, #3]
	SP->DR=READ|SNOP;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	22bd      	movs	r2, #189	; 0xbd
 8003380:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	891b      	ldrh	r3, [r3, #8]
 8003388:	b29b      	uxth	r3, r3
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <_ZN12cc11xx_class10chekStatusEv+0x116>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	891b      	ldrh	r3, [r3, #8]
 8003398:	b29b      	uxth	r3, r3
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <_ZN12cc11xx_class10chekStatusEv+0x11a>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <_ZN12cc11xx_class10chekStatusEv+0x11c>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d000      	beq.n	80033ae <_ZN12cc11xx_class10chekStatusEv+0x122>
 80033ac:	e7e9      	b.n	8003382 <_ZN12cc11xx_class10chekStatusEv+0xf6>
	stsb=SP->DR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	899b      	ldrh	r3, [r3, #12]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	73fb      	strb	r3, [r7, #15]
	cStatus->rdy= stsb>>7;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	11d2      	asrs	r2, r2, #7
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	701a      	strb	r2, [r3, #0]
	cStatus->state=(stsb>>4) & 0x7;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	1112      	asrs	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f002 0207 	and.w	r2, r2, #7
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	705a      	strb	r2, [r3, #1]
	cStatus->fifo_rx_av= stsb & 0x0f;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	f002 020f 	and.w	r2, r2, #15
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	709a      	strb	r2, [r3, #2]
	deselectChip();
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff fdd1 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	switch (cStatus->state)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	3b04      	subs	r3, #4
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d820      	bhi.n	8003438 <_ZN12cc11xx_class10chekStatusEv+0x1ac>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <_ZN12cc11xx_class10chekStatusEv+0x170>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003431 	.word	0x08003431
 8003400:	08003431 	.word	0x08003431
 8003404:	0800340d 	.word	0x0800340d
 8003408:	0800341f 	.word	0x0800341f
	{
	case RXFIFO_OVERFLOW: this->sendSTB(SFRX);this->sendSTB(SRX); break;
 800340c:	213a      	movs	r1, #58	; 0x3a
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f953 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
 8003414:	2134      	movs	r1, #52	; 0x34
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f94f 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
 800341c:	e00c      	b.n	8003438 <_ZN12cc11xx_class10chekStatusEv+0x1ac>
	case TXFIFO_UNDERFLOW:this->sendSTB(SFTX); this->sendSTB(SRX); break;
 800341e:	213b      	movs	r1, #59	; 0x3b
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f94a 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
 8003426:	2134      	movs	r1, #52	; 0x34
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f946 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
 800342e:	e003      	b.n	8003438 <_ZN12cc11xx_class10chekStatusEv+0x1ac>
#ifdef FREERTOS
	case CALIBRATE_MODE: case SETTLING_MODE: vTaskDelay(1 / portTICK_PERIOD_MS); break;
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fb6d 	bl	8001b10 <vTaskDelay>
 8003436:	bf00      	nop
#endif
	}
	return 1;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop

08003444 <_ZN12cc11xx_class6txPackEv>:

btype_t cc11xx_class::txPack(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	uint8_t stsb;
	deselectChip();
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fd9d 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fd8a 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fda7 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf14      	ite	ne
 8003464:	2301      	movne	r3, #1
 8003466:	2300      	moveq	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d000      	beq.n	8003470 <_ZN12cc11xx_class6txPackEv+0x2c>
 800346e:	e7f3      	b.n	8003458 <_ZN12cc11xx_class6txPackEv+0x14>
	while  ((SP->SR & SPI_SR_BSY));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	891b      	ldrh	r3, [r3, #8]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d000      	beq.n	800348c <_ZN12cc11xx_class6txPackEv+0x48>
 800348a:	e7f1      	b.n	8003470 <_ZN12cc11xx_class6txPackEv+0x2c>
	if ((SP->SR & SPI_SR_OVR))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	891b      	ldrh	r3, [r3, #8]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d013      	beq.n	80034ce <_ZN12cc11xx_class6txPackEv+0x8a>
	{
		stsb=SP->DR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	899b      	ldrh	r3, [r3, #12]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	72fb      	strb	r3, [r7, #11]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	891b      	ldrh	r3, [r3, #8]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <_ZN12cc11xx_class6txPackEv+0x8a>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e053      	b.n	8003576 <_ZN12cc11xx_class6txPackEv+0x132>
	};
	//stsb=SP->DR;
	SP->DR=WRITE|BURST|FIFO;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	227f      	movs	r2, #127	; 0x7f
 80034d4:	819a      	strh	r2, [r3, #12]
	while  ( ! ((SP->SR & SPI_SR_TXE) && (SP->SR & SPI_SR_RXNE)) );
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	891b      	ldrh	r3, [r3, #8]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <_ZN12cc11xx_class6txPackEv+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	891b      	ldrh	r3, [r3, #8]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <_ZN12cc11xx_class6txPackEv+0xb6>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <_ZN12cc11xx_class6txPackEv+0xb8>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d000      	beq.n	8003502 <_ZN12cc11xx_class6txPackEv+0xbe>
 8003500:	e7e9      	b.n	80034d6 <_ZN12cc11xx_class6txPackEv+0x92>
	stsb=SP->DR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	899b      	ldrh	r3, [r3, #12]
 8003508:	b29b      	uxth	r3, r3
 800350a:	72fb      	strb	r3, [r7, #11]
		for (uint32_t i=0; i<PACK_TX_COUNT; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b0a      	cmp	r3, #10
 8003514:	d827      	bhi.n	8003566 <_ZN12cc11xx_class6txPackEv+0x122>
		{
			SP->DR=*(((uint8_t*)txp+i));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6851      	ldr	r1, [r2, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	440a      	add	r2, r1
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	b292      	uxth	r2, r2
 8003526:	819a      	strh	r2, [r3, #12]
			while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	891b      	ldrh	r3, [r3, #8]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <_ZN12cc11xx_class6txPackEv+0x104>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	891b      	ldrh	r3, [r3, #8]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <_ZN12cc11xx_class6txPackEv+0x108>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <_ZN12cc11xx_class6txPackEv+0x10a>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d000      	beq.n	8003554 <_ZN12cc11xx_class6txPackEv+0x110>
 8003552:	e7e9      	b.n	8003528 <_ZN12cc11xx_class6txPackEv+0xe4>
			stsb=SP->DR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	899b      	ldrh	r3, [r3, #12]
 800355a:	b29b      	uxth	r3, r3
 800355c:	72fb      	strb	r3, [r7, #11]
		for (uint32_t i=0; i<PACK_TX_COUNT; i++)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3301      	adds	r3, #1
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e7d4      	b.n	8003510 <_ZN12cc11xx_class6txPackEv+0xcc>
		}
	deselectChip();
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fd10 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	this->sendSTB(STX);
 800356c:	2135      	movs	r1, #53	; 0x35
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8a3 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
	return 1;
 8003574:	2301      	movs	r3, #1
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZN12cc11xx_class6rxPackEv>:

btype_t cc11xx_class::rxPack(void)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
	uint8_t stsb;
	deselectChip();
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff fd00 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fced 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fd0a 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d000      	beq.n	80035aa <_ZN12cc11xx_class6rxPackEv+0x2c>
 80035a8:	e7f3      	b.n	8003592 <_ZN12cc11xx_class6rxPackEv+0x14>
	while  ((SP->SR & SPI_SR_BSY));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	891b      	ldrh	r3, [r3, #8]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	bf14      	ite	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	2300      	moveq	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d000      	beq.n	80035c6 <_ZN12cc11xx_class6rxPackEv+0x48>
 80035c4:	e7f1      	b.n	80035aa <_ZN12cc11xx_class6rxPackEv+0x2c>
	if ((SP->SR & SPI_SR_OVR))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	891b      	ldrh	r3, [r3, #8]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d013      	beq.n	8003608 <_ZN12cc11xx_class6rxPackEv+0x8a>
	{
		stsb=SP->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	899b      	ldrh	r3, [r3, #12]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	72fb      	strb	r3, [r7, #11]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	891b      	ldrh	r3, [r3, #8]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <_ZN12cc11xx_class6rxPackEv+0x8a>
 8003604:	2300      	movs	r3, #0
 8003606:	e054      	b.n	80036b2 <_ZN12cc11xx_class6rxPackEv+0x134>
	};
	stsb=SP->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	899b      	ldrh	r3, [r3, #12]
 800360e:	b29b      	uxth	r3, r3
 8003610:	72fb      	strb	r3, [r7, #11]
	SP->DR=READ|BURST|FIFO;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	22ff      	movs	r2, #255	; 0xff
 8003618:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	891b      	ldrh	r3, [r3, #8]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <_ZN12cc11xx_class6rxPackEv+0xbc>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	891b      	ldrh	r3, [r3, #8]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <_ZN12cc11xx_class6rxPackEv+0xc0>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <_ZN12cc11xx_class6rxPackEv+0xc2>
 800363e:	2300      	movs	r3, #0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d000      	beq.n	8003646 <_ZN12cc11xx_class6rxPackEv+0xc8>
 8003644:	e7e9      	b.n	800361a <_ZN12cc11xx_class6rxPackEv+0x9c>
	stsb=SP->DR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	899b      	ldrh	r3, [r3, #12]
 800364c:	b29b      	uxth	r3, r3
 800364e:	72fb      	strb	r3, [r7, #11]
	for (uint32_t i=0; i< PACK_RX_COUNT; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b0c      	cmp	r3, #12
 8003658:	d827      	bhi.n	80036aa <_ZN12cc11xx_class6rxPackEv+0x12c>
		{
			SP->DR=0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	819a      	strh	r2, [r3, #12]
			while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	891b      	ldrh	r3, [r3, #8]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <_ZN12cc11xx_class6rxPackEv+0x104>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	891b      	ldrh	r3, [r3, #8]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <_ZN12cc11xx_class6rxPackEv+0x108>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <_ZN12cc11xx_class6rxPackEv+0x10a>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d000      	beq.n	800368e <_ZN12cc11xx_class6rxPackEv+0x110>
 800368c:	e7e9      	b.n	8003662 <_ZN12cc11xx_class6rxPackEv+0xe4>
			* ( ((uint8_t*) rxp) +i  )=SP->DR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	8992      	ldrh	r2, [r2, #12]
 800369c:	b292      	uxth	r2, r2
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i< PACK_RX_COUNT; i++)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e7d4      	b.n	8003654 <_ZN12cc11xx_class6rxPackEv+0xd6>
		}
	deselectChip();
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fc6e 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	return 1;
 80036b0:	2301      	movs	r3, #1
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZN12cc11xx_class7sendSTBEh>:
{
	return this->rxp;
}

btype_t cc11xx_class::sendSTB(uint8_t stb)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	460b      	mov	r3, r1
 80036c4:	70fb      	strb	r3, [r7, #3]
	uint8_t stsb;
	deselectChip();
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff fc60 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	selectChip();
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fc4d 	bl	8002f6c <_ZN12cc11xx_class10selectChipEv>
	while (getMISO());
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fc6a 	bl	8002fac <_ZN12cc11xx_class7getMISOEv>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d000      	beq.n	80036ea <_ZN12cc11xx_class7sendSTBEh+0x30>
 80036e8:	e7f3      	b.n	80036d2 <_ZN12cc11xx_class7sendSTBEh+0x18>
	while  ((SP->SR & SPI_SR_BSY));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	891b      	ldrh	r3, [r3, #8]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d000      	beq.n	8003706 <_ZN12cc11xx_class7sendSTBEh+0x4c>
 8003704:	e7f1      	b.n	80036ea <_ZN12cc11xx_class7sendSTBEh+0x30>
	if ((SP->SR & SPI_SR_OVR))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	891b      	ldrh	r3, [r3, #8]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <_ZN12cc11xx_class7sendSTBEh+0x8e>
	{
		stsb=SP->DR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	899b      	ldrh	r3, [r3, #12]
 8003726:	b29b      	uxth	r3, r3
 8003728:	73fb      	strb	r3, [r7, #15]
		if ((SP->SR & SPI_SR_OVR)) return 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	891b      	ldrh	r3, [r3, #8]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf14      	ite	ne
 800373a:	2301      	movne	r3, #1
 800373c:	2300      	moveq	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <_ZN12cc11xx_class7sendSTBEh+0x8e>
 8003744:	2300      	movs	r3, #0
 8003746:	e023      	b.n	8003790 <_ZN12cc11xx_class7sendSTBEh+0xd6>
	};
	SP->DR=stb;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	b292      	uxth	r2, r2
 8003750:	819a      	strh	r2, [r3, #12]
	while  (!((SP->SR & SPI_SR_TXE)&& (SP->SR &SPI_SR_RXNE)));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	891b      	ldrh	r3, [r3, #8]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <_ZN12cc11xx_class7sendSTBEh+0xb8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	891b      	ldrh	r3, [r3, #8]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <_ZN12cc11xx_class7sendSTBEh+0xbc>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <_ZN12cc11xx_class7sendSTBEh+0xbe>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d000      	beq.n	800377e <_ZN12cc11xx_class7sendSTBEh+0xc4>
 800377c:	e7e9      	b.n	8003752 <_ZN12cc11xx_class7sendSTBEh+0x98>
	stsb=SP->DR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	899b      	ldrh	r3, [r3, #12]
 8003784:	b29b      	uxth	r3, r3
 8003786:	73fb      	strb	r3, [r7, #15]
	deselectChip();
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fbff 	bl	8002f8c <_ZN12cc11xx_class12deselectChipEv>
	return 1;
 800378e:	2301      	movs	r3, #1
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN12cc11xx_class4crc8EPhh>:

uint8_t cc11xx_class::crc8(uint8_t * pcBlock, uint8_t len)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	71fb      	strb	r3, [r7, #7]

	uint8_t crc = 0xFF;
 80037a6:	23ff      	movs	r3, #255	; 0xff
 80037a8:	75fb      	strb	r3, [r7, #23]
	uint32_t i;
    while (len--)
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	71fa      	strb	r2, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01f      	beq.n	80037fe <_ZN12cc11xx_class4crc8EPhh+0x66>
	{
	  crc ^= *pcBlock++;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	60ba      	str	r2, [r7, #8]
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	4053      	eors	r3, r2
 80037ca:	75fb      	strb	r3, [r7, #23]
      for (i = 0; i < 8; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b07      	cmp	r3, #7
 80037d4:	d8e9      	bhi.n	80037aa <_ZN12cc11xx_class4crc8EPhh+0x12>
	  crc = crc & 0x80 ? (crc << 1) ^ 0x31 : crc << 1;
 80037d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da07      	bge.n	80037ee <_ZN12cc11xx_class4crc8EPhh+0x56>
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	b25b      	sxtb	r3, r3
 80037e4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e002      	b.n	80037f4 <_ZN12cc11xx_class4crc8EPhh+0x5c>
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	75fb      	strb	r3, [r7, #23]
      for (i = 0; i < 8; i++)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3301      	adds	r3, #1
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	e7e8      	b.n	80037d0 <_ZN12cc11xx_class4crc8EPhh+0x38>
	}
    return crc;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <_ZN12cc11xx_class11rxEventHookEv>:

btype_t cc11xx_class::rxEventHook(void)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	if ((*rxEvent == RX_EVENT) || ( this->cStatus->fifo_rx_av >= sizeof(pack)) )
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d004      	beq.n	8003826 <_ZN12cc11xx_class11rxEventHookEv+0x1c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	789b      	ldrb	r3, [r3, #2]
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d92d      	bls.n	8003882 <_ZN12cc11xx_class11rxEventHookEv+0x78>
	{
		this->rxPack();
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fea9 	bl	800357e <_ZN12cc11xx_class6rxPackEv>
		if (this->crc8((uint8_t*)this->rxp, sizeof(pack)-3) == this->rxp->crc8d )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	220a      	movs	r2, #10
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffaf 	bl	8003798 <_ZN12cc11xx_class4crc8EPhh>
 800383a:	4603      	mov	r3, r0
 800383c:	461a      	mov	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	7a9b      	ldrb	r3, [r3, #10]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <_ZN12cc11xx_class11rxEventHookEv+0x5c>
		{
		xQueueSend(this->pRX, (const void *) this->rxp, 1 / portTICK_PERIOD_MS );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6819      	ldr	r1, [r3, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	2201      	movs	r2, #1
 800385e:	f7fd fc51 	bl	8001104 <xQueueGenericSend>
		return 1;
 8003862:	2301      	movs	r3, #1
 8003864:	e00e      	b.n	8003884 <_ZN12cc11xx_class11rxEventHookEv+0x7a>
		} else
		{
			this->sendSTB(SIDLE);
 8003866:	2136      	movs	r1, #54	; 0x36
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff26 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
			this->sendSTB(SFRX);
 800386e:	213a      	movs	r1, #58	; 0x3a
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff22 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
			this->sendSTB(SRX);
 8003876:	2134      	movs	r1, #52	; 0x34
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff1e 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
			return 0;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <_ZN12cc11xx_class11rxEventHookEv+0x7a>
		}
	}
	else
		return 0;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN12cc11xx_class11txEventHookEv>:

btype_t cc11xx_class::txEventHook(void)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	if ( (uxQueueSpacesAvailable( this->pTX) < QUEUE_SIZE) )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fea1 	bl	80015e0 <uxQueueSpacesAvailable>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2301      	moveq	r3, #1
 80038a6:	2300      	movne	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03c      	beq.n	8003928 <_ZN12cc11xx_class11txEventHookEv+0x9c>
	{
		if (xQueueReceive(this->pTX, (void*)this->txp, 1 / portTICK_PERIOD_MS)==pdTRUE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4619      	mov	r1, r3
 80038ba:	f7fd fdb5 	bl	8001428 <xQueueReceive>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <_ZN12cc11xx_class11txEventHookEv+0x58>
		this->txp->crc8d=this->crc8((uint8_t*)this->txp, sizeof(pack)-3);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685c      	ldr	r4, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	220a      	movs	r2, #10
 80038d8:	4619      	mov	r1, r3
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff ff5c 	bl	8003798 <_ZN12cc11xx_class4crc8EPhh>
 80038e0:	4603      	mov	r3, r0
 80038e2:	72a3      	strb	r3, [r4, #10]
		this->txPack();
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fdad 	bl	8003444 <_ZN12cc11xx_class6txPackEv>
		this->chekStatus();
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fcce 	bl	800328c <_ZN12cc11xx_class10chekStatusEv>
		int i=0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
		while((cStatus->state != TX_MODE ) && (i<3))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d00d      	beq.n	800391a <_ZN12cc11xx_class11txEventHookEv+0x8e>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b02      	cmp	r3, #2
 8003902:	dc0a      	bgt.n	800391a <_ZN12cc11xx_class11txEventHookEv+0x8e>
		{
			this->sendSTB(STX);
 8003904:	2135      	movs	r1, #53	; 0x35
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fed7 	bl	80036ba <_ZN12cc11xx_class7sendSTBEh>
			this->chekStatus();
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fcbd 	bl	800328c <_ZN12cc11xx_class10chekStatusEv>
			i++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	3301      	adds	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
		while((cStatus->state != TX_MODE ) && (i<3))
 8003918:	e7ec      	b.n	80038f4 <_ZN12cc11xx_class11txEventHookEv+0x68>
		};
		if (i>3)return 0;  else return 1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b03      	cmp	r3, #3
 800391e:	dd01      	ble.n	8003924 <_ZN12cc11xx_class11txEventHookEv+0x98>
 8003920:	2300      	movs	r3, #0
 8003922:	e002      	b.n	800392a <_ZN12cc11xx_class11txEventHookEv+0x9e>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <_ZN12cc11xx_class11txEventHookEv+0x9e>
	}
	else
	{
		return 0;
 8003928:	2300      	movs	r3, #0
	}
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <_Z8aIAQCorePv>:

#include "i2c_sensor.h"


void aIAQCore(void *parameter)
{
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b08b      	sub	sp, #44	; 0x2c
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]

	iaq_core* iaq = new iaq_core();
 800393a:	2018      	movs	r0, #24
 800393c:	f001 f8e6 	bl	8004b0c <_Znwj>
 8003940:	4603      	mov	r3, r0
 8003942:	461c      	mov	r4, r3
 8003944:	4620      	mov	r0, r4
 8003946:	f000 f854 	bl	80039f2 <_ZN8iaq_coreC1Ev>
 800394a:	627c      	str	r4, [r7, #36]	; 0x24
	ens210_class* ens210 = new ens210_class();
 800394c:	2014      	movs	r0, #20
 800394e:	f001 f8dd 	bl	8004b0c <_Znwj>
 8003952:	4603      	mov	r3, r0
 8003954:	461c      	mov	r4, r3
 8003956:	4620      	mov	r0, r4
 8003958:	f000 f978 	bl	8003c4c <_ZN12ens210_classC1Ev>
 800395c:	623c      	str	r4, [r7, #32]
	air_condition air;
	QueueHandle_t comQueue= (QueueHandle_t) parameter;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60fb      	str	r3, [r7, #12]
	vTaskDelay(100/ portTICK_PERIOD_MS);
 8003962:	2064      	movs	r0, #100	; 0x64
 8003964:	f7fe f8d4 	bl	8001b10 <vTaskDelay>
	iaq->i2c_init();
 8003968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800396a:	f000 f853 	bl	8003a14 <_ZN8iaq_core8i2c_initEv>
	ens210->i2c_init();
 800396e:	6a38      	ldr	r0, [r7, #32]
 8003970:	f000 f97c 	bl	8003c6c <_ZN12ens210_class8i2c_initEv>
	ens210->sens_init();
 8003974:	6a38      	ldr	r0, [r7, #32]
 8003976:	f000 fb65 	bl	8004044 <_ZN12ens210_class9sens_initEv>
	while (1)
	{
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 800397a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800397e:	f7fe f8c7 	bl	8001b10 <vTaskDelay>
			iaq->hookRecievePack();
 8003982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003984:	f000 f92e 	bl	8003be4 <_ZN8iaq_core15hookRecievePackEv>
			ens210->appHook();
 8003988:	6a38      	ldr	r0, [r7, #32]
 800398a:	f000 fb79 	bl	8004080 <_ZN12ens210_class7appHookEv>
			air.CO2=iaq->getCO2();
 800398e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003990:	f000 f946 	bl	8003c20 <_ZN8iaq_core6getCO2Ev>
 8003994:	4603      	mov	r3, r0
 8003996:	613b      	str	r3, [r7, #16]
			air.TVOC=iaq->getTVOC();
 8003998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800399a:	f000 f94c 	bl	8003c36 <_ZN8iaq_core7getTVOCEv>
 800399e:	4603      	mov	r3, r0
 80039a0:	617b      	str	r3, [r7, #20]
			air.temp=ens210->getTemp();
 80039a2:	6a38      	ldr	r0, [r7, #32]
 80039a4:	f000 fbbc 	bl	8004120 <_ZN12ens210_class7getTempEv>
 80039a8:	4603      	mov	r3, r0
 80039aa:	61bb      	str	r3, [r7, #24]
			air.humidity=ens210->getHumidity();
 80039ac:	6a38      	ldr	r0, [r7, #32]
 80039ae:	f000 fbc2 	bl	8004136 <_ZN12ens210_class11getHumidityEv>
 80039b2:	4603      	mov	r3, r0
 80039b4:	61fb      	str	r3, [r7, #28]
			ens210->readI2C(0x00);
 80039b6:	2201      	movs	r2, #1
 80039b8:	2100      	movs	r1, #0
 80039ba:	6a38      	ldr	r0, [r7, #32]
 80039bc:	f000 f996 	bl	8003cec <_ZN12ens210_class7readI2CEhh>
			ens210->readI2C(SYS_STAT);
 80039c0:	2201      	movs	r2, #1
 80039c2:	2111      	movs	r1, #17
 80039c4:	6a38      	ldr	r0, [r7, #32]
 80039c6:	f000 f991 	bl	8003cec <_ZN12ens210_class7readI2CEhh>
			if (uxQueueSpacesAvailable(comQueue))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fe07 	bl	80015e0 <uxQueueSpacesAvailable>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0cb      	beq.n	800397a <_Z8aIAQCorePv+0x48>
			{
				xQueueSend(comQueue, &air , 1);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f107 0110 	add.w	r1, r7, #16
 80039e8:	2300      	movs	r3, #0
 80039ea:	2201      	movs	r2, #1
 80039ec:	f7fd fb8a 	bl	8001104 <xQueueGenericSend>
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 80039f0:	e7c3      	b.n	800397a <_Z8aIAQCorePv+0x48>

080039f2 <_ZN8iaq_coreC1Ev>:



}

iaq_core::iaq_core()
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	22b5      	movs	r2, #181	; 0xb5
 80039fe:	725a      	strb	r2, [r3, #9]
{
	i2c_init();
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f807 	bl	8003a14 <_ZN8iaq_core8i2c_initEv>
	return;
 8003a06:	bf00      	nop
}
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <_ZN8iaq_core8i2c_initEv>:


void iaq_core::i2c_init(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8003a1c:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <_ZN8iaq_core8i2c_initEv+0x74>)
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <_ZN8iaq_core8i2c_initEv+0x74>)
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <_ZN8iaq_core8i2c_initEv+0x74>)
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <_ZN8iaq_core8i2c_initEv+0x74>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a32:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003a3a:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a44:	221c      	movs	r2, #28
 8003a46:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a4a:	228c      	movs	r2, #140	; 0x8c
 8003a4c:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a50:	221d      	movs	r2, #29
 8003a52:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 8003a54:	4a0d      	ldr	r2, [pc, #52]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <_ZN8iaq_core8i2c_initEv+0x78>)
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a6e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40005400 	.word	0x40005400
 8003a90:	40010c00 	.word	0x40010c00

08003a94 <_ZN8iaq_core7readI2CEv>:


uint32_t iaq_core::readI2C(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	uint8_t c=0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
	if ((I2C1->SR1 & 0xf0) != 0)
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003aa2:	8a9b      	ldrh	r3, [r3, #20]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <_ZN8iaq_core7readI2CEv+0x32>
		{
		I2C1->CR1 = I2C_CR1_SWRST;
 8003ab8:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003abe:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ffa7 	bl	8003a14 <_ZN8iaq_core8i2c_initEv>
		};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003ac8:	8b1b      	ldrh	r3, [r3, #24]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d014      	beq.n	8003b08 <_ZN8iaq_core7readI2CEv+0x74>
		{
		I2C1->CR1|=I2C_CR1_STOP;
 8003ade:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8003aee:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003af0:	8b1b      	ldrh	r3, [r3, #24]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d000      	beq.n	8003b08 <_ZN8iaq_core7readI2CEv+0x74>
 8003b06:	e7f2      	b.n	8003aee <_ZN8iaq_core7readI2CEv+0x5a>

		}


	I2C1->CR1|=I2C_CR1_START;
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8003b18:	4a31      	ldr	r2, [pc, #196]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b1a:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b2a:	8a9b      	ldrh	r3, [r3, #20]
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d000      	beq.n	8003b42 <_ZN8iaq_core7readI2CEv+0xae>
 8003b40:	e7f2      	b.n	8003b28 <_ZN8iaq_core7readI2CEv+0x94>
	I2C1->DR=this->addr;
 8003b42:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7a5b      	ldrb	r3, [r3, #9]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8003b4c:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b4e:	8a9b      	ldrh	r3, [r3, #20]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d000      	beq.n	8003b66 <_ZN8iaq_core7readI2CEv+0xd2>
 8003b64:	e7f2      	b.n	8003b4c <_ZN8iaq_core7readI2CEv+0xb8>
	if (!(I2C1->SR2 & I2C_SR2_TRA) );
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b68:	8b1b      	ldrh	r3, [r3, #24]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
	while (c < 9)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	dc2a      	bgt.n	8003bce <_ZN8iaq_core7readI2CEv+0x13a>
	{
		while (!(I2C1->SR1&I2C_SR1_RXNE));
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b7a:	8a9b      	ldrh	r3, [r3, #20]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d000      	beq.n	8003b92 <_ZN8iaq_core7readI2CEv+0xfe>
 8003b90:	e7f2      	b.n	8003b78 <_ZN8iaq_core7readI2CEv+0xe4>
		this->iaq_pack[c]=I2C1->DR;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003b96:	8a12      	ldrh	r2, [r2, #16]
 8003b98:	b292      	uxth	r2, r2
 8003b9a:	b2d1      	uxtb	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	54d1      	strb	r1, [r2, r3]
		c++;
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
		if (c==8)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d1e2      	bne.n	8003b72 <_ZN8iaq_core7readI2CEv+0xde>
		{
			I2C1->CR1&=~I2C_CR1_ACK;
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003bae:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	8013      	strh	r3, [r2, #0]
			I2C1->CR1|=I2C_CR1_STOP;
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]
	while (c < 9)
 8003bcc:	e7d1      	b.n	8003b72 <_ZN8iaq_core7readI2CEv+0xde>
		}
	};


	this->status=this->iaq_pack[2];
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	789a      	ldrb	r2, [r3, #2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	751a      	strb	r2, [r3, #20]
	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40005400 	.word	0x40005400

08003be4 <_ZN8iaq_core15hookRecievePackEv>:

uint32_t iaq_core::hookRecievePack()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	this->readI2C();
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ff51 	bl	8003a94 <_ZN8iaq_core7readI2CEv>
	sVal.co2=this->iaq_pack[0]*256+ this->iaq_pack[1];
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	7852      	ldrb	r2, [r2, #1]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
	sVal.tvoc=this->iaq_pack[7]*256+ this->iaq_pack[8];
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	79db      	ldrb	r3, [r3, #7]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	7a12      	ldrb	r2, [r2, #8]
 8003c0e:	4413      	add	r3, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
	return 1;
 8003c16:	2301      	movs	r3, #1

}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_ZN8iaq_core6getCO2Ev>:

uint32_t iaq_core::getCO2(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	return sVal.co2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <_ZN8iaq_core7getTVOCEv>:

uint32_t iaq_core::getTVOC(void)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return sVal.tvoc;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <_ZN12ens210_classC1Ev>:

ens210_class::ens210_class(void)
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2286      	movs	r2, #134	; 0x86
 8003c58:	721a      	strb	r2, [r3, #8]
{
	i2c_init();
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f806 	bl	8003c6c <_ZN12ens210_class8i2c_initEv>
	return;
 8003c60:	bf00      	nop
}
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZN12ens210_class8i2c_initEv>:

void ens210_class::i2c_init(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8003c74:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8003c80:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c8a:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003c8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c92:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003c9c:	221c      	movs	r2, #28
 8003c9e:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003ca2:	228c      	movs	r2, #140	; 0x8c
 8003ca4:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003ca8:	221d      	movs	r2, #29
 8003caa:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 8003cac:	4a0d      	ldr	r2, [pc, #52]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cc6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40005400 	.word	0x40005400
 8003ce8:	40010c00 	.word	0x40010c00

08003cec <_ZN12ens210_class7readI2CEhh>:

uint32_t ens210_class::readI2C(uint8_t saddr, uint8_t len)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	73fb      	strb	r3, [r7, #15]
	if (len<0 || len > 10)  return 0;
 8003d00:	78bb      	ldrb	r3, [r7, #2]
 8003d02:	2b0a      	cmp	r3, #10
 8003d04:	dd01      	ble.n	8003d0a <_ZN12ens210_class7readI2CEhh+0x1e>
 8003d06:	2300      	movs	r3, #0
 8003d08:	e0dd      	b.n	8003ec6 <_ZN12ens210_class7readI2CEhh+0x1da>
	if ((I2C1->SR1 & 0xf0) != 0)
 8003d0a:	4b71      	ldr	r3, [pc, #452]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d0c:	8a9b      	ldrh	r3, [r3, #20]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d006      	beq.n	8003d30 <_ZN12ens210_class7readI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8003d22:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d28:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff9e 	bl	8003c6c <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8003d30:	4b67      	ldr	r3, [pc, #412]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d32:	8b1b      	ldrh	r3, [r3, #24]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <_ZN12ens210_class7readI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8003d48:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d4a:	4b61      	ldr	r3, [pc, #388]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8003d58:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d5a:	8b1b      	ldrh	r3, [r3, #24]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d000      	beq.n	8003d72 <_ZN12ens210_class7readI2CEhh+0x86>
 8003d70:	e7f2      	b.n	8003d58 <_ZN12ens210_class7readI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8003d72:	4a57      	ldr	r2, [pc, #348]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8003d82:	4a53      	ldr	r2, [pc, #332]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d84:	4b52      	ldr	r3, [pc, #328]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8003d92:	4b4f      	ldr	r3, [pc, #316]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003d94:	8a9b      	ldrh	r3, [r3, #20]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf0c      	ite	eq
 8003da0:	2301      	moveq	r3, #1
 8003da2:	2300      	movne	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d000      	beq.n	8003dac <_ZN12ens210_class7readI2CEhh+0xc0>
 8003daa:	e7f2      	b.n	8003d92 <_ZN12ens210_class7readI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address to read
 8003dac:	4a48      	ldr	r2, [pc, #288]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7a1b      	ldrb	r3, [r3, #8]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8003db6:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003db8:	8a9b      	ldrh	r3, [r3, #20]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d000      	beq.n	8003dd0 <_ZN12ens210_class7readI2CEhh+0xe4>
 8003dce:	e7f2      	b.n	8003db6 <_ZN12ens210_class7readI2CEhh+0xca>
	if (I2C1->SR2);
 8003dd0:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003dd2:	8b1b      	ldrh	r3, [r3, #24]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 8003dd8:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF)); //?
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003de2:	8a9b      	ldrh	r3, [r3, #20]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf0c      	ite	eq
 8003dee:	2301      	moveq	r3, #1
 8003df0:	2300      	movne	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d000      	beq.n	8003dfa <_ZN12ens210_class7readI2CEhh+0x10e>
 8003df8:	e7f2      	b.n	8003de0 <_ZN12ens210_class7readI2CEhh+0xf4>
	I2C1->CR1|=I2C_CR1_START;
 8003dfa:	4a35      	ldr	r2, [pc, #212]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e0c:	8a9b      	ldrh	r3, [r3, #20]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d000      	beq.n	8003e24 <_ZN12ens210_class7readI2CEhh+0x138>
 8003e22:	e7f2      	b.n	8003e0a <_ZN12ens210_class7readI2CEhh+0x11e>
	I2C1->DR=this->addr|0x01; // address  read mode
 8003e24:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	7a1b      	ldrb	r3, [r3, #8]
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e36:	8a9b      	ldrh	r3, [r3, #20]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d000      	beq.n	8003e4e <_ZN12ens210_class7readI2CEhh+0x162>
 8003e4c:	e7f2      	b.n	8003e34 <_ZN12ens210_class7readI2CEhh+0x148>
	if (I2C1->SR2);
 8003e4e:	4b20      	ldr	r3, [pc, #128]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e50:	8b1b      	ldrh	r3, [r3, #24]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
	while (c < len)
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	78bb      	ldrb	r3, [r7, #2]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	da32      	bge.n	8003ec4 <_ZN12ens210_class7readI2CEhh+0x1d8>
	{
		if (c==(len-1))I2C1->CR1&=~I2C_CR1_ACK;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	78bb      	ldrb	r3, [r7, #2]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d107      	bne.n	8003e78 <_ZN12ens210_class7readI2CEhh+0x18c>
 8003e68:	4a19      	ldr	r2, [pc, #100]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e6a:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR1&I2C_SR1_RXNE));
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e7a:	8a9b      	ldrh	r3, [r3, #20]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d000      	beq.n	8003e92 <_ZN12ens210_class7readI2CEhh+0x1a6>
 8003e90:	e7f2      	b.n	8003e78 <_ZN12ens210_class7readI2CEhh+0x18c>

		this->buffer[c]=I2C1->DR;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
 8003e94:	4a0e      	ldr	r2, [pc, #56]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003e96:	8a12      	ldrh	r2, [r2, #16]
 8003e98:	b292      	uxth	r2, r2
 8003e9a:	b2d1      	uxtb	r1, r2
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	725a      	strb	r2, [r3, #9]
		c++;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	78bb      	ldrb	r3, [r7, #2]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d1d1      	bne.n	8003e56 <_ZN12ens210_class7readI2CEhh+0x16a>
		{
			I2C1->CR1|=I2C_CR1_STOP;
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8003ec2:	e7c8      	b.n	8003e56 <_ZN12ens210_class7readI2CEhh+0x16a>
		}


	};
	return 1;
 8003ec4:	2301      	movs	r3, #1
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40005400 	.word	0x40005400

08003ed4 <_ZN12ens210_class8writeI2CEhh>:

uint32_t ens210_class::writeI2C(uint8_t saddr, uint8_t len)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
	if ( (len<0 || len > 10) )  return 0;
 8003ee8:	78bb      	ldrb	r3, [r7, #2]
 8003eea:	2b0a      	cmp	r3, #10
 8003eec:	dd01      	ble.n	8003ef2 <_ZN12ens210_class8writeI2CEhh+0x1e>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e0a1      	b.n	8004036 <_ZN12ens210_class8writeI2CEhh+0x162>
	if ((I2C1->SR1 & 0xf0) != 0)
 8003ef2:	4b53      	ldr	r3, [pc, #332]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003ef4:	8a9b      	ldrh	r3, [r3, #20]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <_ZN12ens210_class8writeI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8003f0a:	4b4d      	ldr	r3, [pc, #308]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f10:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff feaa 	bl	8003c6c <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8003f18:	4b49      	ldr	r3, [pc, #292]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f1a:	8b1b      	ldrh	r3, [r3, #24]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d014      	beq.n	8003f5a <_ZN12ens210_class8writeI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8003f30:	4a43      	ldr	r2, [pc, #268]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8003f40:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f42:	8b1b      	ldrh	r3, [r3, #24]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d000      	beq.n	8003f5a <_ZN12ens210_class8writeI2CEhh+0x86>
 8003f58:	e7f2      	b.n	8003f40 <_ZN12ens210_class8writeI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8003f5a:	4a39      	ldr	r2, [pc, #228]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f5c:	4b38      	ldr	r3, [pc, #224]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8003f6a:	4a35      	ldr	r2, [pc, #212]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f6c:	4b34      	ldr	r3, [pc, #208]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f7c:	8a9b      	ldrh	r3, [r3, #20]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d000      	beq.n	8003f94 <_ZN12ens210_class8writeI2CEhh+0xc0>
 8003f92:	e7f2      	b.n	8003f7a <_ZN12ens210_class8writeI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address to read
 8003f94:	4a2a      	ldr	r2, [pc, #168]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7a1b      	ldrb	r3, [r3, #8]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003fa0:	8a9b      	ldrh	r3, [r3, #20]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d000      	beq.n	8003fb8 <_ZN12ens210_class8writeI2CEhh+0xe4>
 8003fb6:	e7f2      	b.n	8003f9e <_ZN12ens210_class8writeI2CEhh+0xca>
	if (I2C1->SR2);
 8003fb8:	4b21      	ldr	r3, [pc, #132]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003fba:	8b1b      	ldrh	r3, [r3, #24]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	b292      	uxth	r2, r2
 8003fc6:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_TXE));
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003fca:	8a9b      	ldrh	r3, [r3, #20]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d000      	beq.n	8003fe2 <_ZN12ens210_class8writeI2CEhh+0x10e>
 8003fe0:	e7f2      	b.n	8003fc8 <_ZN12ens210_class8writeI2CEhh+0xf4>
	while (c < len)
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	78bb      	ldrb	r3, [r7, #2]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	da24      	bge.n	8004034 <_ZN12ens210_class8writeI2CEhh+0x160>
	{
		while (!(I2C1->SR1&I2C_SR1_TXE));
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8003fec:	8a9b      	ldrh	r3, [r3, #20]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d000      	beq.n	8004004 <_ZN12ens210_class8writeI2CEhh+0x130>
 8004002:	e7f2      	b.n	8003fea <_ZN12ens210_class8writeI2CEhh+0x116>
		I2C1->DR=this->buffer[c];
 8004004:	490e      	ldr	r1, [pc, #56]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	7a5b      	ldrb	r3, [r3, #9]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	b29b      	uxth	r3, r3
 8004012:	820b      	strh	r3, [r1, #16]
		c++;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	3301      	adds	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	78bb      	ldrb	r3, [r7, #2]
 800401e:	429a      	cmp	r2, r3
 8004020:	d1df      	bne.n	8003fe2 <_ZN12ens210_class8writeI2CEhh+0x10e>
		{
			//I2C1->CR1&=~I2C_CR1_ACK;
			I2C1->CR1|=I2C_CR1_STOP;
 8004022:	4a07      	ldr	r2, [pc, #28]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402e:	b29b      	uxth	r3, r3
 8004030:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8004032:	e7d6      	b.n	8003fe2 <_ZN12ens210_class8writeI2CEhh+0x10e>
		}
	};
	return 1;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40005400 	.word	0x40005400

08004044 <_ZN12ens210_class9sens_initEv>:

uint32_t ens210_class::sens_init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	buffer[0]= 0x00;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	725a      	strb	r2, [r3, #9]
	writeI2C(SYS_CTRL);
 8004052:	2201      	movs	r2, #1
 8004054:	2110      	movs	r1, #16
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ff3c 	bl	8003ed4 <_ZN12ens210_class8writeI2CEhh>
	buffer[0]= 0x03;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2203      	movs	r2, #3
 8004060:	725a      	strb	r2, [r3, #9]
	writeI2C(SENS_RUN);
 8004062:	2201      	movs	r2, #1
 8004064:	2121      	movs	r1, #33	; 0x21
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff ff34 	bl	8003ed4 <_ZN12ens210_class8writeI2CEhh>
	writeI2C(SENS_START);
 800406c:	2201      	movs	r2, #1
 800406e:	2122      	movs	r1, #34	; 0x22
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff2f 	bl	8003ed4 <_ZN12ens210_class8writeI2CEhh>
	return 1;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <_ZN12ens210_class7appHookEv>:

uint32_t ens210_class::appHook(void)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	readI2C(T_VAL, T_VAL_SIZE);
 8004088:	2203      	movs	r2, #3
 800408a:	2130      	movs	r1, #48	; 0x30
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f7ff fe2d 	bl	8003cec <_ZN12ens210_class7readI2CEhh>
	temp=((float)( ( (uint32_t)((buffer[1]<<8) | buffer[2])) )/64)-273.15;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7a9b      	ldrb	r3, [r3, #10]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	7ad2      	ldrb	r2, [r2, #11]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	4313      	orrs	r3, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fc fb1a 	bl	80006dc <__aeabi_ui2f>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fc20 	bl	80008f4 <__aeabi_fdiv>
 80040b4:	4603      	mov	r3, r0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc f9b6 	bl	8000428 <__aeabi_f2d>
 80040bc:	a316      	add	r3, pc, #88	; (adr r3, 8004118 <_ZN12ens210_class7appHookEv+0x98>)
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f7fc f851 	bl	8000168 <__aeabi_dsub>
 80040c6:	4603      	mov	r3, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	4618      	mov	r0, r3
 80040cc:	4621      	mov	r1, r4
 80040ce:	f7fc f9ff 	bl	80004d0 <__aeabi_d2f>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]
	readI2C(H_VAL, H_VAL_SIZE);
 80040d8:	2203      	movs	r2, #3
 80040da:	2133      	movs	r1, #51	; 0x33
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fe05 	bl	8003cec <_ZN12ens210_class7readI2CEhh>
	hum=((float)((buffer[1]<<8) | buffer[2])/512);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	7a9b      	ldrb	r3, [r3, #10]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	7ad2      	ldrb	r2, [r2, #11]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	4313      	orrs	r3, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc faf6 	bl	80006e4 <__aeabi_i2f>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc fbf8 	bl	80008f4 <__aeabi_fdiv>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	605a      	str	r2, [r3, #4]
	return 1;
 800410c:	2301      	movs	r3, #1
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	bd90      	pop	{r4, r7, pc}
 8004116:	bf00      	nop
 8004118:	66666666 	.word	0x66666666
 800411c:	40711266 	.word	0x40711266

08004120 <_ZN12ens210_class7getTempEv>:

float ens210_class::getTemp()
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	return this->temp;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr

08004136 <_ZN12ens210_class11getHumidityEv>:

float ens210_class::getHumidity()
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
	return this->hum;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <main>:
QueueHandle_t sQueue;



int main(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af02      	add	r7, sp, #8
	prvClockCoreInit();
 8004152:	f000 f89b 	bl	800428c <_Z16prvClockCoreInitv>
	prvCommunicationInit();
 8004156:	f000 f8f3 	bl	8004340 <_Z20prvCommunicationInitv>
	GPIOC->CRL|= 0x4<<16;
 800415a:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <main+0x108>)
 800415c:	4b3d      	ldr	r3, [pc, #244]	; (8004254 <main+0x108>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
	RTask1.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8004166:	2200      	movs	r2, #0
 8004168:	210d      	movs	r1, #13
 800416a:	2001      	movs	r0, #1
 800416c:	f7fc ff76 	bl	800105c <xQueueGenericCreate>
 8004170:	4602      	mov	r2, r0
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <main+0x10c>)
 8004174:	611a      	str	r2, [r3, #16]
	RTask1.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8004176:	2200      	movs	r2, #0
 8004178:	210d      	movs	r1, #13
 800417a:	2001      	movs	r0, #1
 800417c:	f7fc ff6e 	bl	800105c <xQueueGenericCreate>
 8004180:	4602      	mov	r2, r0
 8004182:	4b35      	ldr	r3, [pc, #212]	; (8004258 <main+0x10c>)
 8004184:	615a      	str	r2, [r3, #20]
	RTask2.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8004186:	2200      	movs	r2, #0
 8004188:	210d      	movs	r1, #13
 800418a:	2001      	movs	r0, #1
 800418c:	f7fc ff66 	bl	800105c <xQueueGenericCreate>
 8004190:	4602      	mov	r2, r0
 8004192:	4b32      	ldr	r3, [pc, #200]	; (800425c <main+0x110>)
 8004194:	611a      	str	r2, [r3, #16]
	RTask2.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8004196:	2200      	movs	r2, #0
 8004198:	210d      	movs	r1, #13
 800419a:	2001      	movs	r0, #1
 800419c:	f7fc ff5e 	bl	800105c <xQueueGenericCreate>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b2e      	ldr	r3, [pc, #184]	; (800425c <main+0x110>)
 80041a4:	615a      	str	r2, [r3, #20]
	sQueue= xQueueCreate(3, sizeof(air_condition));
 80041a6:	2200      	movs	r2, #0
 80041a8:	2110      	movs	r1, #16
 80041aa:	2003      	movs	r0, #3
 80041ac:	f7fc ff56 	bl	800105c <xQueueGenericCreate>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <main+0x114>)
 80041b4:	601a      	str	r2, [r3, #0]
	pQComm.a1RX=RTask1.xCommRX;
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <main+0x10c>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <main+0x118>)
 80041bc:	6053      	str	r3, [r2, #4]
	pQComm.a1TX = RTask1.xCommTX;
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <main+0x10c>)
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <main+0x118>)
 80041c4:	6013      	str	r3, [r2, #0]
	pQComm.a2RX = RTask2.xCommRX;
 80041c6:	4b25      	ldr	r3, [pc, #148]	; (800425c <main+0x110>)
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4a26      	ldr	r2, [pc, #152]	; (8004264 <main+0x118>)
 80041cc:	60d3      	str	r3, [r2, #12]
	pQComm.a2TX = RTask2.xCommTX;
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <main+0x110>)
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4a24      	ldr	r2, [pc, #144]	; (8004264 <main+0x118>)
 80041d4:	6093      	str	r3, [r2, #8]
	pQComm.qSensor= sQueue;
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <main+0x114>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a22      	ldr	r2, [pc, #136]	; (8004264 <main+0x118>)
 80041dc:	6113      	str	r3, [r2, #16]

//xTaskCreate(ATaskCanBus, "CAN Task",  100, NULL, tskIDLE_PRIORITY,  NULL);
	xTaskCreate(ARadioTask, "RF Task1",  500,(void*) &RTask1 ,2,  NULL);
 80041de:	2300      	movs	r3, #0
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	2302      	movs	r3, #2
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4b1c      	ldr	r3, [pc, #112]	; (8004258 <main+0x10c>)
 80041e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041ec:	491e      	ldr	r1, [pc, #120]	; (8004268 <main+0x11c>)
 80041ee:	481f      	ldr	r0, [pc, #124]	; (800426c <main+0x120>)
 80041f0:	f7fd fb5c 	bl	80018ac <xTaskCreate>
	xTaskCreate(ARadioTaskS, "RF Task2",  500,(void*) &RTask2 ,2,  NULL);
 80041f4:	2300      	movs	r3, #0
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	2302      	movs	r3, #2
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4b17      	ldr	r3, [pc, #92]	; (800425c <main+0x110>)
 80041fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004202:	491b      	ldr	r1, [pc, #108]	; (8004270 <main+0x124>)
 8004204:	481b      	ldr	r0, [pc, #108]	; (8004274 <main+0x128>)
 8004206:	f7fd fb51 	bl	80018ac <xTaskCreate>
	//delete RTask1;
	xTaskCreate(aIAQCore, "TaskSensor",  100, (void*)sQueue, 2,  NULL);
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <main+0x114>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2300      	movs	r3, #0
 8004210:	9301      	str	r3, [sp, #4]
 8004212:	2302      	movs	r3, #2
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	2264      	movs	r2, #100	; 0x64
 800421a:	4917      	ldr	r1, [pc, #92]	; (8004278 <main+0x12c>)
 800421c:	4817      	ldr	r0, [pc, #92]	; (800427c <main+0x130>)
 800421e:	f7fd fb45 	bl	80018ac <xTaskCreate>
	xTaskCreate(run1Task, "Run2 Task",  100, NULL,2,  NULL);
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2302      	movs	r3, #2
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	2264      	movs	r2, #100	; 0x64
 800422e:	4914      	ldr	r1, [pc, #80]	; (8004280 <main+0x134>)
 8004230:	4814      	ldr	r0, [pc, #80]	; (8004284 <main+0x138>)
 8004232:	f7fd fb3b 	bl	80018ac <xTaskCreate>
	xTaskCreate(aTaskUart, "Run2 Task",  300, &pQComm,2,  NULL);
 8004236:	2300      	movs	r3, #0
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	2302      	movs	r3, #2
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <main+0x118>)
 8004240:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <main+0x134>)
 8004246:	4810      	ldr	r0, [pc, #64]	; (8004288 <main+0x13c>)
 8004248:	f7fd fb30 	bl	80018ac <xTaskCreate>
	vTaskStartScheduler();
 800424c:	f7fd fc94 	bl	8001b78 <vTaskStartScheduler>



  while (1)
 8004250:	e7fe      	b.n	8004250 <main+0x104>
 8004252:	bf00      	nop
 8004254:	40011000 	.word	0x40011000
 8004258:	20000034 	.word	0x20000034
 800425c:	20000050 	.word	0x20000050
 8004260:	2000020c 	.word	0x2000020c
 8004264:	200001f8 	.word	0x200001f8
 8004268:	080055d4 	.word	0x080055d4
 800426c:	08002b7d 	.word	0x08002b7d
 8004270:	080055e0 	.word	0x080055e0
 8004274:	08002c11 	.word	0x08002c11
 8004278:	080055ec 	.word	0x080055ec
 800427c:	08003933 	.word	0x08003933
 8004280:	080055f8 	.word	0x080055f8
 8004284:	0800437d 	.word	0x0800437d
 8004288:	080045ad 	.word	0x080045ad

0800428c <_Z16prvClockCoreInitv>:
  }
}

//core  clock init function, this a critical function
void prvClockCoreInit (void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_2;// flash latency delay 2t
 8004290:	4a29      	ldr	r2, [pc, #164]	; (8004338 <_Z16prvClockCoreInitv+0xac>)
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <_Z16prvClockCoreInitv+0xac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f043 0302 	orr.w	r3, r3, #2
 800429a:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE;// Perfech enable
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <_Z16prvClockCoreInitv+0xac>)
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <_Z16prvClockCoreInitv+0xac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f043 0310 	orr.w	r3, r3, #16
 80042a6:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0xC<<18);// set mul x14
 80042a8:	4a24      	ldr	r2, [pc, #144]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80042b2:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=~0x00010000; // set pll clk hsi div 2
 80042b4:	4a21      	ldr	r2, [pc, #132]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042b6:	4b21      	ldr	r3, [pc, #132]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042be:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=0xfffffffc;
 80042c0:	4a1e      	ldr	r2, [pc, #120]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042c2:	4b1e      	ldr	r3, [pc, #120]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=0x2;// use pll1 from clock
 80042cc:	4a1b      	ldr	r2, [pc, #108]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	6053      	str	r3, [r2, #4]
	RCC->CR|=0x1000000;// enable pll
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e2:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0<<13); //APB2 no div
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(4<<10);  // APB1 /2 28  MHz
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042f6:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(0<<7); // AHB no div
 80042f8:	4a10      	ldr	r2, [pc, #64]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	6053      	str	r3, [r2, #4]
	while(!(RCC->CR & RCC_CR_PLLRDY));// wait stabilize pll
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d000      	beq.n	8004318 <_Z16prvClockCoreInitv+0x8c>
 8004316:	e7f3      	b.n	8004300 <_Z16prvClockCoreInitv+0x74>
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));//56 Mhz
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <_Z16prvClockCoreInitv+0xb0>)
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf0c      	ite	eq
 8004324:	2301      	moveq	r3, #1
 8004326:	2300      	movne	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <_Z16prvClockCoreInitv+0xa4>
 800432e:	e7f3      	b.n	8004318 <_Z16prvClockCoreInitv+0x8c>
	/*RCC->APB1ENR=RCC_APB1ENR_CAN1EN;
		RCC->APB2ENR=RCC_APB2ENR_TIM1EN|RCC_APB2ENR_USART1EN;
		RCC->APB2ENR=RCC_APB2ENR_AFIOEN|RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN|RCC_APB2ENR_IOPCEN|
		RCC_APB2ENR_TIM1EN|RCC_APB2ENR_ADC1EN;// enable clk pereph here
		*/
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000

08004340 <_Z20prvCommunicationInitv>:

void prvCommunicationInit(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
	//RCC->APB1ENR|=RCC_APB1ENR_CAN1EN; //CAN clk EN
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN; //UART1 clk EN
 8004344:	4a0b      	ldr	r2, [pc, #44]	; (8004374 <_Z20prvCommunicationInitv+0x34>)
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <_Z20prvCommunicationInitv+0x34>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800434e:	6193      	str	r3, [r2, #24]
	// uart init definition
	USART1->BRR=((0x1e<<4)|4);//115200
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <_Z20prvCommunicationInitv+0x38>)
 8004352:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004356:	811a      	strh	r2, [r3, #8]
	USART1->CR1|=USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <_Z20prvCommunicationInitv+0x38>)
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <_Z20prvCommunicationInitv+0x38>)
 800435c:	899b      	ldrh	r3, [r3, #12]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004364:	f043 030c 	orr.w	r3, r3, #12
 8004368:	b29b      	uxth	r3, r3
 800436a:	8193      	strh	r3, [r2, #12]
	/*RCC->APB2ENR|=RCC_APB2ENR_SPI1EN  ;
	SPI1->CR1=0;
	SPI1->CR1=(0x6<<3)|SPI_CR1_MSTR; // clock div 128(56M/128), SPI is a master mode
	SPI1->CR1|=SPI_CR1_SPE;*/

}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40021000 	.word	0x40021000
 8004378:	40013800 	.word	0x40013800

0800437c <_Z8run1TaskPv>:

void run1Task(void *pvParameters)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	int x,y;
	for(;;)
	{
		x++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3301      	adds	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
		y=x+y;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]
		if (x>1000000) x=0;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a05      	ldr	r2, [pc, #20]	; (80043ac <_Z8run1TaskPv+0x30>)
 8004396:	4293      	cmp	r3, r2
 8004398:	dd01      	ble.n	800439e <_Z8run1TaskPv+0x22>
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
		if (y>999999)y=0;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <_Z8run1TaskPv+0x34>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	ddee      	ble.n	8004384 <_Z8run1TaskPv+0x8>
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
		x++;
 80043aa:	e7eb      	b.n	8004384 <_Z8run1TaskPv+0x8>
 80043ac:	000f4240 	.word	0x000f4240
 80043b0:	000f423f 	.word	0x000f423f

080043b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80043b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80043ba:	e003      	b.n	80043c4 <LoopCopyDataInit>

080043bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80043be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80043c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80043c2:	3104      	adds	r1, #4

080043c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80043c4:	480b      	ldr	r0, [pc, #44]	; (80043f4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80043c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80043ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80043cc:	d3f6      	bcc.n	80043bc <CopyDataInit>
	ldr	r2, =_sbss
 80043ce:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80043d0:	e002      	b.n	80043d8 <LoopFillZerobss>

080043d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80043d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80043d4:	f842 3b04 	str.w	r3, [r2], #4

080043d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80043da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80043dc:	d3f9      	bcc.n	80043d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043de:	f000 f82b 	bl	8004438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043e2:	f000 fbb5 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80043e6:	f7ff feb1 	bl	800414c <main>
	bx	lr
 80043ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80043ec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80043f0:	080056b0 	.word	0x080056b0
	ldr	r0, =_sdata
 80043f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80043f8:	200000d0 	.word	0x200000d0
	ldr	r2, =_sbss
 80043fc:	200000d0 	.word	0x200000d0
	ldr	r3, = _ebss
 8004400:	2000028c 	.word	0x2000028c

08004404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC1_2_IRQHandler>

08004406 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
}
 800440a:	bf00      	nop
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004416:	e7fe      	b.n	8004416 <HardFault_Handler+0x4>

08004418 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800441c:	e7fe      	b.n	800441c <MemManage_Handler+0x4>

0800441e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800441e:	b480      	push	{r7}
 8004420:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004422:	e7fe      	b.n	8004422 <BusFault_Handler+0x4>

08004424 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004428:	e7fe      	b.n	8004428 <UsageFault_Handler+0x4>

0800442a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr
	...

08004438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <SystemInit+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <SystemInit+0x5c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <SystemInit+0x5c>)
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <SystemInit+0x5c>)
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <SystemInit+0x60>)
 8004450:	4013      	ands	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004454:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <SystemInit+0x5c>)
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <SystemInit+0x5c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800445e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004462:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <SystemInit+0x5c>)
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <SystemInit+0x5c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800446e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004470:	4a08      	ldr	r2, [pc, #32]	; (8004494 <SystemInit+0x5c>)
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <SystemInit+0x5c>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800447a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <SystemInit+0x5c>)
 800447e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004482:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004484:	f000 f80c 	bl	80044a0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <SystemInit+0x64>)
 800448a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800448e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40021000 	.word	0x40021000
 8004498:	f8ff0000 	.word	0xf8ff0000
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_36MHz
  SetSysClockTo36();
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
 80044a4:	f000 f802 	bl	80044ac <SetSysClockTo56>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80044a8:	bf00      	nop
 80044aa:	bd80      	pop	{r7, pc}

080044ac <SetSysClockTo56>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo56(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
 80044b6:	2300      	movs	r3, #0
 80044b8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80044ba:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <SetSysClockTo56+0xf8>)
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <SetSysClockTo56+0xf8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80044c6:	4b37      	ldr	r3, [pc, #220]	; (80045a4 <SetSysClockTo56+0xf8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3301      	adds	r3, #1
 80044d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d103      	bne.n	80044e4 <SetSysClockTo56+0x38>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044e2:	d1f0      	bne.n	80044c6 <SetSysClockTo56+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80044e4:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <SetSysClockTo56+0xf8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <SetSysClockTo56+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80044f0:	2301      	movs	r3, #1
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	e001      	b.n	80044fa <SetSysClockTo56+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80044f6:	2300      	movs	r3, #0
 80044f8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d14b      	bne.n	8004598 <SetSysClockTo56+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8004500:	4a29      	ldr	r2, [pc, #164]	; (80045a8 <SetSysClockTo56+0xfc>)
 8004502:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <SetSysClockTo56+0xfc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f043 0310 	orr.w	r3, r3, #16
 800450a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800450c:	4a26      	ldr	r2, [pc, #152]	; (80045a8 <SetSysClockTo56+0xfc>)
 800450e:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <SetSysClockTo56+0xfc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <SetSysClockTo56+0xfc>)
 800451a:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <SetSysClockTo56+0xfc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6013      	str	r3, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <SetSysClockTo56+0xf8>)
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8004534:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004536:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800453e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL7); 
#else     
    /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004540:	4a18      	ldr	r2, [pc, #96]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004542:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800454a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <SetSysClockTo56+0xf8>)
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 8004556:	6053      	str	r3, [r2, #4]

#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004558:	4a12      	ldr	r2, [pc, #72]	; (80045a4 <SetSysClockTo56+0xf8>)
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <SetSysClockTo56+0xf8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004564:	bf00      	nop
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f9      	beq.n	8004566 <SetSysClockTo56+0xba>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004572:	4a0c      	ldr	r2, [pc, #48]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004574:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f023 0303 	bic.w	r3, r3, #3
 800457c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800457e:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <SetSysClockTo56+0xf8>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f043 0302 	orr.w	r3, r3, #2
 8004588:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800458a:	bf00      	nop
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <SetSysClockTo56+0xf8>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d1f9      	bne.n	800458c <SetSysClockTo56+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40022000 	.word	0x40022000

080045ac <_Z9aTaskUartPv>:
char bufTx[50];
char bufTmp[50];
void printUart(char * str);
char* rawtohex(void* data, uint32_t count,  char * str);
void aTaskUart(void * pvParameters)
{
 80045ac:	b590      	push	{r4, r7, lr}
 80045ae:	b091      	sub	sp, #68	; 0x44
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

	pQueueComm* pQComm = (pQueueComm*)pvParameters;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	//preset ports
	pack rx;
 80045b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fe fb53 	bl	8002c68 <_ZN4packC1Ev>
	pack tx;
 80045c2:	f107 031c 	add.w	r3, r7, #28
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fb4e 	bl	8002c68 <_ZN4packC1Ev>
	air_condition airData;
	GPIOA->CRH&=~(0xff<<4);
 80045cc:	4a58      	ldr	r2, [pc, #352]	; (8004730 <_Z9aTaskUartPv+0x184>)
 80045ce:	4b58      	ldr	r3, [pc, #352]	; (8004730 <_Z9aTaskUartPv+0x184>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80045d6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH|=0x49<<4;
 80045d8:	4a55      	ldr	r2, [pc, #340]	; (8004730 <_Z9aTaskUartPv+0x184>)
 80045da:	4b55      	ldr	r3, [pc, #340]	; (8004730 <_Z9aTaskUartPv+0x184>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f443 6392 	orr.w	r3, r3, #1168	; 0x490
 80045e2:	6053      	str	r3, [r2, #4]
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN;
 80045e4:	4a53      	ldr	r2, [pc, #332]	; (8004734 <_Z9aTaskUartPv+0x188>)
 80045e6:	4b53      	ldr	r3, [pc, #332]	; (8004734 <_Z9aTaskUartPv+0x188>)
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ee:	6193      	str	r3, [r2, #24]
	USART1->BRR=((0x1e<<4)|4);//115200
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <_Z9aTaskUartPv+0x18c>)
 80045f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80045f6:	811a      	strh	r2, [r3, #8]
	USART1->CR1|=USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80045f8:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <_Z9aTaskUartPv+0x18c>)
 80045fa:	4b4f      	ldr	r3, [pc, #316]	; (8004738 <_Z9aTaskUartPv+0x18c>)
 80045fc:	899b      	ldrh	r3, [r3, #12]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004604:	f043 030c 	orr.w	r3, r3, #12
 8004608:	b29b      	uxth	r3, r3
 800460a:	8193      	strh	r3, [r2, #12]
	tx.addrdst=87;
 800460c:	2357      	movs	r3, #87	; 0x57
 800460e:	777b      	strb	r3, [r7, #29]
	tx.bLeng=10;
 8004610:	230a      	movs	r3, #10
 8004612:	773b      	strb	r3, [r7, #28]
	tx.addrsrc=255;
 8004614:	23ff      	movs	r3, #255	; 0xff
 8004616:	77bb      	strb	r3, [r7, #30]
	tx.crc8d=255;
 8004618:	23ff      	movs	r3, #255	; 0xff
 800461a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	tx.data[0]=127;
 800461e:	237f      	movs	r3, #127	; 0x7f
 8004620:	77fb      	strb	r3, [r7, #31]
	tx.data[1]=255;
 8004622:	23ff      	movs	r3, #255	; 0xff
 8004624:	f887 3020 	strb.w	r3, [r7, #32]
	tx.data[2]=127;
 8004628:	237f      	movs	r3, #127	; 0x7f
 800462a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx.data[3]=255;
 800462e:	23ff      	movs	r3, #255	; 0xff
 8004630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	tx.data[4]=255;
 8004634:	23ff      	movs	r3, #255	; 0xff
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tx.data[5]=255;
 800463a:	23ff      	movs	r3, #255	; 0xff
 800463c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tx.rssi=255;
 8004640:	23ff      	movs	r3, #255	; 0xff
 8004642:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bufTx[0]=0;
 8004646:	4b3d      	ldr	r3, [pc, #244]	; (800473c <_Z9aTaskUartPv+0x190>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
	vTaskDelay(1000 / portTICK_PERIOD_MS);
 800464c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004650:	f7fd fa5e 	bl	8001b10 <vTaskDelay>
	if(uxQueueSpacesAvailable(pQComm->a1TX))
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc ffc1 	bl	80015e0 <uxQueueSpacesAvailable>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <_Z9aTaskUartPv+0xde>
				{
					tx.addrdst=88;
 800466e:	2358      	movs	r3, #88	; 0x58
 8004670:	777b      	strb	r3, [r7, #29]
					tx.rssi=rx.rssi_r;
 8004672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004676:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					xQueueSend(pQComm->a1TX,&tx,0);
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f107 011c 	add.w	r1, r7, #28
 8004682:	2300      	movs	r3, #0
 8004684:	2200      	movs	r2, #0
 8004686:	f7fc fd3d 	bl	8001104 <xQueueGenericSend>
				};
	while(1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 800468a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800468e:	f7fd fa3f 	bl	8001b10 <vTaskDelay>
		//USART1->DR= 0x30;


		if(xQueueReceive( pQComm->a1RX, &rx,0)==pdPASS)
 8004692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800469a:	2200      	movs	r2, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f7fc fec3 	bl	8001428 <xQueueReceive>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04c      	beq.n	800474c <_Z9aTaskUartPv+0x1a0>
		{
			//xQueueReceive( pQComm->a1RX, &rx,0);
			strcpy(bufTx, "APP1 data:\0");
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <_Z9aTaskUartPv+0x190>)
 80046b4:	4a22      	ldr	r2, [pc, #136]	; (8004740 <_Z9aTaskUartPv+0x194>)
 80046b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80046b8:	c303      	stmia	r3!, {r0, r1}
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	3302      	adds	r3, #2
 80046be:	0c12      	lsrs	r2, r2, #16
 80046c0:	701a      	strb	r2, [r3, #0]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 80046c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046c6:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <_Z9aTaskUartPv+0x198>)
 80046c8:	210d      	movs	r1, #13
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 f99a 	bl	8004a04 <_Z8rawtohexPvmPc>
 80046d0:	4603      	mov	r3, r0
 80046d2:	4619      	mov	r1, r3
 80046d4:	4819      	ldr	r0, [pc, #100]	; (800473c <_Z9aTaskUartPv+0x190>)
 80046d6:	f000 fbb7 	bl	8004e48 <strcat>
			strcat(bufTx, "\n");
 80046da:	4818      	ldr	r0, [pc, #96]	; (800473c <_Z9aTaskUartPv+0x190>)
 80046dc:	f7fb fd38 	bl	8000150 <strlen>
 80046e0:	4603      	mov	r3, r0
 80046e2:	461a      	mov	r2, r3
 80046e4:	4b15      	ldr	r3, [pc, #84]	; (800473c <_Z9aTaskUartPv+0x190>)
 80046e6:	4413      	add	r3, r2
 80046e8:	4917      	ldr	r1, [pc, #92]	; (8004748 <_Z9aTaskUartPv+0x19c>)
 80046ea:	461a      	mov	r2, r3
 80046ec:	460b      	mov	r3, r1
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80046f2:	4812      	ldr	r0, [pc, #72]	; (800473c <_Z9aTaskUartPv+0x190>)
 80046f4:	f000 f94a 	bl	800498c <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a1TX))
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc ff6f 	bl	80015e0 <uxQueueSpacesAvailable>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d073      	beq.n	80047fa <_Z9aTaskUartPv+0x24e>
			{
				tx.addrdst=88;
 8004712:	2358      	movs	r3, #88	; 0x58
 8004714:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 8004716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800471a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a1TX,&tx,0);
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f107 011c 	add.w	r1, r7, #28
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	f7fc fceb 	bl	8001104 <xQueueGenericSend>
 800472e:	e064      	b.n	80047fa <_Z9aTaskUartPv+0x24e>
 8004730:	40010800 	.word	0x40010800
 8004734:	40021000 	.word	0x40021000
 8004738:	40013800 	.word	0x40013800
 800473c:	20000210 	.word	0x20000210
 8004740:	08005604 	.word	0x08005604
 8004744:	20000244 	.word	0x20000244
 8004748:	08005610 	.word	0x08005610
			};


		}else if(xQueueReceive( pQComm->a2RX, &rx,0)==pdPASS)
 800474c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004754:	2200      	movs	r2, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc fe66 	bl	8001428 <xQueueReceive>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d046      	beq.n	80047fa <_Z9aTaskUartPv+0x24e>
		{
			//xQueueReceive( pQComm->a2RX, &rx,0);
			strcat(bufTx, "APP2 data:\0");
 800476c:	487c      	ldr	r0, [pc, #496]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800476e:	f7fb fcef 	bl	8000150 <strlen>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	4b7a      	ldr	r3, [pc, #488]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004778:	4413      	add	r3, r2
 800477a:	497a      	ldr	r1, [pc, #488]	; (8004964 <_Z9aTaskUartPv+0x3b8>)
 800477c:	461a      	mov	r2, r3
 800477e:	460b      	mov	r3, r1
 8004780:	cb03      	ldmia	r3!, {r0, r1}
 8004782:	6010      	str	r0, [r2, #0]
 8004784:	6051      	str	r1, [r2, #4]
 8004786:	8819      	ldrh	r1, [r3, #0]
 8004788:	789b      	ldrb	r3, [r3, #2]
 800478a:	8111      	strh	r1, [r2, #8]
 800478c:	7293      	strb	r3, [r2, #10]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 800478e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004792:	4a75      	ldr	r2, [pc, #468]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 8004794:	210d      	movs	r1, #13
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f934 	bl	8004a04 <_Z8rawtohexPvmPc>
 800479c:	4603      	mov	r3, r0
 800479e:	4619      	mov	r1, r3
 80047a0:	486f      	ldr	r0, [pc, #444]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80047a2:	f000 fb51 	bl	8004e48 <strcat>
			strcat(bufTx, "\n\0");
 80047a6:	486e      	ldr	r0, [pc, #440]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80047a8:	f7fb fcd2 	bl	8000150 <strlen>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80047b2:	4413      	add	r3, r2
 80047b4:	496d      	ldr	r1, [pc, #436]	; (800496c <_Z9aTaskUartPv+0x3c0>)
 80047b6:	461a      	mov	r2, r3
 80047b8:	460b      	mov	r3, r1
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80047be:	4868      	ldr	r0, [pc, #416]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80047c0:	f000 f8e4 	bl	800498c <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a2TX))
 80047c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc ff09 	bl	80015e0 <uxQueueSpacesAvailable>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <_Z9aTaskUartPv+0x24e>
			{
				tx.addrdst=87;
 80047de:	2357      	movs	r3, #87	; 0x57
 80047e0:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 80047e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a2TX,&tx,0);
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	6898      	ldr	r0, [r3, #8]
 80047ee:	f107 011c 	add.w	r1, r7, #28
 80047f2:	2300      	movs	r3, #0
 80047f4:	2200      	movs	r2, #0
 80047f6:	f7fc fc85 	bl	8001104 <xQueueGenericSend>
			};
		};
		if(xQueueReceive( pQComm->qSensor, &airData,0)==pdPASS)
 80047fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	f107 010c 	add.w	r1, r7, #12
 8004802:	2200      	movs	r2, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fe0f 	bl	8001428 <xQueueReceive>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	f43f af37 	beq.w	800468a <_Z9aTaskUartPv+0xde>
		{
			strcat(bufTx, "CO2: ");
 800481c:	4850      	ldr	r0, [pc, #320]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800481e:	f7fb fc97 	bl	8000150 <strlen>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	4b4e      	ldr	r3, [pc, #312]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004828:	4413      	add	r3, r2
 800482a:	4a51      	ldr	r2, [pc, #324]	; (8004970 <_Z9aTaskUartPv+0x3c4>)
 800482c:	6810      	ldr	r0, [r2, #0]
 800482e:	6018      	str	r0, [r3, #0]
 8004830:	8892      	ldrh	r2, [r2, #4]
 8004832:	809a      	strh	r2, [r3, #4]

			strcat(bufTx, itoa((int)airData.CO2, bufTmp, 10));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	220a      	movs	r2, #10
 8004838:	494b      	ldr	r1, [pc, #300]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f9c4 	bl	8004bc8 <itoa>
 8004840:	4603      	mov	r3, r0
 8004842:	4619      	mov	r1, r3
 8004844:	4846      	ldr	r0, [pc, #280]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004846:	f000 faff 	bl	8004e48 <strcat>
			strcat(bufTx,"\n");
 800484a:	4845      	ldr	r0, [pc, #276]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800484c:	f7fb fc80 	bl	8000150 <strlen>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004856:	4413      	add	r3, r2
 8004858:	4946      	ldr	r1, [pc, #280]	; (8004974 <_Z9aTaskUartPv+0x3c8>)
 800485a:	461a      	mov	r2, r3
 800485c:	460b      	mov	r3, r1
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "TVOC: ");
 8004862:	483f      	ldr	r0, [pc, #252]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004864:	f7fb fc74 	bl	8000150 <strlen>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	4b3c      	ldr	r3, [pc, #240]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800486e:	4413      	add	r3, r2
 8004870:	4a41      	ldr	r2, [pc, #260]	; (8004978 <_Z9aTaskUartPv+0x3cc>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	6018      	str	r0, [r3, #0]
 8004876:	8891      	ldrh	r1, [r2, #4]
 8004878:	7992      	ldrb	r2, [r2, #6]
 800487a:	8099      	strh	r1, [r3, #4]
 800487c:	719a      	strb	r2, [r3, #6]

			strcat(bufTx, itoa((int)airData.TVOC, bufTmp, 10));
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	220a      	movs	r2, #10
 8004882:	4939      	ldr	r1, [pc, #228]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f99f 	bl	8004bc8 <itoa>
 800488a:	4603      	mov	r3, r0
 800488c:	4619      	mov	r1, r3
 800488e:	4834      	ldr	r0, [pc, #208]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004890:	f000 fada 	bl	8004e48 <strcat>
			strcat(bufTx,"\n");
 8004894:	4832      	ldr	r0, [pc, #200]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004896:	f7fb fc5b 	bl	8000150 <strlen>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048a0:	4413      	add	r3, r2
 80048a2:	4934      	ldr	r1, [pc, #208]	; (8004974 <_Z9aTaskUartPv+0x3c8>)
 80048a4:	461a      	mov	r2, r3
 80048a6:	460b      	mov	r3, r1
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80048ac:	482c      	ldr	r0, [pc, #176]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048ae:	f000 f86d 	bl	800498c <_Z9printUartPc>
			strcat(bufTx, "Temp: ");
 80048b2:	482b      	ldr	r0, [pc, #172]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048b4:	f7fb fc4c 	bl	8000150 <strlen>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048be:	4413      	add	r3, r2
 80048c0:	4a2e      	ldr	r2, [pc, #184]	; (800497c <_Z9aTaskUartPv+0x3d0>)
 80048c2:	6810      	ldr	r0, [r2, #0]
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	8891      	ldrh	r1, [r2, #4]
 80048c8:	7992      	ldrb	r2, [r2, #6]
 80048ca:	8099      	strh	r1, [r3, #4]
 80048cc:	719a      	strb	r2, [r3, #6]
			sprintf(bufTmp, "%4.2f", airData.temp);
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fb fda9 	bl	8000428 <__aeabi_f2d>
 80048d6:	4603      	mov	r3, r0
 80048d8:	460c      	mov	r4, r1
 80048da:	461a      	mov	r2, r3
 80048dc:	4623      	mov	r3, r4
 80048de:	4928      	ldr	r1, [pc, #160]	; (8004980 <_Z9aTaskUartPv+0x3d4>)
 80048e0:	4821      	ldr	r0, [pc, #132]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 80048e2:	f000 fa8d 	bl	8004e00 <siprintf>
			strcat(bufTx, bufTmp);
 80048e6:	4920      	ldr	r1, [pc, #128]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 80048e8:	481d      	ldr	r0, [pc, #116]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048ea:	f000 faad 	bl	8004e48 <strcat>
			strcat(bufTx,"\n");
 80048ee:	481c      	ldr	r0, [pc, #112]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048f0:	f7fb fc2e 	bl	8000150 <strlen>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 80048fa:	4413      	add	r3, r2
 80048fc:	491d      	ldr	r1, [pc, #116]	; (8004974 <_Z9aTaskUartPv+0x3c8>)
 80048fe:	461a      	mov	r2, r3
 8004900:	460b      	mov	r3, r1
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "Humidity: ");
 8004906:	4816      	ldr	r0, [pc, #88]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004908:	f7fb fc22 	bl	8000150 <strlen>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004912:	4413      	add	r3, r2
 8004914:	491b      	ldr	r1, [pc, #108]	; (8004984 <_Z9aTaskUartPv+0x3d8>)
 8004916:	461a      	mov	r2, r3
 8004918:	460b      	mov	r3, r1
 800491a:	cb03      	ldmia	r3!, {r0, r1}
 800491c:	6010      	str	r0, [r2, #0]
 800491e:	6051      	str	r1, [r2, #4]
 8004920:	8819      	ldrh	r1, [r3, #0]
 8004922:	789b      	ldrb	r3, [r3, #2]
 8004924:	8111      	strh	r1, [r2, #8]
 8004926:	7293      	strb	r3, [r2, #10]
			sprintf(bufTmp, "%4.2f",(float) -12.125);
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	4b16      	ldr	r3, [pc, #88]	; (8004988 <_Z9aTaskUartPv+0x3dc>)
 800492e:	4914      	ldr	r1, [pc, #80]	; (8004980 <_Z9aTaskUartPv+0x3d4>)
 8004930:	480d      	ldr	r0, [pc, #52]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 8004932:	f000 fa65 	bl	8004e00 <siprintf>
			strcat(bufTx, bufTmp);
 8004936:	490c      	ldr	r1, [pc, #48]	; (8004968 <_Z9aTaskUartPv+0x3bc>)
 8004938:	4809      	ldr	r0, [pc, #36]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800493a:	f000 fa85 	bl	8004e48 <strcat>
			strcat(bufTx,"\n");
 800493e:	4808      	ldr	r0, [pc, #32]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004940:	f7fb fc06 	bl	8000150 <strlen>
 8004944:	4603      	mov	r3, r0
 8004946:	461a      	mov	r2, r3
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 800494a:	4413      	add	r3, r2
 800494c:	4909      	ldr	r1, [pc, #36]	; (8004974 <_Z9aTaskUartPv+0x3c8>)
 800494e:	461a      	mov	r2, r3
 8004950:	460b      	mov	r3, r1
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 8004956:	4802      	ldr	r0, [pc, #8]	; (8004960 <_Z9aTaskUartPv+0x3b4>)
 8004958:	f000 f818 	bl	800498c <_Z9printUartPc>
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 800495c:	e695      	b.n	800468a <_Z9aTaskUartPv+0xde>
 800495e:	bf00      	nop
 8004960:	20000210 	.word	0x20000210
 8004964:	08005614 	.word	0x08005614
 8004968:	20000244 	.word	0x20000244
 800496c:	08005620 	.word	0x08005620
 8004970:	08005624 	.word	0x08005624
 8004974:	08005610 	.word	0x08005610
 8004978:	0800562c 	.word	0x0800562c
 800497c:	08005634 	.word	0x08005634
 8004980:	0800563c 	.word	0x0800563c
 8004984:	08005644 	.word	0x08005644
 8004988:	c0284000 	.word	0xc0284000

0800498c <_Z9printUartPc>:

	}

}
void printUart(char * str)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

	int i=0;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d017      	beq.n	80049d4 <_Z9printUartPc+0x48>
	{
		while (!(USART1->SR & USART_SR_TXE));
 80049a4:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <_Z9printUartPc+0x74>)
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	bf0c      	ite	eq
 80049b2:	2301      	moveq	r3, #1
 80049b4:	2300      	movne	r3, #0
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d000      	beq.n	80049be <_Z9printUartPc+0x32>
 80049bc:	e7f2      	b.n	80049a4 <_Z9printUartPc+0x18>
		USART1->DR=str[i];
 80049be:	4910      	ldr	r1, [pc, #64]	; (8004a00 <_Z9printUartPc+0x74>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4413      	add	r3, r2
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	808b      	strh	r3, [r1, #4]
		i++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3301      	adds	r3, #1
 80049d0:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 80049d2:	e7e1      	b.n	8004998 <_Z9printUartPc+0xc>
	}
	while (!(USART1->SR & USART_SR_TXE));
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <_Z9printUartPc+0x74>)
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf0c      	ite	eq
 80049e2:	2301      	moveq	r3, #1
 80049e4:	2300      	movne	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d000      	beq.n	80049ee <_Z9printUartPc+0x62>
 80049ec:	e7f2      	b.n	80049d4 <_Z9printUartPc+0x48>
	str[0]=0;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]

}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40013800 	.word	0x40013800

08004a04 <_Z8rawtohexPvmPc>:

char* rawtohex(void* data, uint32_t count,  char * str)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
	uint32_t i=0, is=0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
	while (i<count)
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d269      	bcs.n	8004af4 <_Z8rawtohexPvmPc+0xf0>
	{
		char b, c=0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 8004a24:	7dbb      	ldrb	r3, [r7, #22]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	dc58      	bgt.n	8004adc <_Z8rawtohexPvmPc+0xd8>
		{
			if (c==0) b= ( *((uint8_t*)data+i) >> 4 ) & 0x0f; else b = *((uint8_t*)data+i) & 0x0f;
 8004a2a:	7dbb      	ldrb	r3, [r7, #22]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <_Z8rawtohexPvmPc+0x3a>
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	091b      	lsrs	r3, r3, #4
 8004a3a:	75fb      	strb	r3, [r7, #23]
 8004a3c:	e006      	b.n	8004a4c <_Z8rawtohexPvmPc+0x48>
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	75fb      	strb	r3, [r7, #23]
			switch (b)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d838      	bhi.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <_Z8rawtohexPvmPc+0x54>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a99 	.word	0x08004a99
 8004a5c:	08004a99 	.word	0x08004a99
 8004a60:	08004a99 	.word	0x08004a99
 8004a64:	08004a99 	.word	0x08004a99
 8004a68:	08004a99 	.word	0x08004a99
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	08004a99 	.word	0x08004a99
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004a99 	.word	0x08004a99
 8004a80:	08004aa1 	.word	0x08004aa1
 8004a84:	08004aa7 	.word	0x08004aa7
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ab3 	.word	0x08004ab3
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004abf 	.word	0x08004abf
			{
			case 0: case 1:	case 2:	case 3:	case 4:	case 5:	case 6:	case 7:	case 8:	case 9:
			{
				b+=0x30; break;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	3330      	adds	r3, #48	; 0x30
 8004a9c:	75fb      	strb	r3, [r7, #23]
 8004a9e:	e011      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			};
			case 10: b='A'; break;
 8004aa0:	2341      	movs	r3, #65	; 0x41
 8004aa2:	75fb      	strb	r3, [r7, #23]
 8004aa4:	e00e      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			case 11: b='B'; break;
 8004aa6:	2342      	movs	r3, #66	; 0x42
 8004aa8:	75fb      	strb	r3, [r7, #23]
 8004aaa:	e00b      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			case 12: b='C'; break;
 8004aac:	2343      	movs	r3, #67	; 0x43
 8004aae:	75fb      	strb	r3, [r7, #23]
 8004ab0:	e008      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			case 13: b='D'; break;
 8004ab2:	2344      	movs	r3, #68	; 0x44
 8004ab4:	75fb      	strb	r3, [r7, #23]
 8004ab6:	e005      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			case 14: b='E'; break;
 8004ab8:	2345      	movs	r3, #69	; 0x45
 8004aba:	75fb      	strb	r3, [r7, #23]
 8004abc:	e002      	b.n	8004ac4 <_Z8rawtohexPvmPc+0xc0>
			case 15: b='F'; break;
 8004abe:	2346      	movs	r3, #70	; 0x46
 8004ac0:	75fb      	strb	r3, [r7, #23]
 8004ac2:	bf00      	nop
			}
			str[is]=b;
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4413      	add	r3, r2
 8004aca:	7dfa      	ldrb	r2, [r7, #23]
 8004acc:	701a      	strb	r2, [r3, #0]
			is++;
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	61bb      	str	r3, [r7, #24]
			c++;
 8004ad4:	7dbb      	ldrb	r3, [r7, #22]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 8004ada:	e7a3      	b.n	8004a24 <_Z8rawtohexPvmPc+0x20>
		}
		str[is]=',';
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	222c      	movs	r2, #44	; 0x2c
 8004ae4:	701a      	strb	r2, [r3, #0]
		is++;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61bb      	str	r3, [r7, #24]
		i++;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	3301      	adds	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
	while (i<count)
 8004af2:	e791      	b.n	8004a18 <_Z8rawtohexPvmPc+0x14>
	}
	str[is-1]=0;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
	return str;
 8004b00:	687b      	ldr	r3, [r7, #4]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	; 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <_Znwj>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	bf14      	ite	ne
 8004b12:	4604      	movne	r4, r0
 8004b14:	2401      	moveq	r4, #1
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f858 	bl	8004bcc <malloc>
 8004b1c:	b930      	cbnz	r0, 8004b2c <_Znwj+0x20>
 8004b1e:	f000 f807 	bl	8004b30 <_ZSt15get_new_handlerv>
 8004b22:	b908      	cbnz	r0, 8004b28 <_Znwj+0x1c>
 8004b24:	f000 f80c 	bl	8004b40 <abort>
 8004b28:	4780      	blx	r0
 8004b2a:	e7f4      	b.n	8004b16 <_Znwj+0xa>
 8004b2c:	bd10      	pop	{r4, pc}
	...

08004b30 <_ZSt15get_new_handlerv>:
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <_ZSt15get_new_handlerv+0xc>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	f3bf 8f5b 	dmb	ish
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000278 	.word	0x20000278

08004b40 <abort>:
 8004b40:	b508      	push	{r3, lr}
 8004b42:	2006      	movs	r0, #6
 8004b44:	f000 f940 	bl	8004dc8 <raise>
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f000 fd2d 	bl	80055a8 <_exit>
	...

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	2500      	movs	r5, #0
 8004b54:	4e0c      	ldr	r6, [pc, #48]	; (8004b88 <__libc_init_array+0x38>)
 8004b56:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b58:	1ba4      	subs	r4, r4, r6
 8004b5a:	10a4      	asrs	r4, r4, #2
 8004b5c:	42a5      	cmp	r5, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	f000 fd24 	bl	80055ac <_init>
 8004b64:	2500      	movs	r5, #0
 8004b66:	4e0a      	ldr	r6, [pc, #40]	; (8004b90 <__libc_init_array+0x40>)
 8004b68:	4c0a      	ldr	r4, [pc, #40]	; (8004b94 <__libc_init_array+0x44>)
 8004b6a:	1ba4      	subs	r4, r4, r6
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	42a5      	cmp	r5, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b78:	4798      	blx	r3
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b82:	4798      	blx	r3
 8004b84:	3501      	adds	r5, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	080056a8 	.word	0x080056a8
 8004b8c:	080056a8 	.word	0x080056a8
 8004b90:	080056a8 	.word	0x080056a8
 8004b94:	080056ac 	.word	0x080056ac

08004b98 <__itoa>:
 8004b98:	1e93      	subs	r3, r2, #2
 8004b9a:	2b22      	cmp	r3, #34	; 0x22
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	d904      	bls.n	8004bac <__itoa+0x14>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	700b      	strb	r3, [r1, #0]
 8004ba8:	4620      	mov	r0, r4
 8004baa:	bd10      	pop	{r4, pc}
 8004bac:	2a0a      	cmp	r2, #10
 8004bae:	d109      	bne.n	8004bc4 <__itoa+0x2c>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	da07      	bge.n	8004bc4 <__itoa+0x2c>
 8004bb4:	232d      	movs	r3, #45	; 0x2d
 8004bb6:	700b      	strb	r3, [r1, #0]
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4240      	negs	r0, r0
 8004bbc:	4421      	add	r1, r4
 8004bbe:	f000 f953 	bl	8004e68 <__utoa>
 8004bc2:	e7f1      	b.n	8004ba8 <__itoa+0x10>
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	e7f9      	b.n	8004bbc <__itoa+0x24>

08004bc8 <itoa>:
 8004bc8:	f7ff bfe6 	b.w	8004b98 <__itoa>

08004bcc <malloc>:
 8004bcc:	4b02      	ldr	r3, [pc, #8]	; (8004bd8 <malloc+0xc>)
 8004bce:	4601      	mov	r1, r0
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f000 b863 	b.w	8004c9c <_malloc_r>
 8004bd6:	bf00      	nop
 8004bd8:	2000006c 	.word	0x2000006c

08004bdc <free>:
 8004bdc:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <free+0xc>)
 8004bde:	4601      	mov	r1, r0
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	f000 b80f 	b.w	8004c04 <_free_r>
 8004be6:	bf00      	nop
 8004be8:	2000006c 	.word	0x2000006c

08004bec <memcpy>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	1e43      	subs	r3, r0, #1
 8004bf0:	440a      	add	r2, r1
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	d100      	bne.n	8004bf8 <memcpy+0xc>
 8004bf6:	bd10      	pop	{r4, pc}
 8004bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c00:	e7f7      	b.n	8004bf2 <memcpy+0x6>
	...

08004c04 <_free_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4605      	mov	r5, r0
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d043      	beq.n	8004c94 <_free_r+0x90>
 8004c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c10:	1f0c      	subs	r4, r1, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bfb8      	it	lt
 8004c16:	18e4      	addlt	r4, r4, r3
 8004c18:	f000 f966 	bl	8004ee8 <__malloc_lock>
 8004c1c:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <_free_r+0x94>)
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	4610      	mov	r0, r2
 8004c22:	b933      	cbnz	r3, 8004c32 <_free_r+0x2e>
 8004c24:	6063      	str	r3, [r4, #4]
 8004c26:	6014      	str	r4, [r2, #0]
 8004c28:	4628      	mov	r0, r5
 8004c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c2e:	f000 b95c 	b.w	8004eea <__malloc_unlock>
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	d90b      	bls.n	8004c4e <_free_r+0x4a>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	1862      	adds	r2, r4, r1
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	bf01      	itttt	eq
 8004c3e:	681a      	ldreq	r2, [r3, #0]
 8004c40:	685b      	ldreq	r3, [r3, #4]
 8004c42:	1852      	addeq	r2, r2, r1
 8004c44:	6022      	streq	r2, [r4, #0]
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	6004      	str	r4, [r0, #0]
 8004c4a:	e7ed      	b.n	8004c28 <_free_r+0x24>
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	b10a      	cbz	r2, 8004c56 <_free_r+0x52>
 8004c52:	42a2      	cmp	r2, r4
 8004c54:	d9fa      	bls.n	8004c4c <_free_r+0x48>
 8004c56:	6819      	ldr	r1, [r3, #0]
 8004c58:	1858      	adds	r0, r3, r1
 8004c5a:	42a0      	cmp	r0, r4
 8004c5c:	d10b      	bne.n	8004c76 <_free_r+0x72>
 8004c5e:	6820      	ldr	r0, [r4, #0]
 8004c60:	4401      	add	r1, r0
 8004c62:	1858      	adds	r0, r3, r1
 8004c64:	4282      	cmp	r2, r0
 8004c66:	6019      	str	r1, [r3, #0]
 8004c68:	d1de      	bne.n	8004c28 <_free_r+0x24>
 8004c6a:	6810      	ldr	r0, [r2, #0]
 8004c6c:	6852      	ldr	r2, [r2, #4]
 8004c6e:	4401      	add	r1, r0
 8004c70:	6019      	str	r1, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	e7d8      	b.n	8004c28 <_free_r+0x24>
 8004c76:	d902      	bls.n	8004c7e <_free_r+0x7a>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	e7d4      	b.n	8004c28 <_free_r+0x24>
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	1821      	adds	r1, r4, r0
 8004c82:	428a      	cmp	r2, r1
 8004c84:	bf01      	itttt	eq
 8004c86:	6811      	ldreq	r1, [r2, #0]
 8004c88:	6852      	ldreq	r2, [r2, #4]
 8004c8a:	1809      	addeq	r1, r1, r0
 8004c8c:	6021      	streq	r1, [r4, #0]
 8004c8e:	6062      	str	r2, [r4, #4]
 8004c90:	605c      	str	r4, [r3, #4]
 8004c92:	e7c9      	b.n	8004c28 <_free_r+0x24>
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	2000027c 	.word	0x2000027c

08004c9c <_malloc_r>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	1ccd      	adds	r5, r1, #3
 8004ca0:	f025 0503 	bic.w	r5, r5, #3
 8004ca4:	3508      	adds	r5, #8
 8004ca6:	2d0c      	cmp	r5, #12
 8004ca8:	bf38      	it	cc
 8004caa:	250c      	movcc	r5, #12
 8004cac:	2d00      	cmp	r5, #0
 8004cae:	4606      	mov	r6, r0
 8004cb0:	db01      	blt.n	8004cb6 <_malloc_r+0x1a>
 8004cb2:	42a9      	cmp	r1, r5
 8004cb4:	d903      	bls.n	8004cbe <_malloc_r+0x22>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	2000      	movs	r0, #0
 8004cbc:	bd70      	pop	{r4, r5, r6, pc}
 8004cbe:	f000 f913 	bl	8004ee8 <__malloc_lock>
 8004cc2:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <_malloc_r+0xb4>)
 8004cc4:	6814      	ldr	r4, [r2, #0]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	b991      	cbnz	r1, 8004cf0 <_malloc_r+0x54>
 8004cca:	4c22      	ldr	r4, [pc, #136]	; (8004d54 <_malloc_r+0xb8>)
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	b91b      	cbnz	r3, 8004cd8 <_malloc_r+0x3c>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 f841 	bl	8004d58 <_sbrk_r>
 8004cd6:	6020      	str	r0, [r4, #0]
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f000 f83c 	bl	8004d58 <_sbrk_r>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d126      	bne.n	8004d32 <_malloc_r+0x96>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	6033      	str	r3, [r6, #0]
 8004cea:	f000 f8fe 	bl	8004eea <__malloc_unlock>
 8004cee:	e7e4      	b.n	8004cba <_malloc_r+0x1e>
 8004cf0:	680b      	ldr	r3, [r1, #0]
 8004cf2:	1b5b      	subs	r3, r3, r5
 8004cf4:	d41a      	bmi.n	8004d2c <_malloc_r+0x90>
 8004cf6:	2b0b      	cmp	r3, #11
 8004cf8:	d90f      	bls.n	8004d1a <_malloc_r+0x7e>
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	18cc      	adds	r4, r1, r3
 8004cfe:	50cd      	str	r5, [r1, r3]
 8004d00:	4630      	mov	r0, r6
 8004d02:	f000 f8f2 	bl	8004eea <__malloc_unlock>
 8004d06:	f104 000b 	add.w	r0, r4, #11
 8004d0a:	1d23      	adds	r3, r4, #4
 8004d0c:	f020 0007 	bic.w	r0, r0, #7
 8004d10:	1ac3      	subs	r3, r0, r3
 8004d12:	d01b      	beq.n	8004d4c <_malloc_r+0xb0>
 8004d14:	425a      	negs	r2, r3
 8004d16:	50e2      	str	r2, [r4, r3]
 8004d18:	bd70      	pop	{r4, r5, r6, pc}
 8004d1a:	428c      	cmp	r4, r1
 8004d1c:	bf0b      	itete	eq
 8004d1e:	6863      	ldreq	r3, [r4, #4]
 8004d20:	684b      	ldrne	r3, [r1, #4]
 8004d22:	6013      	streq	r3, [r2, #0]
 8004d24:	6063      	strne	r3, [r4, #4]
 8004d26:	bf18      	it	ne
 8004d28:	460c      	movne	r4, r1
 8004d2a:	e7e9      	b.n	8004d00 <_malloc_r+0x64>
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	6849      	ldr	r1, [r1, #4]
 8004d30:	e7ca      	b.n	8004cc8 <_malloc_r+0x2c>
 8004d32:	1cc4      	adds	r4, r0, #3
 8004d34:	f024 0403 	bic.w	r4, r4, #3
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d005      	beq.n	8004d48 <_malloc_r+0xac>
 8004d3c:	1a21      	subs	r1, r4, r0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f000 f80a 	bl	8004d58 <_sbrk_r>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0cd      	beq.n	8004ce4 <_malloc_r+0x48>
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	e7d9      	b.n	8004d00 <_malloc_r+0x64>
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	bf00      	nop
 8004d50:	2000027c 	.word	0x2000027c
 8004d54:	20000280 	.word	0x20000280

08004d58 <_sbrk_r>:
 8004d58:	b538      	push	{r3, r4, r5, lr}
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4c05      	ldr	r4, [pc, #20]	; (8004d74 <_sbrk_r+0x1c>)
 8004d5e:	4605      	mov	r5, r0
 8004d60:	4608      	mov	r0, r1
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	f000 fc12 	bl	800558c <_sbrk>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_sbrk_r+0x1a>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_sbrk_r+0x1a>
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	20000288 	.word	0x20000288

08004d78 <_raise_r>:
 8004d78:	291f      	cmp	r1, #31
 8004d7a:	b538      	push	{r3, r4, r5, lr}
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	460d      	mov	r5, r1
 8004d80:	d904      	bls.n	8004d8c <_raise_r+0x14>
 8004d82:	2316      	movs	r3, #22
 8004d84:	6003      	str	r3, [r0, #0]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004d8e:	b112      	cbz	r2, 8004d96 <_raise_r+0x1e>
 8004d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004d94:	b94b      	cbnz	r3, 8004daa <_raise_r+0x32>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f830 	bl	8004dfc <_getpid_r>
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	4601      	mov	r1, r0
 8004da0:	4620      	mov	r0, r4
 8004da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da6:	f000 b817 	b.w	8004dd8 <_kill_r>
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d00a      	beq.n	8004dc4 <_raise_r+0x4c>
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	d103      	bne.n	8004dba <_raise_r+0x42>
 8004db2:	2316      	movs	r3, #22
 8004db4:	6003      	str	r3, [r0, #0]
 8004db6:	2001      	movs	r0, #1
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	2400      	movs	r4, #0
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004dc2:	4798      	blx	r3
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}

08004dc8 <raise>:
 8004dc8:	4b02      	ldr	r3, [pc, #8]	; (8004dd4 <raise+0xc>)
 8004dca:	4601      	mov	r1, r0
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	f7ff bfd3 	b.w	8004d78 <_raise_r>
 8004dd2:	bf00      	nop
 8004dd4:	2000006c 	.word	0x2000006c

08004dd8 <_kill_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4c06      	ldr	r4, [pc, #24]	; (8004df8 <_kill_r+0x20>)
 8004dde:	4605      	mov	r5, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	f000 fbc9 	bl	800557c <_kill>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d102      	bne.n	8004df4 <_kill_r+0x1c>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	b103      	cbz	r3, 8004df4 <_kill_r+0x1c>
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	20000288 	.word	0x20000288

08004dfc <_getpid_r>:
 8004dfc:	f000 bbb6 	b.w	800556c <_getpid>

08004e00 <siprintf>:
 8004e00:	b40e      	push	{r1, r2, r3}
 8004e02:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004e06:	b500      	push	{lr}
 8004e08:	b09c      	sub	sp, #112	; 0x70
 8004e0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e12:	9104      	str	r1, [sp, #16]
 8004e14:	9107      	str	r1, [sp, #28]
 8004e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004e1c:	9002      	str	r0, [sp, #8]
 8004e1e:	9006      	str	r0, [sp, #24]
 8004e20:	4808      	ldr	r0, [pc, #32]	; (8004e44 <siprintf+0x44>)
 8004e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e26:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	a902      	add	r1, sp, #8
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	f000 f8b8 	bl	8004fa4 <_svfiprintf_r>
 8004e34:	2200      	movs	r2, #0
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	b01c      	add	sp, #112	; 0x70
 8004e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e40:	b003      	add	sp, #12
 8004e42:	4770      	bx	lr
 8004e44:	2000006c 	.word	0x2000006c

08004e48 <strcat>:
 8004e48:	4602      	mov	r2, r0
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	781c      	ldrb	r4, [r3, #0]
 8004e50:	3201      	adds	r2, #1
 8004e52:	2c00      	cmp	r4, #0
 8004e54:	d1fa      	bne.n	8004e4c <strcat+0x4>
 8004e56:	3b01      	subs	r3, #1
 8004e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e60:	2a00      	cmp	r2, #0
 8004e62:	d1f9      	bne.n	8004e58 <strcat+0x10>
 8004e64:	bd10      	pop	{r4, pc}
	...

08004e68 <__utoa>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	b08b      	sub	sp, #44	; 0x2c
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	466d      	mov	r5, sp
 8004e72:	4c1c      	ldr	r4, [pc, #112]	; (8004ee4 <__utoa+0x7c>)
 8004e74:	f104 0e20 	add.w	lr, r4, #32
 8004e78:	462e      	mov	r6, r5
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	6861      	ldr	r1, [r4, #4]
 8004e7e:	3408      	adds	r4, #8
 8004e80:	c603      	stmia	r6!, {r0, r1}
 8004e82:	4574      	cmp	r4, lr
 8004e84:	4635      	mov	r5, r6
 8004e86:	d1f7      	bne.n	8004e78 <__utoa+0x10>
 8004e88:	7921      	ldrb	r1, [r4, #4]
 8004e8a:	6820      	ldr	r0, [r4, #0]
 8004e8c:	7131      	strb	r1, [r6, #4]
 8004e8e:	1e91      	subs	r1, r2, #2
 8004e90:	2922      	cmp	r1, #34	; 0x22
 8004e92:	6030      	str	r0, [r6, #0]
 8004e94:	f04f 0100 	mov.w	r1, #0
 8004e98:	d904      	bls.n	8004ea4 <__utoa+0x3c>
 8004e9a:	7039      	strb	r1, [r7, #0]
 8004e9c:	460f      	mov	r7, r1
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	b00b      	add	sp, #44	; 0x2c
 8004ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ea4:	1e78      	subs	r0, r7, #1
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	fbb3 f5f2 	udiv	r5, r3, r2
 8004eac:	fb02 3315 	mls	r3, r2, r5, r3
 8004eb0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004eb4:	4473      	add	r3, lr
 8004eb6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004eba:	1c4c      	adds	r4, r1, #1
 8004ebc:	f806 3f01 	strb.w	r3, [r6, #1]!
 8004ec0:	462b      	mov	r3, r5
 8004ec2:	b965      	cbnz	r5, 8004ede <__utoa+0x76>
 8004ec4:	553d      	strb	r5, [r7, r4]
 8004ec6:	187a      	adds	r2, r7, r1
 8004ec8:	1acc      	subs	r4, r1, r3
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	dae7      	bge.n	8004e9e <__utoa+0x36>
 8004ece:	7844      	ldrb	r4, [r0, #1]
 8004ed0:	7815      	ldrb	r5, [r2, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f800 5f01 	strb.w	r5, [r0, #1]!
 8004ed8:	f802 4901 	strb.w	r4, [r2], #-1
 8004edc:	e7f4      	b.n	8004ec8 <__utoa+0x60>
 8004ede:	4621      	mov	r1, r4
 8004ee0:	e7e2      	b.n	8004ea8 <__utoa+0x40>
 8004ee2:	bf00      	nop
 8004ee4:	0800564f 	.word	0x0800564f

08004ee8 <__malloc_lock>:
 8004ee8:	4770      	bx	lr

08004eea <__malloc_unlock>:
 8004eea:	4770      	bx	lr

08004eec <__ssputs_r>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	688e      	ldr	r6, [r1, #8]
 8004ef2:	4682      	mov	sl, r0
 8004ef4:	429e      	cmp	r6, r3
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	4691      	mov	r9, r2
 8004efa:	4698      	mov	r8, r3
 8004efc:	d835      	bhi.n	8004f6a <__ssputs_r+0x7e>
 8004efe:	898a      	ldrh	r2, [r1, #12]
 8004f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f04:	d031      	beq.n	8004f6a <__ssputs_r+0x7e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	6825      	ldr	r5, [r4, #0]
 8004f0a:	6909      	ldr	r1, [r1, #16]
 8004f0c:	1a6f      	subs	r7, r5, r1
 8004f0e:	6965      	ldr	r5, [r4, #20]
 8004f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f14:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f18:	f108 0301 	add.w	r3, r8, #1
 8004f1c:	443b      	add	r3, r7
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	bf38      	it	cc
 8004f22:	461d      	movcc	r5, r3
 8004f24:	0553      	lsls	r3, r2, #21
 8004f26:	d531      	bpl.n	8004f8c <__ssputs_r+0xa0>
 8004f28:	4629      	mov	r1, r5
 8004f2a:	f7ff feb7 	bl	8004c9c <_malloc_r>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	b950      	cbnz	r0, 8004f48 <__ssputs_r+0x5c>
 8004f32:	230c      	movs	r3, #12
 8004f34:	f8ca 3000 	str.w	r3, [sl]
 8004f38:	89a3      	ldrh	r3, [r4, #12]
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f42:	81a3      	strh	r3, [r4, #12]
 8004f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f48:	463a      	mov	r2, r7
 8004f4a:	6921      	ldr	r1, [r4, #16]
 8004f4c:	f7ff fe4e 	bl	8004bec <memcpy>
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f5a:	81a3      	strh	r3, [r4, #12]
 8004f5c:	6126      	str	r6, [r4, #16]
 8004f5e:	443e      	add	r6, r7
 8004f60:	6026      	str	r6, [r4, #0]
 8004f62:	4646      	mov	r6, r8
 8004f64:	6165      	str	r5, [r4, #20]
 8004f66:	1bed      	subs	r5, r5, r7
 8004f68:	60a5      	str	r5, [r4, #8]
 8004f6a:	4546      	cmp	r6, r8
 8004f6c:	bf28      	it	cs
 8004f6e:	4646      	movcs	r6, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	4632      	mov	r2, r6
 8004f74:	6820      	ldr	r0, [r4, #0]
 8004f76:	f000 faaf 	bl	80054d8 <memmove>
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	1b9b      	subs	r3, r3, r6
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	441e      	add	r6, r3
 8004f86:	6026      	str	r6, [r4, #0]
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	462a      	mov	r2, r5
 8004f8e:	f000 fabd 	bl	800550c <_realloc_r>
 8004f92:	4606      	mov	r6, r0
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d1e1      	bne.n	8004f5c <__ssputs_r+0x70>
 8004f98:	6921      	ldr	r1, [r4, #16]
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	f7ff fe32 	bl	8004c04 <_free_r>
 8004fa0:	e7c7      	b.n	8004f32 <__ssputs_r+0x46>
	...

08004fa4 <_svfiprintf_r>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b09d      	sub	sp, #116	; 0x74
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	898b      	ldrh	r3, [r1, #12]
 8004fae:	4680      	mov	r8, r0
 8004fb0:	061c      	lsls	r4, r3, #24
 8004fb2:	460d      	mov	r5, r1
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	d50f      	bpl.n	8004fd8 <_svfiprintf_r+0x34>
 8004fb8:	690b      	ldr	r3, [r1, #16]
 8004fba:	b96b      	cbnz	r3, 8004fd8 <_svfiprintf_r+0x34>
 8004fbc:	2140      	movs	r1, #64	; 0x40
 8004fbe:	f7ff fe6d 	bl	8004c9c <_malloc_r>
 8004fc2:	6028      	str	r0, [r5, #0]
 8004fc4:	6128      	str	r0, [r5, #16]
 8004fc6:	b928      	cbnz	r0, 8004fd4 <_svfiprintf_r+0x30>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	f8c8 3000 	str.w	r3, [r8]
 8004fce:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd2:	e0c4      	b.n	800515e <_svfiprintf_r+0x1ba>
 8004fd4:	2340      	movs	r3, #64	; 0x40
 8004fd6:	616b      	str	r3, [r5, #20]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	9309      	str	r3, [sp, #36]	; 0x24
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fe2:	2330      	movs	r3, #48	; 0x30
 8004fe4:	f04f 0b01 	mov.w	fp, #1
 8004fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fec:	4637      	mov	r7, r6
 8004fee:	463c      	mov	r4, r7
 8004ff0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d13c      	bne.n	8005072 <_svfiprintf_r+0xce>
 8004ff8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ffc:	d00b      	beq.n	8005016 <_svfiprintf_r+0x72>
 8004ffe:	4653      	mov	r3, sl
 8005000:	4632      	mov	r2, r6
 8005002:	4629      	mov	r1, r5
 8005004:	4640      	mov	r0, r8
 8005006:	f7ff ff71 	bl	8004eec <__ssputs_r>
 800500a:	3001      	adds	r0, #1
 800500c:	f000 80a2 	beq.w	8005154 <_svfiprintf_r+0x1b0>
 8005010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005012:	4453      	add	r3, sl
 8005014:	9309      	str	r3, [sp, #36]	; 0x24
 8005016:	783b      	ldrb	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809b 	beq.w	8005154 <_svfiprintf_r+0x1b0>
 800501e:	2300      	movs	r3, #0
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	9304      	str	r3, [sp, #16]
 8005026:	9307      	str	r3, [sp, #28]
 8005028:	9205      	str	r2, [sp, #20]
 800502a:	9306      	str	r3, [sp, #24]
 800502c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005030:	931a      	str	r3, [sp, #104]	; 0x68
 8005032:	2205      	movs	r2, #5
 8005034:	7821      	ldrb	r1, [r4, #0]
 8005036:	4850      	ldr	r0, [pc, #320]	; (8005178 <_svfiprintf_r+0x1d4>)
 8005038:	f000 fa40 	bl	80054bc <memchr>
 800503c:	1c67      	adds	r7, r4, #1
 800503e:	9b04      	ldr	r3, [sp, #16]
 8005040:	b9d8      	cbnz	r0, 800507a <_svfiprintf_r+0xd6>
 8005042:	06d9      	lsls	r1, r3, #27
 8005044:	bf44      	itt	mi
 8005046:	2220      	movmi	r2, #32
 8005048:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800504c:	071a      	lsls	r2, r3, #28
 800504e:	bf44      	itt	mi
 8005050:	222b      	movmi	r2, #43	; 0x2b
 8005052:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005056:	7822      	ldrb	r2, [r4, #0]
 8005058:	2a2a      	cmp	r2, #42	; 0x2a
 800505a:	d016      	beq.n	800508a <_svfiprintf_r+0xe6>
 800505c:	2100      	movs	r1, #0
 800505e:	200a      	movs	r0, #10
 8005060:	9a07      	ldr	r2, [sp, #28]
 8005062:	4627      	mov	r7, r4
 8005064:	783b      	ldrb	r3, [r7, #0]
 8005066:	3401      	adds	r4, #1
 8005068:	3b30      	subs	r3, #48	; 0x30
 800506a:	2b09      	cmp	r3, #9
 800506c:	d950      	bls.n	8005110 <_svfiprintf_r+0x16c>
 800506e:	b1c9      	cbz	r1, 80050a4 <_svfiprintf_r+0x100>
 8005070:	e011      	b.n	8005096 <_svfiprintf_r+0xf2>
 8005072:	2b25      	cmp	r3, #37	; 0x25
 8005074:	d0c0      	beq.n	8004ff8 <_svfiprintf_r+0x54>
 8005076:	4627      	mov	r7, r4
 8005078:	e7b9      	b.n	8004fee <_svfiprintf_r+0x4a>
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <_svfiprintf_r+0x1d4>)
 800507c:	463c      	mov	r4, r7
 800507e:	1a80      	subs	r0, r0, r2
 8005080:	fa0b f000 	lsl.w	r0, fp, r0
 8005084:	4318      	orrs	r0, r3
 8005086:	9004      	str	r0, [sp, #16]
 8005088:	e7d3      	b.n	8005032 <_svfiprintf_r+0x8e>
 800508a:	9a03      	ldr	r2, [sp, #12]
 800508c:	1d11      	adds	r1, r2, #4
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	9103      	str	r1, [sp, #12]
 8005092:	2a00      	cmp	r2, #0
 8005094:	db01      	blt.n	800509a <_svfiprintf_r+0xf6>
 8005096:	9207      	str	r2, [sp, #28]
 8005098:	e004      	b.n	80050a4 <_svfiprintf_r+0x100>
 800509a:	4252      	negs	r2, r2
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	9207      	str	r2, [sp, #28]
 80050a2:	9304      	str	r3, [sp, #16]
 80050a4:	783b      	ldrb	r3, [r7, #0]
 80050a6:	2b2e      	cmp	r3, #46	; 0x2e
 80050a8:	d10d      	bne.n	80050c6 <_svfiprintf_r+0x122>
 80050aa:	787b      	ldrb	r3, [r7, #1]
 80050ac:	1c79      	adds	r1, r7, #1
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d132      	bne.n	8005118 <_svfiprintf_r+0x174>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	3702      	adds	r7, #2
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	9203      	str	r2, [sp, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bfb8      	it	lt
 80050c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80050c4:	9305      	str	r3, [sp, #20]
 80050c6:	4c2d      	ldr	r4, [pc, #180]	; (800517c <_svfiprintf_r+0x1d8>)
 80050c8:	2203      	movs	r2, #3
 80050ca:	7839      	ldrb	r1, [r7, #0]
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f9f5 	bl	80054bc <memchr>
 80050d2:	b138      	cbz	r0, 80050e4 <_svfiprintf_r+0x140>
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	1b00      	subs	r0, r0, r4
 80050d8:	fa03 f000 	lsl.w	r0, r3, r0
 80050dc:	9b04      	ldr	r3, [sp, #16]
 80050de:	3701      	adds	r7, #1
 80050e0:	4303      	orrs	r3, r0
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	7839      	ldrb	r1, [r7, #0]
 80050e6:	2206      	movs	r2, #6
 80050e8:	4825      	ldr	r0, [pc, #148]	; (8005180 <_svfiprintf_r+0x1dc>)
 80050ea:	1c7e      	adds	r6, r7, #1
 80050ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050f0:	f000 f9e4 	bl	80054bc <memchr>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d035      	beq.n	8005164 <_svfiprintf_r+0x1c0>
 80050f8:	4b22      	ldr	r3, [pc, #136]	; (8005184 <_svfiprintf_r+0x1e0>)
 80050fa:	b9fb      	cbnz	r3, 800513c <_svfiprintf_r+0x198>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	3307      	adds	r3, #7
 8005100:	f023 0307 	bic.w	r3, r3, #7
 8005104:	3308      	adds	r3, #8
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800510a:	444b      	add	r3, r9
 800510c:	9309      	str	r3, [sp, #36]	; 0x24
 800510e:	e76d      	b.n	8004fec <_svfiprintf_r+0x48>
 8005110:	fb00 3202 	mla	r2, r0, r2, r3
 8005114:	2101      	movs	r1, #1
 8005116:	e7a4      	b.n	8005062 <_svfiprintf_r+0xbe>
 8005118:	2300      	movs	r3, #0
 800511a:	240a      	movs	r4, #10
 800511c:	4618      	mov	r0, r3
 800511e:	9305      	str	r3, [sp, #20]
 8005120:	460f      	mov	r7, r1
 8005122:	783a      	ldrb	r2, [r7, #0]
 8005124:	3101      	adds	r1, #1
 8005126:	3a30      	subs	r2, #48	; 0x30
 8005128:	2a09      	cmp	r2, #9
 800512a:	d903      	bls.n	8005134 <_svfiprintf_r+0x190>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ca      	beq.n	80050c6 <_svfiprintf_r+0x122>
 8005130:	9005      	str	r0, [sp, #20]
 8005132:	e7c8      	b.n	80050c6 <_svfiprintf_r+0x122>
 8005134:	fb04 2000 	mla	r0, r4, r0, r2
 8005138:	2301      	movs	r3, #1
 800513a:	e7f1      	b.n	8005120 <_svfiprintf_r+0x17c>
 800513c:	ab03      	add	r3, sp, #12
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	462a      	mov	r2, r5
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <_svfiprintf_r+0x1e4>)
 8005144:	a904      	add	r1, sp, #16
 8005146:	4640      	mov	r0, r8
 8005148:	f3af 8000 	nop.w
 800514c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005150:	4681      	mov	r9, r0
 8005152:	d1d9      	bne.n	8005108 <_svfiprintf_r+0x164>
 8005154:	89ab      	ldrh	r3, [r5, #12]
 8005156:	065b      	lsls	r3, r3, #25
 8005158:	f53f af39 	bmi.w	8004fce <_svfiprintf_r+0x2a>
 800515c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800515e:	b01d      	add	sp, #116	; 0x74
 8005160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <_svfiprintf_r+0x1e4>)
 800516c:	a904      	add	r1, sp, #16
 800516e:	4640      	mov	r0, r8
 8005170:	f000 f884 	bl	800527c <_printf_i>
 8005174:	e7ea      	b.n	800514c <_svfiprintf_r+0x1a8>
 8005176:	bf00      	nop
 8005178:	08005674 	.word	0x08005674
 800517c:	0800567a 	.word	0x0800567a
 8005180:	0800567e 	.word	0x0800567e
 8005184:	00000000 	.word	0x00000000
 8005188:	08004eed 	.word	0x08004eed

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4691      	mov	r9, r2
 8005192:	461f      	mov	r7, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	4606      	mov	r6, r0
 800519a:	4293      	cmp	r3, r2
 800519c:	bfb8      	it	lt
 800519e:	4613      	movlt	r3, r2
 80051a0:	f8c9 3000 	str.w	r3, [r9]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a8:	460c      	mov	r4, r1
 80051aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051ae:	b112      	cbz	r2, 80051b6 <_printf_common+0x2a>
 80051b0:	3301      	adds	r3, #1
 80051b2:	f8c9 3000 	str.w	r3, [r9]
 80051b6:	6823      	ldr	r3, [r4, #0]
 80051b8:	0699      	lsls	r1, r3, #26
 80051ba:	bf42      	ittt	mi
 80051bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051c0:	3302      	addmi	r3, #2
 80051c2:	f8c9 3000 	strmi.w	r3, [r9]
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	f015 0506 	ands.w	r5, r5, #6
 80051cc:	d107      	bne.n	80051de <_printf_common+0x52>
 80051ce:	f104 0a19 	add.w	sl, r4, #25
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	f8d9 2000 	ldr.w	r2, [r9]
 80051d8:	1a9b      	subs	r3, r3, r2
 80051da:	429d      	cmp	r5, r3
 80051dc:	db2a      	blt.n	8005234 <_printf_common+0xa8>
 80051de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	3300      	adds	r3, #0
 80051e6:	bf18      	it	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	0692      	lsls	r2, r2, #26
 80051ec:	d42f      	bmi.n	800524e <_printf_common+0xc2>
 80051ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f2:	4639      	mov	r1, r7
 80051f4:	4630      	mov	r0, r6
 80051f6:	47c0      	blx	r8
 80051f8:	3001      	adds	r0, #1
 80051fa:	d022      	beq.n	8005242 <_printf_common+0xb6>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	68e5      	ldr	r5, [r4, #12]
 8005200:	f003 0306 	and.w	r3, r3, #6
 8005204:	2b04      	cmp	r3, #4
 8005206:	bf18      	it	ne
 8005208:	2500      	movne	r5, #0
 800520a:	f8d9 2000 	ldr.w	r2, [r9]
 800520e:	f04f 0900 	mov.w	r9, #0
 8005212:	bf08      	it	eq
 8005214:	1aad      	subeq	r5, r5, r2
 8005216:	68a3      	ldr	r3, [r4, #8]
 8005218:	6922      	ldr	r2, [r4, #16]
 800521a:	bf08      	it	eq
 800521c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005220:	4293      	cmp	r3, r2
 8005222:	bfc4      	itt	gt
 8005224:	1a9b      	subgt	r3, r3, r2
 8005226:	18ed      	addgt	r5, r5, r3
 8005228:	341a      	adds	r4, #26
 800522a:	454d      	cmp	r5, r9
 800522c:	d11b      	bne.n	8005266 <_printf_common+0xda>
 800522e:	2000      	movs	r0, #0
 8005230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005234:	2301      	movs	r3, #1
 8005236:	4652      	mov	r2, sl
 8005238:	4639      	mov	r1, r7
 800523a:	4630      	mov	r0, r6
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d103      	bne.n	800524a <_printf_common+0xbe>
 8005242:	f04f 30ff 	mov.w	r0, #4294967295
 8005246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524a:	3501      	adds	r5, #1
 800524c:	e7c1      	b.n	80051d2 <_printf_common+0x46>
 800524e:	2030      	movs	r0, #48	; 0x30
 8005250:	18e1      	adds	r1, r4, r3
 8005252:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800525c:	4422      	add	r2, r4
 800525e:	3302      	adds	r3, #2
 8005260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005264:	e7c3      	b.n	80051ee <_printf_common+0x62>
 8005266:	2301      	movs	r3, #1
 8005268:	4622      	mov	r2, r4
 800526a:	4639      	mov	r1, r7
 800526c:	4630      	mov	r0, r6
 800526e:	47c0      	blx	r8
 8005270:	3001      	adds	r0, #1
 8005272:	d0e6      	beq.n	8005242 <_printf_common+0xb6>
 8005274:	f109 0901 	add.w	r9, r9, #1
 8005278:	e7d7      	b.n	800522a <_printf_common+0x9e>
	...

0800527c <_printf_i>:
 800527c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005280:	4617      	mov	r7, r2
 8005282:	7e0a      	ldrb	r2, [r1, #24]
 8005284:	b085      	sub	sp, #20
 8005286:	2a6e      	cmp	r2, #110	; 0x6e
 8005288:	4698      	mov	r8, r3
 800528a:	4606      	mov	r6, r0
 800528c:	460c      	mov	r4, r1
 800528e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005290:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005294:	f000 80bc 	beq.w	8005410 <_printf_i+0x194>
 8005298:	d81a      	bhi.n	80052d0 <_printf_i+0x54>
 800529a:	2a63      	cmp	r2, #99	; 0x63
 800529c:	d02e      	beq.n	80052fc <_printf_i+0x80>
 800529e:	d80a      	bhi.n	80052b6 <_printf_i+0x3a>
 80052a0:	2a00      	cmp	r2, #0
 80052a2:	f000 80c8 	beq.w	8005436 <_printf_i+0x1ba>
 80052a6:	2a58      	cmp	r2, #88	; 0x58
 80052a8:	f000 808a 	beq.w	80053c0 <_printf_i+0x144>
 80052ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80052b4:	e02a      	b.n	800530c <_printf_i+0x90>
 80052b6:	2a64      	cmp	r2, #100	; 0x64
 80052b8:	d001      	beq.n	80052be <_printf_i+0x42>
 80052ba:	2a69      	cmp	r2, #105	; 0x69
 80052bc:	d1f6      	bne.n	80052ac <_printf_i+0x30>
 80052be:	6821      	ldr	r1, [r4, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052c6:	d023      	beq.n	8005310 <_printf_i+0x94>
 80052c8:	1d11      	adds	r1, r2, #4
 80052ca:	6019      	str	r1, [r3, #0]
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	e027      	b.n	8005320 <_printf_i+0xa4>
 80052d0:	2a73      	cmp	r2, #115	; 0x73
 80052d2:	f000 80b4 	beq.w	800543e <_printf_i+0x1c2>
 80052d6:	d808      	bhi.n	80052ea <_printf_i+0x6e>
 80052d8:	2a6f      	cmp	r2, #111	; 0x6f
 80052da:	d02a      	beq.n	8005332 <_printf_i+0xb6>
 80052dc:	2a70      	cmp	r2, #112	; 0x70
 80052de:	d1e5      	bne.n	80052ac <_printf_i+0x30>
 80052e0:	680a      	ldr	r2, [r1, #0]
 80052e2:	f042 0220 	orr.w	r2, r2, #32
 80052e6:	600a      	str	r2, [r1, #0]
 80052e8:	e003      	b.n	80052f2 <_printf_i+0x76>
 80052ea:	2a75      	cmp	r2, #117	; 0x75
 80052ec:	d021      	beq.n	8005332 <_printf_i+0xb6>
 80052ee:	2a78      	cmp	r2, #120	; 0x78
 80052f0:	d1dc      	bne.n	80052ac <_printf_i+0x30>
 80052f2:	2278      	movs	r2, #120	; 0x78
 80052f4:	496f      	ldr	r1, [pc, #444]	; (80054b4 <_printf_i+0x238>)
 80052f6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80052fa:	e064      	b.n	80053c6 <_printf_i+0x14a>
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005302:	1d11      	adds	r1, r2, #4
 8005304:	6019      	str	r1, [r3, #0]
 8005306:	6813      	ldr	r3, [r2, #0]
 8005308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800530c:	2301      	movs	r3, #1
 800530e:	e0a3      	b.n	8005458 <_printf_i+0x1dc>
 8005310:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005314:	f102 0104 	add.w	r1, r2, #4
 8005318:	6019      	str	r1, [r3, #0]
 800531a:	d0d7      	beq.n	80052cc <_printf_i+0x50>
 800531c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005320:	2b00      	cmp	r3, #0
 8005322:	da03      	bge.n	800532c <_printf_i+0xb0>
 8005324:	222d      	movs	r2, #45	; 0x2d
 8005326:	425b      	negs	r3, r3
 8005328:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800532c:	4962      	ldr	r1, [pc, #392]	; (80054b8 <_printf_i+0x23c>)
 800532e:	220a      	movs	r2, #10
 8005330:	e017      	b.n	8005362 <_printf_i+0xe6>
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	6819      	ldr	r1, [r3, #0]
 8005336:	f010 0f80 	tst.w	r0, #128	; 0x80
 800533a:	d003      	beq.n	8005344 <_printf_i+0xc8>
 800533c:	1d08      	adds	r0, r1, #4
 800533e:	6018      	str	r0, [r3, #0]
 8005340:	680b      	ldr	r3, [r1, #0]
 8005342:	e006      	b.n	8005352 <_printf_i+0xd6>
 8005344:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005348:	f101 0004 	add.w	r0, r1, #4
 800534c:	6018      	str	r0, [r3, #0]
 800534e:	d0f7      	beq.n	8005340 <_printf_i+0xc4>
 8005350:	880b      	ldrh	r3, [r1, #0]
 8005352:	2a6f      	cmp	r2, #111	; 0x6f
 8005354:	bf14      	ite	ne
 8005356:	220a      	movne	r2, #10
 8005358:	2208      	moveq	r2, #8
 800535a:	4957      	ldr	r1, [pc, #348]	; (80054b8 <_printf_i+0x23c>)
 800535c:	2000      	movs	r0, #0
 800535e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005362:	6865      	ldr	r5, [r4, #4]
 8005364:	2d00      	cmp	r5, #0
 8005366:	60a5      	str	r5, [r4, #8]
 8005368:	f2c0 809c 	blt.w	80054a4 <_printf_i+0x228>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	f020 0004 	bic.w	r0, r0, #4
 8005372:	6020      	str	r0, [r4, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d13f      	bne.n	80053f8 <_printf_i+0x17c>
 8005378:	2d00      	cmp	r5, #0
 800537a:	f040 8095 	bne.w	80054a8 <_printf_i+0x22c>
 800537e:	4675      	mov	r5, lr
 8005380:	2a08      	cmp	r2, #8
 8005382:	d10b      	bne.n	800539c <_printf_i+0x120>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	07da      	lsls	r2, r3, #31
 8005388:	d508      	bpl.n	800539c <_printf_i+0x120>
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6862      	ldr	r2, [r4, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	bfde      	ittt	le
 8005392:	2330      	movle	r3, #48	; 0x30
 8005394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800539c:	ebae 0305 	sub.w	r3, lr, r5
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	f8cd 8000 	str.w	r8, [sp]
 80053a6:	463b      	mov	r3, r7
 80053a8:	aa03      	add	r2, sp, #12
 80053aa:	4621      	mov	r1, r4
 80053ac:	4630      	mov	r0, r6
 80053ae:	f7ff feed 	bl	800518c <_printf_common>
 80053b2:	3001      	adds	r0, #1
 80053b4:	d155      	bne.n	8005462 <_printf_i+0x1e6>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	b005      	add	sp, #20
 80053bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053c0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80053c4:	493c      	ldr	r1, [pc, #240]	; (80054b8 <_printf_i+0x23c>)
 80053c6:	6822      	ldr	r2, [r4, #0]
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053ce:	f100 0504 	add.w	r5, r0, #4
 80053d2:	601d      	str	r5, [r3, #0]
 80053d4:	d001      	beq.n	80053da <_printf_i+0x15e>
 80053d6:	6803      	ldr	r3, [r0, #0]
 80053d8:	e002      	b.n	80053e0 <_printf_i+0x164>
 80053da:	0655      	lsls	r5, r2, #25
 80053dc:	d5fb      	bpl.n	80053d6 <_printf_i+0x15a>
 80053de:	8803      	ldrh	r3, [r0, #0]
 80053e0:	07d0      	lsls	r0, r2, #31
 80053e2:	bf44      	itt	mi
 80053e4:	f042 0220 	orrmi.w	r2, r2, #32
 80053e8:	6022      	strmi	r2, [r4, #0]
 80053ea:	b91b      	cbnz	r3, 80053f4 <_printf_i+0x178>
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	f022 0220 	bic.w	r2, r2, #32
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	2210      	movs	r2, #16
 80053f6:	e7b1      	b.n	800535c <_printf_i+0xe0>
 80053f8:	4675      	mov	r5, lr
 80053fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80053fe:	fb02 3310 	mls	r3, r2, r0, r3
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005408:	4603      	mov	r3, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	d1f5      	bne.n	80053fa <_printf_i+0x17e>
 800540e:	e7b7      	b.n	8005380 <_printf_i+0x104>
 8005410:	6808      	ldr	r0, [r1, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005418:	6949      	ldr	r1, [r1, #20]
 800541a:	d004      	beq.n	8005426 <_printf_i+0x1aa>
 800541c:	1d10      	adds	r0, r2, #4
 800541e:	6018      	str	r0, [r3, #0]
 8005420:	6813      	ldr	r3, [r2, #0]
 8005422:	6019      	str	r1, [r3, #0]
 8005424:	e007      	b.n	8005436 <_printf_i+0x1ba>
 8005426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800542a:	f102 0004 	add.w	r0, r2, #4
 800542e:	6018      	str	r0, [r3, #0]
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	d0f6      	beq.n	8005422 <_printf_i+0x1a6>
 8005434:	8019      	strh	r1, [r3, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	4675      	mov	r5, lr
 800543a:	6123      	str	r3, [r4, #16]
 800543c:	e7b1      	b.n	80053a2 <_printf_i+0x126>
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	1d11      	adds	r1, r2, #4
 8005442:	6019      	str	r1, [r3, #0]
 8005444:	6815      	ldr	r5, [r2, #0]
 8005446:	2100      	movs	r1, #0
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f836 	bl	80054bc <memchr>
 8005450:	b108      	cbz	r0, 8005456 <_printf_i+0x1da>
 8005452:	1b40      	subs	r0, r0, r5
 8005454:	6060      	str	r0, [r4, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	2300      	movs	r3, #0
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	e79f      	b.n	80053a2 <_printf_i+0x126>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	462a      	mov	r2, r5
 8005466:	4639      	mov	r1, r7
 8005468:	4630      	mov	r0, r6
 800546a:	47c0      	blx	r8
 800546c:	3001      	adds	r0, #1
 800546e:	d0a2      	beq.n	80053b6 <_printf_i+0x13a>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	d507      	bpl.n	8005486 <_printf_i+0x20a>
 8005476:	2500      	movs	r5, #0
 8005478:	f104 0919 	add.w	r9, r4, #25
 800547c:	68e3      	ldr	r3, [r4, #12]
 800547e:	9a03      	ldr	r2, [sp, #12]
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	429d      	cmp	r5, r3
 8005484:	db05      	blt.n	8005492 <_printf_i+0x216>
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	4298      	cmp	r0, r3
 800548c:	bfb8      	it	lt
 800548e:	4618      	movlt	r0, r3
 8005490:	e793      	b.n	80053ba <_printf_i+0x13e>
 8005492:	2301      	movs	r3, #1
 8005494:	464a      	mov	r2, r9
 8005496:	4639      	mov	r1, r7
 8005498:	4630      	mov	r0, r6
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d08a      	beq.n	80053b6 <_printf_i+0x13a>
 80054a0:	3501      	adds	r5, #1
 80054a2:	e7eb      	b.n	800547c <_printf_i+0x200>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1a7      	bne.n	80053f8 <_printf_i+0x17c>
 80054a8:	780b      	ldrb	r3, [r1, #0]
 80054aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054b2:	e765      	b.n	8005380 <_printf_i+0x104>
 80054b4:	08005696 	.word	0x08005696
 80054b8:	08005685 	.word	0x08005685

080054bc <memchr>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	b2c9      	uxtb	r1, r1
 80054c0:	4402      	add	r2, r0
 80054c2:	4290      	cmp	r0, r2
 80054c4:	4603      	mov	r3, r0
 80054c6:	d101      	bne.n	80054cc <memchr+0x10>
 80054c8:	2000      	movs	r0, #0
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	781c      	ldrb	r4, [r3, #0]
 80054ce:	3001      	adds	r0, #1
 80054d0:	428c      	cmp	r4, r1
 80054d2:	d1f6      	bne.n	80054c2 <memchr+0x6>
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd10      	pop	{r4, pc}

080054d8 <memmove>:
 80054d8:	4288      	cmp	r0, r1
 80054da:	b510      	push	{r4, lr}
 80054dc:	eb01 0302 	add.w	r3, r1, r2
 80054e0:	d803      	bhi.n	80054ea <memmove+0x12>
 80054e2:	1e42      	subs	r2, r0, #1
 80054e4:	4299      	cmp	r1, r3
 80054e6:	d10c      	bne.n	8005502 <memmove+0x2a>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	4298      	cmp	r0, r3
 80054ec:	d2f9      	bcs.n	80054e2 <memmove+0xa>
 80054ee:	1881      	adds	r1, r0, r2
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	42d3      	cmn	r3, r2
 80054f4:	d100      	bne.n	80054f8 <memmove+0x20>
 80054f6:	bd10      	pop	{r4, pc}
 80054f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80054fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005500:	e7f7      	b.n	80054f2 <memmove+0x1a>
 8005502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005506:	f802 4f01 	strb.w	r4, [r2, #1]!
 800550a:	e7eb      	b.n	80054e4 <memmove+0xc>

0800550c <_realloc_r>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	4607      	mov	r7, r0
 8005510:	4614      	mov	r4, r2
 8005512:	460e      	mov	r6, r1
 8005514:	b921      	cbnz	r1, 8005520 <_realloc_r+0x14>
 8005516:	4611      	mov	r1, r2
 8005518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800551c:	f7ff bbbe 	b.w	8004c9c <_malloc_r>
 8005520:	b922      	cbnz	r2, 800552c <_realloc_r+0x20>
 8005522:	f7ff fb6f 	bl	8004c04 <_free_r>
 8005526:	4625      	mov	r5, r4
 8005528:	4628      	mov	r0, r5
 800552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552c:	f000 f814 	bl	8005558 <_malloc_usable_size_r>
 8005530:	4284      	cmp	r4, r0
 8005532:	d90f      	bls.n	8005554 <_realloc_r+0x48>
 8005534:	4621      	mov	r1, r4
 8005536:	4638      	mov	r0, r7
 8005538:	f7ff fbb0 	bl	8004c9c <_malloc_r>
 800553c:	4605      	mov	r5, r0
 800553e:	2800      	cmp	r0, #0
 8005540:	d0f2      	beq.n	8005528 <_realloc_r+0x1c>
 8005542:	4631      	mov	r1, r6
 8005544:	4622      	mov	r2, r4
 8005546:	f7ff fb51 	bl	8004bec <memcpy>
 800554a:	4631      	mov	r1, r6
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff fb59 	bl	8004c04 <_free_r>
 8005552:	e7e9      	b.n	8005528 <_realloc_r+0x1c>
 8005554:	4635      	mov	r5, r6
 8005556:	e7e7      	b.n	8005528 <_realloc_r+0x1c>

08005558 <_malloc_usable_size_r>:
 8005558:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800555c:	2800      	cmp	r0, #0
 800555e:	f1a0 0004 	sub.w	r0, r0, #4
 8005562:	bfbc      	itt	lt
 8005564:	580b      	ldrlt	r3, [r1, r0]
 8005566:	18c0      	addlt	r0, r0, r3
 8005568:	4770      	bx	lr
	...

0800556c <_getpid>:
 800556c:	2258      	movs	r2, #88	; 0x58
 800556e:	4b02      	ldr	r3, [pc, #8]	; (8005578 <_getpid+0xc>)
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	4770      	bx	lr
 8005578:	20000288 	.word	0x20000288

0800557c <_kill>:
 800557c:	2258      	movs	r2, #88	; 0x58
 800557e:	4b02      	ldr	r3, [pc, #8]	; (8005588 <_kill+0xc>)
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	4770      	bx	lr
 8005588:	20000288 	.word	0x20000288

0800558c <_sbrk>:
 800558c:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <_sbrk+0x14>)
 800558e:	4602      	mov	r2, r0
 8005590:	6819      	ldr	r1, [r3, #0]
 8005592:	b909      	cbnz	r1, 8005598 <_sbrk+0xc>
 8005594:	4903      	ldr	r1, [pc, #12]	; (80055a4 <_sbrk+0x18>)
 8005596:	6019      	str	r1, [r3, #0]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	4402      	add	r2, r0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	4770      	bx	lr
 80055a0:	20000284 	.word	0x20000284
 80055a4:	2000028c 	.word	0x2000028c

080055a8 <_exit>:
 80055a8:	e7fe      	b.n	80055a8 <_exit>
	...

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
