
canbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000a0  20000000  08003af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b8  200000a0  08003b94  000200a0  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000258  08003b94  00020258  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa56  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b27  00000000  00000000  0002ab1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006a0  00000000  00000000  0002c648  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  0002cce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003ecc  00000000  00000000  0002d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002a32  00000000  00000000  0003118c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033bbe  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001d88  00000000  00000000  00033c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  000359c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      00000076  00000000  00000000  00035a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a44 	.word	0x08003a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08003a44 	.word	0x08003a44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800021c:	f1a2 0201 	sub.w	r2, r2, #1
 8000220:	d1ed      	bne.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_f2iz>:
 800037c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000380:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000384:	d30f      	bcc.n	80003a6 <__aeabi_f2iz+0x2a>
 8000386:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800038a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800038e:	d90d      	bls.n	80003ac <__aeabi_f2iz+0x30>
 8000390:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000398:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800039c:	fa23 f002 	lsr.w	r0, r3, r2
 80003a0:	bf18      	it	ne
 80003a2:	4240      	negne	r0, r0
 80003a4:	4770      	bx	lr
 80003a6:	f04f 0000 	mov.w	r0, #0
 80003aa:	4770      	bx	lr
 80003ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80003b0:	d101      	bne.n	80003b6 <__aeabi_f2iz+0x3a>
 80003b2:	0242      	lsls	r2, r0, #9
 80003b4:	d105      	bne.n	80003c2 <__aeabi_f2iz+0x46>
 80003b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80003ba:	bf08      	it	eq
 80003bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80003c0:	4770      	bx	lr
 80003c2:	f04f 0000 	mov.w	r0, #0
 80003c6:	4770      	bx	lr

080003c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f103 0208 	add.w	r2, r3, #8
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f04f 32ff 	mov.w	r2, #4294967295
 80003e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f103 0208 	add.w	r2, r3, #8
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	f103 0208 	add.w	r2, r3, #8
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000406:	b480      	push	{r7}
 8000408:	b083      	sub	sp, #12
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800041e:	b480      	push	{r7}
 8000420:	b085      	sub	sp, #20
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	689a      	ldr	r2, [r3, #8]
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	683a      	ldr	r2, [r7, #0]
 8000448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1c5a      	adds	r2, r3, #1
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	3714      	adds	r7, #20
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000474:	68bb      	ldr	r3, [r7, #8]
 8000476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800047a:	d103      	bne.n	8000484 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	691b      	ldr	r3, [r3, #16]
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	e00c      	b.n	800049e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	3308      	adds	r3, #8
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	e002      	b.n	8000492 <vListInsert+0x2e>
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	429a      	cmp	r2, r3
 800049c:	d9f6      	bls.n	800048c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	685a      	ldr	r2, [r3, #4]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	68fa      	ldr	r2, [r7, #12]
 80004b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	683a      	ldr	r2, [r7, #0]
 80004b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	691b      	ldr	r3, [r3, #16]
 80004e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	6892      	ldr	r2, [r2, #8]
 80004ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	6852      	ldr	r2, [r2, #4]
 80004f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	685a      	ldr	r2, [r3, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d103      	bne.n	8000508 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
	...

08000528 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3b04      	subs	r3, #4
 8000538:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3b04      	subs	r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	f023 0201 	bic.w	r2, r3, #1
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3b04      	subs	r3, #4
 8000556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <pxPortInitialiseStack+0x54>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3b14      	subs	r3, #20
 8000562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3b20      	subs	r3, #32
 800056e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	08000581 	.word	0x08000581

08000580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <prvTaskExitError+0x4c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000592:	d009      	beq.n	80005a8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000598:	f383 8811 	msr	BASEPRI, r3
 800059c:	f3bf 8f6f 	isb	sy
 80005a0:	f3bf 8f4f 	dsb	sy
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e7fe      	b.n	80005a6 <prvTaskExitError+0x26>
 80005a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80005ba:	bf00      	nop
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0fc      	beq.n	80005bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20000000 	.word	0x20000000

080005d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <pxCurrentTCBConst2>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	6808      	ldr	r0, [r1, #0]
 80005d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005da:	f380 8809 	msr	PSP, r0
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	f380 8811 	msr	BASEPRI, r0
 80005ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80005ee:	4770      	bx	lr

080005f0 <pxCurrentTCBConst2>:
 80005f0:	200000c4 	.word	0x200000c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop

080005f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <prvPortStartFirstTask+0x1c>)
 80005fa:	6800      	ldr	r0, [r0, #0]
 80005fc:	6800      	ldr	r0, [r0, #0]
 80005fe:	f380 8808 	msr	MSP, r0
 8000602:	b662      	cpsie	i
 8000604:	b661      	cpsie	f
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	df00      	svc	0
 8000610:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000612:	bf00      	nop
 8000614:	e000ed08 	.word	0xe000ed08

08000618 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <xPortStartScheduler+0xcc>)
 8000620:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <xPortStartScheduler+0xd0>)
 8000644:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <xPortStartScheduler+0xd4>)
 8000648:	2207      	movs	r2, #7
 800064a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800064c:	e009      	b.n	8000662 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <xPortStartScheduler+0xd4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3b01      	subs	r3, #1
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <xPortStartScheduler+0xd4>)
 8000656:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800066a:	2b80      	cmp	r3, #128	; 0x80
 800066c:	d0ef      	beq.n	800064e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <xPortStartScheduler+0xd4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f1c3 0307 	rsb	r3, r3, #7
 8000676:	2b04      	cmp	r3, #4
 8000678:	d009      	beq.n	800068e <xPortStartScheduler+0x76>
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	e7fe      	b.n	800068c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <xPortStartScheduler+0xd4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	4a15      	ldr	r2, [pc, #84]	; (80006ec <xPortStartScheduler+0xd4>)
 8000696:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <xPortStartScheduler+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80006a0:	4a12      	ldr	r2, [pc, #72]	; (80006ec <xPortStartScheduler+0xd4>)
 80006a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80006ac:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <xPortStartScheduler+0xd8>)
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <xPortStartScheduler+0xd8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <xPortStartScheduler+0xd8>)
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <xPortStartScheduler+0xd8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80006c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80006c4:	f000 f8b0 	bl	8000828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <xPortStartScheduler+0xdc>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80006ce:	f7ff ff93 	bl	80005f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80006d2:	f001 f8d5 	bl	8001880 <vTaskSwitchContext>
	prvTaskExitError();
 80006d6:	f7ff ff53 	bl	8000580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	e000e400 	.word	0xe000e400
 80006e8:	200000bc 	.word	0x200000bc
 80006ec:	200000c0 	.word	0x200000c0
 80006f0:	e000ed20 	.word	0xe000ed20
 80006f4:	20000000 	.word	0x20000000

080006f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	f3bf 8f6f 	isb	sy
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <vPortEnterCritical+0x54>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3301      	adds	r3, #1
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <vPortEnterCritical+0x54>)
 8000718:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <vPortEnterCritical+0x54>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10e      	bne.n	8000740 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <vPortEnterCritical+0x58>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <vPortEnterCritical+0x48>
 800072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000730:	f383 8811 	msr	BASEPRI, r3
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	f3bf 8f4f 	dsb	sy
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	e7fe      	b.n	800073e <vPortEnterCritical+0x46>
	}
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000000 	.word	0x20000000
 8000750:	e000ed04 	.word	0xe000ed04

08000754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <vPortExitCritical+0x48>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d109      	bne.n	8000776 <vPortExitCritical+0x22>
 8000762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000766:	f383 8811 	msr	BASEPRI, r3
 800076a:	f3bf 8f6f 	isb	sy
 800076e:	f3bf 8f4f 	dsb	sy
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	e7fe      	b.n	8000774 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <vPortExitCritical+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <vPortExitCritical+0x48>)
 800077e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <vPortExitCritical+0x48>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d104      	bne.n	8000792 <vPortExitCritical+0x3e>
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	20000000 	.word	0x20000000

080007a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80007a0:	f3ef 8009 	mrs	r0, PSP
 80007a4:	f3bf 8f6f 	isb	sy
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <pxCurrentTCBConst>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007b0:	6010      	str	r0, [r2, #0]
 80007b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80007b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80007ba:	f380 8811 	msr	BASEPRI, r0
 80007be:	f001 f85f 	bl	8001880 <vTaskSwitchContext>
 80007c2:	f04f 0000 	mov.w	r0, #0
 80007c6:	f380 8811 	msr	BASEPRI, r0
 80007ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007ce:	6819      	ldr	r1, [r3, #0]
 80007d0:	6808      	ldr	r0, [r1, #0]
 80007d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80007d6:	f380 8809 	msr	PSP, r0
 80007da:	f3bf 8f6f 	isb	sy
 80007de:	4770      	bx	lr

080007e0 <pxCurrentTCBConst>:
 80007e0:	200000c4 	.word	0x200000c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop

080007e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	__asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000800:	f000 ff86 	bl	8001710 <xTaskIncrementTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <SysTick_Handler+0x3c>)
 800080c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	e000ed04 	.word	0xe000ed04

08000828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <vPortSetupTimerInterrupt+0x28>)
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <vPortSetupTimerInterrupt+0x2c>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <vPortSetupTimerInterrupt+0x30>)
 800083a:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800083e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <vPortSetupTimerInterrupt+0x28>)
 8000842:	2207      	movs	r2, #7
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e010 	.word	0xe000e010
 8000854:	e000e018 	.word	0xe000e018
 8000858:	e000e014 	.word	0xe000e014

0800085c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000862:	f3ef 8305 	mrs	r3, IPSR
 8000866:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	2b0f      	cmp	r3, #15
 800086c:	d913      	bls.n	8000896 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <vPortValidateInterruptPriority+0x68>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <vPortValidateInterruptPriority+0x6c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	7afa      	ldrb	r2, [r7, #11]
 800087e:	429a      	cmp	r2, r3
 8000880:	d209      	bcs.n	8000896 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000886:	f383 8811 	msr	BASEPRI, r3
 800088a:	f3bf 8f6f 	isb	sy
 800088e:	f3bf 8f4f 	dsb	sy
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	e7fe      	b.n	8000894 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <vPortValidateInterruptPriority+0x70>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <vPortValidateInterruptPriority+0x74>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d909      	bls.n	80008ba <vPortValidateInterruptPriority+0x5e>
 80008a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008aa:	f383 8811 	msr	BASEPRI, r3
 80008ae:	f3bf 8f6f 	isb	sy
 80008b2:	f3bf 8f4f 	dsb	sy
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	e7fe      	b.n	80008b8 <vPortValidateInterruptPriority+0x5c>
	}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e3f0 	.word	0xe000e3f0
 80008c8:	200000bc 	.word	0x200000bc
 80008cc:	e000ed0c 	.word	0xe000ed0c
 80008d0:	200000c0 	.word	0x200000c0

080008d4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80008dc:	f000 fe60 	bl	80015a0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f002 ff23 	bl	800372c <malloc>
 80008e6:	4603      	mov	r3, r0
 80008e8:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008ea:	f000 fe67 	bl	80015bc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if( pv )
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d006      	beq.n	8000914 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8000906:	f000 fe4b 	bl	80015a0 <vTaskSuspendAll>
		{
			free( pv );
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f002 ff16 	bl	800373c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8000910:	f000 fe54 	bl	80015bc <xTaskResumeAll>
	}
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <xQueueGenericReset+0x28>
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	e7fe      	b.n	8000942 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000944:	f7ff fed8 	bl	80006f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000950:	68f9      	ldr	r1, [r7, #12]
 8000952:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000954:	fb01 f303 	mul.w	r3, r1, r3
 8000958:	441a      	add	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000974:	3b01      	subs	r3, #1
 8000976:	68f9      	ldr	r1, [r7, #12]
 8000978:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800097a:	fb01 f303 	mul.w	r3, r1, r3
 800097e:	441a      	add	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d114      	bne.n	80009c4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d01a      	beq.n	80009d8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3310      	adds	r3, #16
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f812 	bl	80019d0 <xTaskRemoveFromEventList>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d012      	beq.n	80009d8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <xQueueGenericReset+0xcc>)
 80009b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	f3bf 8f4f 	dsb	sy
 80009be:	f3bf 8f6f 	isb	sy
 80009c2:	e009      	b.n	80009d8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3310      	adds	r3, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fcfd 	bl	80003c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3324      	adds	r3, #36	; 0x24
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fcf8 	bl	80003c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80009d8:	f7ff febc 	bl	8000754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	e000ed04 	.word	0xe000ed04

080009ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	4613      	mov	r3, r2
 80009f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d109      	bne.n	8000a14 <xQueueGenericCreate+0x28>
 8000a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a04:	f383 8811 	msr	BASEPRI, r3
 8000a08:	f3bf 8f6f 	isb	sy
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	e7fe      	b.n	8000a12 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	fb02 f303 	mul.w	r3, r2, r3
 8000a1c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3348      	adds	r3, #72	; 0x48
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff56 	bl	80008d4 <pvPortMalloc>
 8000a28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00d      	beq.n	8000a4c <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	3348      	adds	r3, #72	; 0x48
 8000a38:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	4613      	mov	r3, r2
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	f000 f805 	bl	8000a56 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d103      	bne.n	8000a72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e002      	b.n	8000a78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000a84:	2101      	movs	r1, #1
 8000a86:	69b8      	ldr	r0, [r7, #24]
 8000a88:	f7ff ff48 	bl	800091c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	; 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d109      	bne.n	8000ac4 <xQueueGenericSend+0x30>
 8000ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ab4:	f383 8811 	msr	BASEPRI, r3
 8000ab8:	f3bf 8f6f 	isb	sy
 8000abc:	f3bf 8f4f 	dsb	sy
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac2:	e7fe      	b.n	8000ac2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d103      	bne.n	8000ad2 <xQueueGenericSend+0x3e>
 8000aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <xQueueGenericSend+0x42>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <xQueueGenericSend+0x44>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <xQueueGenericSend+0x5c>
 8000adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	e7fe      	b.n	8000aee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d103      	bne.n	8000afe <xQueueGenericSend+0x6a>
 8000af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d101      	bne.n	8000b02 <xQueueGenericSend+0x6e>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <xQueueGenericSend+0x70>
 8000b02:	2300      	movs	r3, #0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <xQueueGenericSend+0x88>
 8000b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0c:	f383 8811 	msr	BASEPRI, r3
 8000b10:	f3bf 8f6f 	isb	sy
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	e7fe      	b.n	8000b1a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b1c:	f001 f8f0 	bl	8001d00 <xTaskGetSchedulerState>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <xQueueGenericSend+0x98>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d101      	bne.n	8000b30 <xQueueGenericSend+0x9c>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <xQueueGenericSend+0x9e>
 8000b30:	2300      	movs	r3, #0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d109      	bne.n	8000b4a <xQueueGenericSend+0xb6>
 8000b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b3a:	f383 8811 	msr	BASEPRI, r3
 8000b3e:	f3bf 8f6f 	isb	sy
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e7fe      	b.n	8000b48 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000b4a:	f7ff fdd5 	bl	80006f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d302      	bcc.n	8000b60 <xQueueGenericSend+0xcc>
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d129      	bne.n	8000bb4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b66:	f000 fa25 	bl	8000fb4 <prvCopyDataToQueue>
 8000b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d010      	beq.n	8000b96 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b76:	3324      	adds	r3, #36	; 0x24
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 ff29 	bl	80019d0 <xTaskRemoveFromEventList>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <xQueueGenericSend+0x1f0>)
 8000b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	f3bf 8f4f 	dsb	sy
 8000b90:	f3bf 8f6f 	isb	sy
 8000b94:	e00a      	b.n	8000bac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d007      	beq.n	8000bac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <xQueueGenericSend+0x1f0>)
 8000b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000bac:	f7ff fdd2 	bl	8000754 <vPortExitCritical>
				return pdPASS;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e063      	b.n	8000c7c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d103      	bne.n	8000bc2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000bba:	f7ff fdcb 	bl	8000754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e05c      	b.n	8000c7c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d106      	bne.n	8000bd6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 ff61 	bl	8001a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000bd6:	f7ff fdbd 	bl	8000754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000bda:	f000 fce1 	bl	80015a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000bde:	f7ff fd8b 	bl	80006f8 <vPortEnterCritical>
 8000be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bee:	d103      	bne.n	8000bf8 <xQueueGenericSend+0x164>
 8000bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d103      	bne.n	8000c0e <xQueueGenericSend+0x17a>
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000c0e:	f7ff fda1 	bl	8000754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c12:	1d3a      	adds	r2, r7, #4
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 ff50 	bl	8001ac0 <xTaskCheckForTimeOut>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d124      	bne.n	8000c70 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c28:	f000 fabc 	bl	80011a4 <prvIsQueueFull>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d018      	beq.n	8000c64 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c34:	3310      	adds	r3, #16
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fe7a 	bl	8001934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c42:	f000 fa47 	bl	80010d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000c46:	f000 fcb9 	bl	80015bc <xTaskResumeAll>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f47f af7c 	bne.w	8000b4a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <xQueueGenericSend+0x1f0>)
 8000c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	f3bf 8f4f 	dsb	sy
 8000c5e:	f3bf 8f6f 	isb	sy
 8000c62:	e772      	b.n	8000b4a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c66:	f000 fa35 	bl	80010d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000c6a:	f000 fca7 	bl	80015bc <xTaskResumeAll>
 8000c6e:	e76c      	b.n	8000b4a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c72:	f000 fa2f 	bl	80010d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000c76:	f000 fca1 	bl	80015bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3738      	adds	r7, #56	; 0x38
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	e000ed04 	.word	0xe000ed04

08000c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d109      	bne.n	8000cb4 <xQueueGenericSendFromISR+0x2c>
 8000ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca4:	f383 8811 	msr	BASEPRI, r3
 8000ca8:	f3bf 8f6f 	isb	sy
 8000cac:	f3bf 8f4f 	dsb	sy
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cb2:	e7fe      	b.n	8000cb2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <xQueueGenericSendFromISR+0x3a>
 8000cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <xQueueGenericSendFromISR+0x3e>
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e000      	b.n	8000cc8 <xQueueGenericSendFromISR+0x40>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d109      	bne.n	8000ce0 <xQueueGenericSendFromISR+0x58>
 8000ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd0:	f383 8811 	msr	BASEPRI, r3
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	f3bf 8f4f 	dsb	sy
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cde:	e7fe      	b.n	8000cde <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d103      	bne.n	8000cee <xQueueGenericSendFromISR+0x66>
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <xQueueGenericSendFromISR+0x6a>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <xQueueGenericSendFromISR+0x6c>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d109      	bne.n	8000d0c <xQueueGenericSendFromISR+0x84>
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	623b      	str	r3, [r7, #32]
 8000d0a:	e7fe      	b.n	8000d0a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000d0c:	f7ff fda6 	bl	800085c <vPortValidateInterruptPriority>
	__asm volatile
 8000d10:	f3ef 8211 	mrs	r2, BASEPRI
 8000d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d18:	f383 8811 	msr	BASEPRI, r3
 8000d1c:	f3bf 8f6f 	isb	sy
 8000d20:	f3bf 8f4f 	dsb	sy
 8000d24:	61fa      	str	r2, [r7, #28]
 8000d26:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8000d28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d302      	bcc.n	8000d3e <xQueueGenericSendFromISR+0xb6>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d12f      	bne.n	8000d9e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	68b9      	ldr	r1, [r7, #8]
 8000d52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000d54:	f000 f92e 	bl	8000fb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d58:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d112      	bne.n	8000d88 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d016      	beq.n	8000d98 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d6c:	3324      	adds	r3, #36	; 0x24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 fe2e 	bl	80019d0 <xTaskRemoveFromEventList>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00e      	beq.n	8000d98 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00b      	beq.n	8000d98 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e007      	b.n	8000d98 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	b25a      	sxtb	r2, r3
 8000d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8000d9c:	e001      	b.n	8000da2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3740      	adds	r7, #64	; 0x40
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <xQueueReceive+0x2e>
	__asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	e7fe      	b.n	8000de4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d103      	bne.n	8000df4 <xQueueReceive+0x3c>
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <xQueueReceive+0x40>
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <xQueueReceive+0x42>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <xQueueReceive+0x5a>
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e7fe      	b.n	8000e10 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e12:	f000 ff75 	bl	8001d00 <xTaskGetSchedulerState>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <xQueueReceive+0x6a>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <xQueueReceive+0x6e>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <xQueueReceive+0x70>
 8000e26:	2300      	movs	r3, #0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <xQueueReceive+0x88>
 8000e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e30:	f383 8811 	msr	BASEPRI, r3
 8000e34:	f3bf 8f6f 	isb	sy
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	e7fe      	b.n	8000e3e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e40:	f7ff fc5a 	bl	80006f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d01f      	beq.n	8000e90 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e54:	f000 f918 	bl	8001088 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d00f      	beq.n	8000e88 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	3310      	adds	r3, #16
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fdaf 	bl	80019d0 <xTaskRemoveFromEventList>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8000e78:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <xQueueReceive+0x1b4>)
 8000e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	f3bf 8f4f 	dsb	sy
 8000e84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8000e88:	f7ff fc64 	bl	8000754 <vPortExitCritical>
				return pdPASS;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e069      	b.n	8000f64 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d103      	bne.n	8000e9e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e96:	f7ff fc5d 	bl	8000754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e062      	b.n	8000f64 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d106      	bne.n	8000eb2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fdf3 	bl	8001a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eb2:	f7ff fc4f 	bl	8000754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eb6:	f000 fb73 	bl	80015a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eba:	f7ff fc1d 	bl	80006f8 <vPortEnterCritical>
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eca:	d103      	bne.n	8000ed4 <xQueueReceive+0x11c>
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d103      	bne.n	8000eea <xQueueReceive+0x132>
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eea:	f7ff fc33 	bl	8000754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000eee:	1d3a      	adds	r2, r7, #4
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fde2 	bl	8001ac0 <xTaskCheckForTimeOut>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d123      	bne.n	8000f4a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f04:	f000 f938 	bl	8001178 <prvIsQueueEmpty>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d017      	beq.n	8000f3e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	3324      	adds	r3, #36	; 0x24
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fd0c 	bl	8001934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f1e:	f000 f8d9 	bl	80010d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f22:	f000 fb4b 	bl	80015bc <xTaskResumeAll>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d189      	bne.n	8000e40 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <xQueueReceive+0x1b4>)
 8000f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	f3bf 8f6f 	isb	sy
 8000f3c:	e780      	b.n	8000e40 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f40:	f000 f8c8 	bl	80010d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f44:	f000 fb3a 	bl	80015bc <xTaskResumeAll>
 8000f48:	e77a      	b.n	8000e40 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f4c:	f000 f8c2 	bl	80010d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f50:	f000 fb34 	bl	80015bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f56:	f000 f90f 	bl	8001178 <prvIsQueueEmpty>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f43f af6f 	beq.w	8000e40 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f62:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3730      	adds	r7, #48	; 0x30
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	e000ed04 	.word	0xe000ed04

08000f70 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d109      	bne.n	8000f96 <uxQueueSpacesAvailable+0x26>
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e7fe      	b.n	8000f94 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8000f96:	f7ff fbaf 	bl	80006f8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8000fa6:	f7ff fbd5 	bl	8000754 <vPortExitCritical>

	return uxReturn;
 8000faa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10d      	bne.n	8000fee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d14d      	bne.n	8001076 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 feac 	bl	8001d3c <xTaskPriorityDisinherit>
 8000fe4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e043      	b.n	8001076 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d119      	bne.n	8001028 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6858      	ldr	r0, [r3, #4]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	f002 fba4 	bl	800374c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	441a      	add	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	429a      	cmp	r2, r3
 800101c:	d32b      	bcc.n	8001076 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	e026      	b.n	8001076 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	68d8      	ldr	r0, [r3, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	461a      	mov	r2, r3
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	f002 fb8a 	bl	800374c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	425b      	negs	r3, r3
 8001042:	441a      	add	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	425b      	negs	r3, r3
 800105e:	441a      	add	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d105      	bne.n	8001076 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3b01      	subs	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800107e:	697b      	ldr	r3, [r7, #20]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	2b00      	cmp	r3, #0
 8001098:	d018      	beq.n	80010cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	441a      	add	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d303      	bcc.n	80010bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68d9      	ldr	r1, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	461a      	mov	r2, r3
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f002 fb40 	bl	800374c <memcpy>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80010dc:	f7ff fb0c 	bl	80006f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010e8:	e011      	b.n	800110e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d012      	beq.n	8001118 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3324      	adds	r3, #36	; 0x24
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fc6a 	bl	80019d0 <xTaskRemoveFromEventList>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001102:	f000 fd3d 	bl	8001b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3b01      	subs	r3, #1
 800110a:	b2db      	uxtb	r3, r3
 800110c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dce9      	bgt.n	80010ea <prvUnlockQueue+0x16>
 8001116:	e000      	b.n	800111a <prvUnlockQueue+0x46>
					break;
 8001118:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	22ff      	movs	r2, #255	; 0xff
 800111e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001122:	f7ff fb17 	bl	8000754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001126:	f7ff fae7 	bl	80006f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001130:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001132:	e011      	b.n	8001158 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d012      	beq.n	8001162 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3310      	adds	r3, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fc45 	bl	80019d0 <xTaskRemoveFromEventList>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800114c:	f000 fd18 	bl	8001b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	3b01      	subs	r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dce9      	bgt.n	8001134 <prvUnlockQueue+0x60>
 8001160:	e000      	b.n	8001164 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001162:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800116c:	f7ff faf2 	bl	8000754 <vPortExitCritical>
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001180:	f7ff faba 	bl	80006f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800118c:	2301      	movs	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e001      	b.n	8001196 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001196:	f7ff fadd 	bl	8000754 <vPortExitCritical>

	return xReturn;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011ac:	f7ff faa4 	bl	80006f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d102      	bne.n	80011c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e001      	b.n	80011c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011c6:	f7ff fac5 	bl	8000754 <vPortExitCritical>

	return xReturn;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80011e4:	f7ff fa88 	bl	80006f8 <vPortEnterCritical>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f4:	d103      	bne.n	80011fe <vQueueWaitForMessageRestricted+0x2a>
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120a:	d103      	bne.n	8001214 <vQueueWaitForMessageRestricted+0x40>
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001214:	f7ff fa9e 	bl	8000754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3324      	adds	r3, #36	; 0x24
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fba7 	bl	800197c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff50 	bl	80010d4 <prvUnlockQueue>
	}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af04      	add	r7, sp, #16
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fb3f 	bl	80008d4 <pvPortMalloc>
 8001256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00e      	beq.n	800127c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800125e:	2050      	movs	r0, #80	; 0x50
 8001260:	f7ff fb38 	bl	80008d4 <pvPortMalloc>
 8001264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
 8001272:	e005      	b.n	8001280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff fb3f 	bl	80008f8 <vPortFree>
 800127a:	e001      	b.n	8001280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	2300      	movs	r3, #0
 800128a:	9303      	str	r3, [sp, #12]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f000 f80e 	bl	80012be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80012a2:	69f8      	ldr	r0, [r7, #28]
 80012a4:	f000 f892 	bl	80013cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	e002      	b.n	80012b4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80012b4:	69bb      	ldr	r3, [r7, #24]
	}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b088      	sub	sp, #32
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80012cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012d6:	3b01      	subs	r3, #1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f023 0307 	bic.w	r3, r3, #7
 80012e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <prvInitialiseNewTask+0x46>
 80012f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e7fe      	b.n	8001302 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d01f      	beq.n	800134a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e012      	b.n	8001336 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001310:	68ba      	ldr	r2, [r7, #8]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	4413      	add	r3, r2
 8001316:	7819      	ldrb	r1, [r3, #0]
 8001318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	3334      	adds	r3, #52	; 0x34
 8001320:	460a      	mov	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d9e9      	bls.n	8001310 <prvInitialiseNewTask+0x52>
 800133c:	e000      	b.n	8001340 <prvInitialiseNewTask+0x82>
			{
				break;
 800133e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	2200      	movs	r2, #0
 8001344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001348:	e003      	b.n	8001352 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	2b01      	cmp	r3, #1
 8001356:	d901      	bls.n	800135c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001358:	2301      	movs	r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	3304      	adds	r3, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f847 	bl	8000406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800137a:	3318      	adds	r3, #24
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f842 	bl	8000406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138a:	f1c3 0202 	rsb	r2, r3, #2
 800138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139a:	2200      	movs	r2, #0
 800139c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	68f9      	ldr	r1, [r7, #12]
 80013aa:	69b8      	ldr	r0, [r7, #24]
 80013ac:	f7ff f8bc 	bl	8000528 <pxPortInitialiseStack>
 80013b0:	4602      	mov	r2, r0
 80013b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80013b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80013c2:	bf00      	nop
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80013d4:	f7ff f990 	bl	80006f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a29      	ldr	r2, [pc, #164]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80013ea:	4a27      	ldr	r2, [pc, #156]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <prvAddNewTaskToReadyList+0xb8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d110      	bne.n	800141a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80013f8:	f000 fbe6 	bl	8001bc8 <prvInitialiseTaskLists>
 80013fc:	e00d      	b.n	800141a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <prvAddNewTaskToReadyList+0xc0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001410:	429a      	cmp	r2, r3
 8001412:	d802      	bhi.n	800141a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <prvAddNewTaskToReadyList+0xc4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <prvAddNewTaskToReadyList+0xc4>)
 8001422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <prvAddNewTaskToReadyList+0xc8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <prvAddNewTaskToReadyList+0xc8>)
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <prvAddNewTaskToReadyList+0xcc>)
 8001444:	441a      	add	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f7fe ffe6 	bl	800041e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001452:	f7ff f97f 	bl	8000754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <prvAddNewTaskToReadyList+0xc0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00e      	beq.n	800147c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <prvAddNewTaskToReadyList+0xbc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <prvAddNewTaskToReadyList+0xd0>)
 800146e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	f3bf 8f4f 	dsb	sy
 8001478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000160 	.word	0x20000160
 8001488:	200000c4 	.word	0x200000c4
 800148c:	2000016c 	.word	0x2000016c
 8001490:	2000017c 	.word	0x2000017c
 8001494:	20000168 	.word	0x20000168
 8001498:	200000c8 	.word	0x200000c8
 800149c:	e000ed04 	.word	0xe000ed04

080014a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <vTaskDelay+0x60>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <vTaskDelay+0x2e>
 80014ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014be:	f383 8811 	msr	BASEPRI, r3
 80014c2:	f3bf 8f6f 	isb	sy
 80014c6:	f3bf 8f4f 	dsb	sy
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	e7fe      	b.n	80014cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80014ce:	f000 f867 	bl	80015a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 fcb5 	bl	8001e44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80014da:	f000 f86f 	bl	80015bc <xTaskResumeAll>
 80014de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <vTaskDelay+0x64>)
 80014e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	f3bf 8f4f 	dsb	sy
 80014f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000188 	.word	0x20000188
 8001504:	e000ed04 	.word	0xe000ed04

08001508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <vTaskStartScheduler+0x80>)
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2300      	movs	r3, #0
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	2246      	movs	r2, #70	; 0x46
 800151a:	491c      	ldr	r1, [pc, #112]	; (800158c <vTaskStartScheduler+0x84>)
 800151c:	481c      	ldr	r0, [pc, #112]	; (8001590 <vTaskStartScheduler+0x88>)
 800151e:	f7ff fe8d 	bl	800123c <xTaskCreate>
 8001522:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800152a:	f000 fcf1 	bl	8001f10 <xTimerCreateTimerTask>
 800152e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d115      	bne.n	8001562 <vTaskStartScheduler+0x5a>
 8001536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153a:	f383 8811 	msr	BASEPRI, r3
 800153e:	f3bf 8f6f 	isb	sy
 8001542:	f3bf 8f4f 	dsb	sy
 8001546:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <vTaskStartScheduler+0x8c>)
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <vTaskStartScheduler+0x90>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <vTaskStartScheduler+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800155c:	f7ff f85c 	bl	8000618 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001560:	e00d      	b.n	800157e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d109      	bne.n	800157e <vTaskStartScheduler+0x76>
 800156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156e:	f383 8811 	msr	BASEPRI, r3
 8001572:	f3bf 8f6f 	isb	sy
 8001576:	f3bf 8f4f 	dsb	sy
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e7fe      	b.n	800157c <vTaskStartScheduler+0x74>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000184 	.word	0x20000184
 800158c:	08003a5c 	.word	0x08003a5c
 8001590:	08001b99 	.word	0x08001b99
 8001594:	20000180 	.word	0x20000180
 8001598:	2000016c 	.word	0x2000016c
 800159c:	20000164 	.word	0x20000164

080015a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <vTaskSuspendAll+0x18>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <vTaskSuspendAll+0x18>)
 80015ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000188 	.word	0x20000188

080015bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <xTaskResumeAll+0x114>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <xTaskResumeAll+0x2a>
 80015d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	e7fe      	b.n	80015e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80015e6:	f7ff f887 	bl	80006f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <xTaskResumeAll+0x114>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <xTaskResumeAll+0x114>)
 80015f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <xTaskResumeAll+0x114>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d161      	bne.n	80016c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <xTaskResumeAll+0x118>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d05d      	beq.n	80016c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001604:	e02e      	b.n	8001664 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <xTaskResumeAll+0x11c>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3318      	adds	r3, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff5e 	bl	80004d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3304      	adds	r3, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff59 	bl	80004d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	2201      	movs	r2, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	4b2c      	ldr	r3, [pc, #176]	; (80016dc <xTaskResumeAll+0x120>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <xTaskResumeAll+0x120>)
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <xTaskResumeAll+0x124>)
 8001642:	441a      	add	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3304      	adds	r3, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4610      	mov	r0, r2
 800164c:	f7fe fee7 	bl	800041e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001654:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <xTaskResumeAll+0x128>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	429a      	cmp	r2, r3
 800165c:	d302      	bcc.n	8001664 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800165e:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <xTaskResumeAll+0x12c>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <xTaskResumeAll+0x11c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1cc      	bne.n	8001606 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001672:	f000 fb25 	bl	8001cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <xTaskResumeAll+0x130>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d010      	beq.n	80016a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001682:	f000 f845 	bl	8001710 <xTaskIncrementTick>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <xTaskResumeAll+0x12c>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3b01      	subs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f1      	bne.n	8001682 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <xTaskResumeAll+0x130>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <xTaskResumeAll+0x12c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d009      	beq.n	80016c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <xTaskResumeAll+0x134>)
 80016b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	f3bf 8f4f 	dsb	sy
 80016bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80016c0:	f7ff f848 	bl	8000754 <vPortExitCritical>

	return xAlreadyYielded;
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000188 	.word	0x20000188
 80016d4:	20000160 	.word	0x20000160
 80016d8:	20000120 	.word	0x20000120
 80016dc:	20000168 	.word	0x20000168
 80016e0:	200000c8 	.word	0x200000c8
 80016e4:	200000c4 	.word	0x200000c4
 80016e8:	20000174 	.word	0x20000174
 80016ec:	20000170 	.word	0x20000170
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <xTaskGetTickCount+0x18>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000164 	.word	0x20000164

08001710 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <xTaskIncrementTick+0x144>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 808d 	bne.w	800183e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001724:	4b4c      	ldr	r3, [pc, #304]	; (8001858 <xTaskIncrementTick+0x148>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <xTaskIncrementTick+0x148>)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11f      	bne.n	8001778 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001738:	4b48      	ldr	r3, [pc, #288]	; (800185c <xTaskIncrementTick+0x14c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d009      	beq.n	8001756 <xTaskIncrementTick+0x46>
 8001742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e7fe      	b.n	8001754 <xTaskIncrementTick+0x44>
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <xTaskIncrementTick+0x14c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <xTaskIncrementTick+0x150>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a3e      	ldr	r2, [pc, #248]	; (800185c <xTaskIncrementTick+0x14c>)
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4a3e      	ldr	r2, [pc, #248]	; (8001860 <xTaskIncrementTick+0x150>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <xTaskIncrementTick+0x154>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a3c      	ldr	r2, [pc, #240]	; (8001864 <xTaskIncrementTick+0x154>)
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	f000 faa4 	bl	8001cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001778:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <xTaskIncrementTick+0x158>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	429a      	cmp	r2, r3
 8001780:	d348      	bcc.n	8001814 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001782:	4b36      	ldr	r3, [pc, #216]	; (800185c <xTaskIncrementTick+0x14c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d104      	bne.n	8001796 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <xTaskIncrementTick+0x158>)
 800178e:	f04f 32ff 	mov.w	r2, #4294967295
 8001792:	601a      	str	r2, [r3, #0]
					break;
 8001794:	e03e      	b.n	8001814 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <xTaskIncrementTick+0x14c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d203      	bcs.n	80017b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80017ae:	4a2e      	ldr	r2, [pc, #184]	; (8001868 <xTaskIncrementTick+0x158>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80017b4:	e02e      	b.n	8001814 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	3304      	adds	r3, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe8a 	bl	80004d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3318      	adds	r3, #24
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe81 	bl	80004d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <xTaskIncrementTick+0x15c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	4a22      	ldr	r2, [pc, #136]	; (800186c <xTaskIncrementTick+0x15c>)
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <xTaskIncrementTick+0x160>)
 80017f2:	441a      	add	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f7fe fe0f 	bl	800041e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <xTaskIncrementTick+0x164>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	429a      	cmp	r2, r3
 800180c:	d3b9      	bcc.n	8001782 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800180e:	2301      	movs	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001812:	e7b6      	b.n	8001782 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <xTaskIncrementTick+0x164>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181a:	4915      	ldr	r1, [pc, #84]	; (8001870 <xTaskIncrementTick+0x160>)
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d901      	bls.n	8001830 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800182c:	2301      	movs	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <xTaskIncrementTick+0x168>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e004      	b.n	8001848 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <xTaskIncrementTick+0x16c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <xTaskIncrementTick+0x16c>)
 8001846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001848:	697b      	ldr	r3, [r7, #20]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000188 	.word	0x20000188
 8001858:	20000164 	.word	0x20000164
 800185c:	20000118 	.word	0x20000118
 8001860:	2000011c 	.word	0x2000011c
 8001864:	20000178 	.word	0x20000178
 8001868:	20000180 	.word	0x20000180
 800186c:	20000168 	.word	0x20000168
 8001870:	200000c8 	.word	0x200000c8
 8001874:	200000c4 	.word	0x200000c4
 8001878:	20000174 	.word	0x20000174
 800187c:	20000170 	.word	0x20000170

08001880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001886:	4b26      	ldr	r3, [pc, #152]	; (8001920 <vTaskSwitchContext+0xa0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800188e:	4b25      	ldr	r3, [pc, #148]	; (8001924 <vTaskSwitchContext+0xa4>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001894:	e03e      	b.n	8001914 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <vTaskSwitchContext+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800189c:	4b22      	ldr	r3, [pc, #136]	; (8001928 <vTaskSwitchContext+0xa8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	f1c3 031f 	rsb	r3, r3, #31
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	491e      	ldr	r1, [pc, #120]	; (800192c <vTaskSwitchContext+0xac>)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <vTaskSwitchContext+0x5a>
	__asm volatile
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	e7fe      	b.n	80018d8 <vTaskSwitchContext+0x58>
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <vTaskSwitchContext+0xac>)
 80018e6:	4413      	add	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3308      	adds	r3, #8
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d104      	bne.n	800190a <vTaskSwitchContext+0x8a>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <vTaskSwitchContext+0xb0>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000188 	.word	0x20000188
 8001924:	20000174 	.word	0x20000174
 8001928:	20000168 	.word	0x20000168
 800192c:	200000c8 	.word	0x200000c8
 8001930:	200000c4 	.word	0x200000c4

08001934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <vTaskPlaceOnEventList+0x24>
 8001944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001948:	f383 8811 	msr	BASEPRI, r3
 800194c:	f3bf 8f6f 	isb	sy
 8001950:	f3bf 8f4f 	dsb	sy
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e7fe      	b.n	8001956 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <vTaskPlaceOnEventList+0x44>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3318      	adds	r3, #24
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7fe fd7f 	bl	8000464 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001966:	2101      	movs	r1, #1
 8001968:	6838      	ldr	r0, [r7, #0]
 800196a:	f000 fa6b 	bl	8001e44 <prvAddCurrentTaskToDelayedList>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200000c4 	.word	0x200000c4

0800197c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <vTaskPlaceOnEventListRestricted+0x26>
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e7fe      	b.n	80019a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <vTaskPlaceOnEventListRestricted+0x50>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3318      	adds	r3, #24
 80019a8:	4619      	mov	r1, r3
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7fe fd37 	bl	800041e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f000 fa40 	bl	8001e44 <prvAddCurrentTaskToDelayedList>
	}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	200000c4 	.word	0x200000c4

080019d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <xTaskRemoveFromEventList+0x2a>
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e7fe      	b.n	80019f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	3318      	adds	r3, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd68 	bl	80004d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <xTaskRemoveFromEventList+0xac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11c      	bne.n	8001a46 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	3304      	adds	r3, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd5f 	bl	80004d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <xTaskRemoveFromEventList+0xb0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <xTaskRemoveFromEventList+0xb0>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <xTaskRemoveFromEventList+0xb4>)
 8001a36:	441a      	add	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7fe fced 	bl	800041e <vListInsertEnd>
 8001a44:	e005      	b.n	8001a52 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	3318      	adds	r3, #24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480e      	ldr	r0, [pc, #56]	; (8001a88 <xTaskRemoveFromEventList+0xb8>)
 8001a4e:	f7fe fce6 	bl	800041e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <xTaskRemoveFromEventList+0xbc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d905      	bls.n	8001a6c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <xTaskRemoveFromEventList+0xc0>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e001      	b.n	8001a70 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001a70:	697b      	ldr	r3, [r7, #20]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000188 	.word	0x20000188
 8001a80:	20000168 	.word	0x20000168
 8001a84:	200000c8 	.word	0x200000c8
 8001a88:	20000120 	.word	0x20000120
 8001a8c:	200000c4 	.word	0x200000c4
 8001a90:	20000174 	.word	0x20000174

08001a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <vTaskInternalSetTimeOutState+0x24>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <vTaskInternalSetTimeOutState+0x28>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000178 	.word	0x20000178
 8001abc:	20000164 	.word	0x20000164

08001ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <xTaskCheckForTimeOut+0x24>
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e7fe      	b.n	8001ae2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d109      	bne.n	8001afe <xTaskCheckForTimeOut+0x3e>
 8001aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aee:	f383 8811 	msr	BASEPRI, r3
 8001af2:	f3bf 8f6f 	isb	sy
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e7fe      	b.n	8001afc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001afe:	f7fe fdfb 	bl	80006f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <xTaskCheckForTimeOut+0xb8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1a:	d102      	bne.n	8001b22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e023      	b.n	8001b6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <xTaskCheckForTimeOut+0xbc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d007      	beq.n	8001b3e <xTaskCheckForTimeOut+0x7e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d802      	bhi.n	8001b3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	e015      	b.n	8001b6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d90b      	bls.n	8001b60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	1ad2      	subs	r2, r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ff9d 	bl	8001a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e004      	b.n	8001b6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001b6a:	f7fe fdf3 	bl	8000754 <vPortExitCritical>

	return xReturn;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3720      	adds	r7, #32
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000164 	.word	0x20000164
 8001b7c:	20000178 	.word	0x20000178

08001b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <vTaskMissedYield+0x14>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000174 	.word	0x20000174

08001b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ba0:	f000 f852 	bl	8001c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <prvIdleTask+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d9f9      	bls.n	8001ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <prvIdleTask+0x2c>)
 8001bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001bbc:	e7f0      	b.n	8001ba0 <prvIdleTask+0x8>
 8001bbe:	bf00      	nop
 8001bc0:	200000c8 	.word	0x200000c8
 8001bc4:	e000ed04 	.word	0xe000ed04

08001bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	e00c      	b.n	8001bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <prvInitialiseTaskLists+0x60>)
 8001be0:	4413      	add	r3, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fbf0 	bl	80003c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d9ef      	bls.n	8001bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <prvInitialiseTaskLists+0x64>)
 8001bf6:	f7fe fbe7 	bl	80003c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bfa:	480d      	ldr	r0, [pc, #52]	; (8001c30 <prvInitialiseTaskLists+0x68>)
 8001bfc:	f7fe fbe4 	bl	80003c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <prvInitialiseTaskLists+0x6c>)
 8001c02:	f7fe fbe1 	bl	80003c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001c06:	480c      	ldr	r0, [pc, #48]	; (8001c38 <prvInitialiseTaskLists+0x70>)
 8001c08:	f7fe fbde 	bl	80003c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001c0c:	480b      	ldr	r0, [pc, #44]	; (8001c3c <prvInitialiseTaskLists+0x74>)
 8001c0e:	f7fe fbdb 	bl	80003c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <prvInitialiseTaskLists+0x78>)
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <prvInitialiseTaskLists+0x64>)
 8001c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <prvInitialiseTaskLists+0x7c>)
 8001c1a:	4a05      	ldr	r2, [pc, #20]	; (8001c30 <prvInitialiseTaskLists+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000c8 	.word	0x200000c8
 8001c2c:	200000f0 	.word	0x200000f0
 8001c30:	20000104 	.word	0x20000104
 8001c34:	20000120 	.word	0x20000120
 8001c38:	20000134 	.word	0x20000134
 8001c3c:	2000014c 	.word	0x2000014c
 8001c40:	20000118 	.word	0x20000118
 8001c44:	2000011c 	.word	0x2000011c

08001c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c4e:	e019      	b.n	8001c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001c50:	f7fe fd52 	bl	80006f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <prvCheckTasksWaitingTermination+0x4c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc37 	bl	80004d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <prvCheckTasksWaitingTermination+0x50>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <prvCheckTasksWaitingTermination+0x50>)
 8001c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <prvCheckTasksWaitingTermination+0x54>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <prvCheckTasksWaitingTermination+0x54>)
 8001c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001c7a:	f7fe fd6b 	bl	8000754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f80e 	bl	8001ca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <prvCheckTasksWaitingTermination+0x54>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e1      	bne.n	8001c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000134 	.word	0x20000134
 8001c98:	20000160 	.word	0x20000160
 8001c9c:	20000148 	.word	0x20000148

08001ca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fe23 	bl	80008f8 <vPortFree>
			vPortFree( pxTCB );
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7fe fe20 	bl	80008f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <prvResetNextTaskUnblockTime+0x38>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <prvResetNextTaskUnblockTime+0x3c>)
 8001cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001cd8:	e008      	b.n	8001cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <prvResetNextTaskUnblockTime+0x38>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <prvResetNextTaskUnblockTime+0x3c>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000118 	.word	0x20000118
 8001cfc:	20000180 	.word	0x20000180

08001d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <xTaskGetSchedulerState+0x34>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	e008      	b.n	8001d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <xTaskGetSchedulerState+0x38>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	e001      	b.n	8001d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001d26:	687b      	ldr	r3, [r7, #4]
	}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	2000016c 	.word	0x2000016c
 8001d38:	20000188 	.word	0x20000188

08001d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06c      	beq.n	8001e2c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <xTaskPriorityDisinherit+0xfc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d009      	beq.n	8001d70 <xTaskPriorityDisinherit+0x34>
 8001d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d60:	f383 8811 	msr	BASEPRI, r3
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e7fe      	b.n	8001d6e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <xTaskPriorityDisinherit+0x50>
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	e7fe      	b.n	8001d8a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d044      	beq.n	8001e2c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d140      	bne.n	8001e2c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb90 	bl	80004d4 <uxListRemove>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dbe:	491f      	ldr	r1, [pc, #124]	; (8001e3c <xTaskPriorityDisinherit+0x100>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10a      	bne.n	8001de6 <xTaskPriorityDisinherit+0xaa>
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <xTaskPriorityDisinherit+0x104>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4013      	ands	r3, r2
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <xTaskPriorityDisinherit+0x104>)
 8001de4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f1c3 0202 	rsb	r2, r3, #2
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	2201      	movs	r2, #1
 8001e00:	409a      	lsls	r2, r3
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <xTaskPriorityDisinherit+0x104>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <xTaskPriorityDisinherit+0x104>)
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <xTaskPriorityDisinherit+0x100>)
 8001e1a:	441a      	add	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f7fe fafb 	bl	800041e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001e2c:	697b      	ldr	r3, [r7, #20]
	}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200000c4 	.word	0x200000c4
 8001e3c:	200000c8 	.word	0x200000c8
 8001e40:	20000168 	.word	0x20000168

08001e44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001e4e:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb3a 	bl	80004d4 <uxListRemove>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	4b21      	ldr	r3, [pc, #132]	; (8001efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	4a20      	ldr	r2, [pc, #128]	; (8001efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8001e7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d10a      	bne.n	8001e9c <prvAddCurrentTaskToDelayedList+0x58>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3304      	adds	r3, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	481a      	ldr	r0, [pc, #104]	; (8001f00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001e96:	f7fe fac2 	bl	800041e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001e9a:	e026      	b.n	8001eea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d209      	bcs.n	8001ec8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f7fe facf 	bl	8000464 <vListInsert>
}
 8001ec6:	e010      	b.n	8001eea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f7fe fac5 	bl	8000464 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d202      	bcs.n	8001eea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6013      	str	r3, [r2, #0]
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000164 	.word	0x20000164
 8001ef8:	200000c4 	.word	0x200000c4
 8001efc:	20000168 	.word	0x20000168
 8001f00:	2000014c 	.word	0x2000014c
 8001f04:	2000011c 	.word	0x2000011c
 8001f08:	20000118 	.word	0x20000118
 8001f0c:	20000180 	.word	0x20000180

08001f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001f1a:	f000 facd 	bl	80024b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <xTimerCreateTimerTask+0x50>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <xTimerCreateTimerTask+0x54>)
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2246      	movs	r2, #70	; 0x46
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <xTimerCreateTimerTask+0x58>)
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <xTimerCreateTimerTask+0x5c>)
 8001f36:	f7ff f981 	bl	800123c <xTaskCreate>
 8001f3a:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <xTimerCreateTimerTask+0x46>
 8001f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	e7fe      	b.n	8001f54 <xTimerCreateTimerTask+0x44>
	return xReturn;
 8001f56:	687b      	ldr	r3, [r7, #4]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200001bc 	.word	0x200001bc
 8001f64:	200001c0 	.word	0x200001c0
 8001f68:	08003a64 	.word	0x08003a64
 8001f6c:	080020a1 	.word	0x080020a1

08001f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <xTimerGenericCommand+0x2c>
 8001f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8c:	f383 8811 	msr	BASEPRI, r3
 8001f90:	f3bf 8f6f 	isb	sy
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	623b      	str	r3, [r7, #32]
 8001f9a:	e7fe      	b.n	8001f9a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <xTimerGenericCommand+0x94>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02a      	beq.n	8001ffa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	dc18      	bgt.n	8001fe8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001fb6:	f7ff fea3 	bl	8001d00 <xTaskGetSchedulerState>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d109      	bne.n	8001fd4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001fc0:	4b10      	ldr	r3, [pc, #64]	; (8002004 <xTimerGenericCommand+0x94>)
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	f107 0114 	add.w	r1, r7, #20
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fcc:	f7fe fd62 	bl	8000a94 <xQueueGenericSend>
 8001fd0:	6278      	str	r0, [r7, #36]	; 0x24
 8001fd2:	e012      	b.n	8001ffa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <xTimerGenericCommand+0x94>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f107 0114 	add.w	r1, r7, #20
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f7fe fd58 	bl	8000a94 <xQueueGenericSend>
 8001fe4:	6278      	str	r0, [r7, #36]	; 0x24
 8001fe6:	e008      	b.n	8001ffa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <xTimerGenericCommand+0x94>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f107 0114 	add.w	r1, r7, #20
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	f7fe fe48 	bl	8000c88 <xQueueGenericSendFromISR>
 8001ff8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200001bc 	.word	0x200001bc

08002008 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af02      	add	r7, sp, #8
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <prvProcessExpiredTimer+0x94>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3304      	adds	r3, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa57 	bl	80004d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	18d1      	adds	r1, r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	6978      	ldr	r0, [r7, #20]
 8002042:	f000 f8cf 	bl	80021e4 <prvInsertTimerInActiveList>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01e      	beq.n	800208a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2300      	movs	r3, #0
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	2100      	movs	r1, #0
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8a 	bl	8001f70 <xTimerGenericCommand>
 800205c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d112      	bne.n	800208a <prvProcessExpiredTimer+0x82>
 8002064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002068:	f383 8811 	msr	BASEPRI, r3
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	f3bf 8f4f 	dsb	sy
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	e7fe      	b.n	8002076 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	b2da      	uxtb	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	4798      	blx	r3
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200001b4 	.word	0x200001b4

080020a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f857 	bl	8002160 <prvGetNextExpireTime>
 80020b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f803 	bl	80020c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80020be:	f000 f8d3 	bl	8002268 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020c2:	e7f1      	b.n	80020a8 <prvTimerTask+0x8>

080020c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80020ce:	f7ff fa67 	bl	80015a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f864 	bl	80021a4 <prvSampleTimeNow>
 80020dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d130      	bne.n	8002146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <prvProcessTimerOrBlockTask+0x3c>
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d806      	bhi.n	8002100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80020f2:	f7ff fa63 	bl	80015bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80020f6:	68f9      	ldr	r1, [r7, #12]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff85 	bl	8002008 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80020fe:	e024      	b.n	800214a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <prvProcessTimerOrBlockTask+0x90>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <prvProcessTimerOrBlockTask+0x50>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <prvProcessTimerOrBlockTask+0x52>
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <prvProcessTimerOrBlockTask+0x94>)
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f7ff f855 	bl	80011d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800212a:	f7ff fa47 	bl	80015bc <xTaskResumeAll>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <prvProcessTimerOrBlockTask+0x98>)
 8002136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f3bf 8f4f 	dsb	sy
 8002140:	f3bf 8f6f 	isb	sy
}
 8002144:	e001      	b.n	800214a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002146:	f7ff fa39 	bl	80015bc <xTaskResumeAll>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200001b8 	.word	0x200001b8
 8002158:	200001bc 	.word	0x200001bc
 800215c:	e000ed04 	.word	0xe000ed04

08002160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <prvGetNextExpireTime+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <prvGetNextExpireTime+0x16>
 8002172:	2201      	movs	r2, #1
 8002174:	e000      	b.n	8002178 <prvGetNextExpireTime+0x18>
 8002176:	2200      	movs	r2, #0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <prvGetNextExpireTime+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e001      	b.n	8002194 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	200001b4 	.word	0x200001b4

080021a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80021ac:	f7ff faa2 	bl	80016f4 <xTaskGetTickCount>
 80021b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <prvSampleTimeNow+0x3c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d205      	bcs.n	80021c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80021bc:	f000 f918 	bl	80023f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e002      	b.n	80021ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <prvSampleTimeNow+0x3c>)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80021d4:	68fb      	ldr	r3, [r7, #12]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200001c4 	.word	0x200001c4

080021e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d812      	bhi.n	8002230 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	1ad2      	subs	r2, r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	e01b      	b.n	8002256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <prvInsertTimerInActiveList+0x7c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe f91b 	bl	8000464 <vListInsert>
 800222e:	e012      	b.n	8002256 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d206      	bcs.n	8002246 <prvInsertTimerInActiveList+0x62>
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e007      	b.n	8002256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <prvInsertTimerInActiveList+0x80>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3304      	adds	r3, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe f907 	bl	8000464 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002256:	697b      	ldr	r3, [r7, #20]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200001b8 	.word	0x200001b8
 8002264:	200001b4 	.word	0x200001b4

08002268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800226e:	e0ac      	b.n	80023ca <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f2c0 80a9 	blt.w	80023ca <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3304      	adds	r3, #4
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe f923 	bl	80004d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff87 	bl	80021a4 <prvSampleTimeNow>
 8002296:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b09      	cmp	r3, #9
 800229c:	f200 8094 	bhi.w	80023c8 <prvProcessReceivedCommands+0x160>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <prvProcessReceivedCommands+0x40>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d1 	.word	0x080022d1
 80022b0:	080022d1 	.word	0x080022d1
 80022b4:	08002343 	.word	0x08002343
 80022b8:	08002357 	.word	0x08002357
 80022bc:	0800239f 	.word	0x0800239f
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022d1 	.word	0x080022d1
 80022c8:	08002343 	.word	0x08002343
 80022cc:	08002357 	.word	0x08002357
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	18d1      	adds	r1, r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022f0:	f7ff ff78 	bl	80021e4 <prvInsertTimerInActiveList>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d067      	beq.n	80023ca <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002300:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05c      	beq.n	80023ca <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	441a      	add	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2300      	movs	r3, #0
 800231e:	2100      	movs	r1, #0
 8002320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002322:	f7ff fe25 	bl	8001f70 <xTimerGenericCommand>
 8002326:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d14d      	bne.n	80023ca <prvProcessReceivedCommands+0x162>
 800232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002332:	f383 8811 	msr	BASEPRI, r3
 8002336:	f3bf 8f6f 	isb	sy
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e7fe      	b.n	8002340 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8002354:	e039      	b.n	80023ca <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <prvProcessReceivedCommands+0x122>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e7fe      	b.n	8002388 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	18d1      	adds	r1, r2, r3
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	6a3a      	ldr	r2, [r7, #32]
 8002396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002398:	f7ff ff24 	bl	80021e4 <prvInsertTimerInActiveList>
					break;
 800239c:	e015      	b.n	80023ca <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d103      	bne.n	80023b4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80023ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ae:	f7fe faa3 	bl	80008f8 <vPortFree>
 80023b2:	e00a      	b.n	80023ca <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80023c6:	e000      	b.n	80023ca <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80023c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <prvProcessReceivedCommands+0x184>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f107 0108 	add.w	r1, r7, #8
 80023d2:	2200      	movs	r2, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fcef 	bl	8000db8 <xQueueReceive>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f47f af47 	bne.w	8002270 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200001bc 	.word	0x200001bc

080023f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023f6:	e047      	b.n	8002488 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3304      	adds	r3, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f85f 	bl	80004d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	6938      	ldr	r0, [r7, #16]
 800241c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d02d      	beq.n	8002488 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	429a      	cmp	r2, r3
 800243c:	d90e      	bls.n	800245c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	3304      	adds	r3, #4
 8002452:	4619      	mov	r1, r3
 8002454:	4610      	mov	r0, r2
 8002456:	f7fe f805 	bl	8000464 <vListInsert>
 800245a:	e015      	b.n	8002488 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800245c:	2300      	movs	r3, #0
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	2100      	movs	r1, #0
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	f7ff fd82 	bl	8001f70 <xTimerGenericCommand>
 800246c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <prvSwitchTimerLists+0x98>
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	e7fe      	b.n	8002486 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1b2      	bne.n	80023f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <prvSwitchTimerLists+0xc4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <prvSwitchTimerLists+0xc0>)
 800249e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <prvSwitchTimerLists+0xc4>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200001b4 	.word	0x200001b4
 80024b4:	200001b8 	.word	0x200001b8

080024b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80024bc:	f7fe f91c 	bl	80006f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <prvCheckForValidListAndQueue+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d113      	bne.n	80024f0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <prvCheckForValidListAndQueue+0x44>)
 80024ca:	f7fd ff7d 	bl	80003c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80024ce:	480c      	ldr	r0, [pc, #48]	; (8002500 <prvCheckForValidListAndQueue+0x48>)
 80024d0:	f7fd ff7a 	bl	80003c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <prvCheckForValidListAndQueue+0x4c>)
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <prvCheckForValidListAndQueue+0x44>)
 80024d8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <prvCheckForValidListAndQueue+0x50>)
 80024dc:	4a08      	ldr	r2, [pc, #32]	; (8002500 <prvCheckForValidListAndQueue+0x48>)
 80024de:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80024e0:	2200      	movs	r2, #0
 80024e2:	210c      	movs	r1, #12
 80024e4:	2005      	movs	r0, #5
 80024e6:	f7fe fa81 	bl	80009ec <xQueueGenericCreate>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b02      	ldr	r3, [pc, #8]	; (80024f8 <prvCheckForValidListAndQueue+0x40>)
 80024ee:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80024f0:	f7fe f930 	bl	8000754 <vPortExitCritical>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200001bc 	.word	0x200001bc
 80024fc:	2000018c 	.word	0x2000018c
 8002500:	200001a0 	.word	0x200001a0
 8002504:	200001b4 	.word	0x200001b4
 8002508:	200001b8 	.word	0x200001b8

0800250c <_ZN4packC1Ev>:

void ARadioTask (void* pvParameters);
void ARadioTaskS (void* pvParameters);

// Rf settings for CC1101
 struct pack
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220a      	movs	r2, #10
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <_Z8aIAQCorePv>:

#include "i2c_sensor.h"


void aIAQCore(void *parameter)
{
 8002526:	b590      	push	{r4, r7, lr}
 8002528:	b08b      	sub	sp, #44	; 0x2c
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]

	iaq_core* iaq = new iaq_core();
 800252e:	2018      	movs	r0, #24
 8002530:	f001 f89c 	bl	800366c <_Znwj>
 8002534:	4603      	mov	r3, r0
 8002536:	461c      	mov	r4, r3
 8002538:	4620      	mov	r0, r4
 800253a:	f000 f84a 	bl	80025d2 <_ZN8iaq_coreC1Ev>
 800253e:	627c      	str	r4, [r7, #36]	; 0x24
	ens210_class* ens210 = new ens210_class();
 8002540:	2014      	movs	r0, #20
 8002542:	f001 f893 	bl	800366c <_Znwj>
 8002546:	4603      	mov	r3, r0
 8002548:	461c      	mov	r4, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f000 f96e 	bl	800282c <_ZN12ens210_classC1Ev>
 8002550:	623c      	str	r4, [r7, #32]
	air_condition air;
	QueueHandle_t comQueue= (QueueHandle_t) parameter;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]
	vTaskDelay(100/ portTICK_PERIOD_MS);
 8002556:	2064      	movs	r0, #100	; 0x64
 8002558:	f7fe ffa2 	bl	80014a0 <vTaskDelay>
	iaq->i2c_init();
 800255c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800255e:	f000 f849 	bl	80025f4 <_ZN8iaq_core8i2c_initEv>
	ens210->i2c_init();
 8002562:	6a38      	ldr	r0, [r7, #32]
 8002564:	f000 f972 	bl	800284c <_ZN12ens210_class8i2c_initEv>
	ens210->sens_init();
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f000 fb5b 	bl	8002c24 <_ZN12ens210_class9sens_initEv>
	while (1)
	{
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 800256e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002572:	f7fe ff95 	bl	80014a0 <vTaskDelay>
			iaq->hookRecievePack();
 8002576:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002578:	f000 f924 	bl	80027c4 <_ZN8iaq_core15hookRecievePackEv>
			ens210->appHook();
 800257c:	6a38      	ldr	r0, [r7, #32]
 800257e:	f000 fb7a 	bl	8002c76 <_ZN12ens210_class7appHookEv>
			air.CO2=iaq->getCO2();
 8002582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002584:	f000 f93c 	bl	8002800 <_ZN8iaq_core6getCO2Ev>
 8002588:	4603      	mov	r3, r0
 800258a:	613b      	str	r3, [r7, #16]
			air.TVOC=iaq->getTVOC();
 800258c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800258e:	f000 f942 	bl	8002816 <_ZN8iaq_core7getTVOCEv>
 8002592:	4603      	mov	r3, r0
 8002594:	617b      	str	r3, [r7, #20]
			air.temp=ens210->getTemp();
 8002596:	6a38      	ldr	r0, [r7, #32]
 8002598:	f000 fbb5 	bl	8002d06 <_ZN12ens210_class7getTempEv>
 800259c:	4603      	mov	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
			air.humidity=ens210->getHumidity();
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f000 fbbe 	bl	8002d22 <_ZN12ens210_class11getHumidityEv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	61fb      	str	r3, [r7, #28]
			if (uxQueueSpacesAvailable(comQueue))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fe fcdf 	bl	8000f70 <uxQueueSpacesAvailable>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf14      	ite	ne
 80025b8:	2301      	movne	r3, #1
 80025ba:	2300      	moveq	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0d5      	beq.n	800256e <_Z8aIAQCorePv+0x48>
			{
				xQueueSend(comQueue, &air , 1);
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f107 0110 	add.w	r1, r7, #16
 80025c8:	2300      	movs	r3, #0
 80025ca:	2201      	movs	r2, #1
 80025cc:	f7fe fa62 	bl	8000a94 <xQueueGenericSend>
			vTaskDelay(3000/ portTICK_PERIOD_MS);
 80025d0:	e7cd      	b.n	800256e <_Z8aIAQCorePv+0x48>

080025d2 <_ZN8iaq_coreC1Ev>:



}

iaq_core::iaq_core()
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	22b5      	movs	r2, #181	; 0xb5
 80025de:	725a      	strb	r2, [r3, #9]
{
	i2c_init();
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f807 	bl	80025f4 <_ZN8iaq_core8i2c_initEv>
	return;
 80025e6:	bf00      	nop
}
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <_ZN8iaq_core8i2c_initEv>:


void iaq_core::i2c_init(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 80025fc:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <_ZN8iaq_core8i2c_initEv+0x74>)
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <_ZN8iaq_core8i2c_initEv+0x74>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <_ZN8iaq_core8i2c_initEv+0x74>)
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <_ZN8iaq_core8i2c_initEv+0x74>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002612:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 8002616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800261a:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 800261e:	2200      	movs	r2, #0
 8002620:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 8002624:	221c      	movs	r2, #28
 8002626:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 800262a:	228c      	movs	r2, #140	; 0x8c
 800262c:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 8002630:	221d      	movs	r2, #29
 8002632:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <_ZN8iaq_core8i2c_initEv+0x78>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 8002644:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800264e:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 8002650:	4a07      	ldr	r2, [pc, #28]	; (8002670 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <_ZN8iaq_core8i2c_initEv+0x7c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 800265a:	6013      	str	r3, [r2, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40005400 	.word	0x40005400
 8002670:	40010c00 	.word	0x40010c00

08002674 <_ZN8iaq_core7readI2CEv>:


uint32_t iaq_core::readI2C(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint8_t c=0;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
	if ((I2C1->SR1 & 0xf0) != 0)
 8002680:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8002682:	8a9b      	ldrh	r3, [r3, #20]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <_ZN8iaq_core7readI2CEv+0x32>
		{
		I2C1->CR1 = I2C_CR1_SWRST;
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800269a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800269e:	801a      	strh	r2, [r3, #0]
		i2c_init();
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ffa7 	bl	80025f4 <_ZN8iaq_core8i2c_initEv>
		};
	if (I2C1->SR2&I2C_SR2_BUSY)
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026a8:	8b1b      	ldrh	r3, [r3, #24]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <_ZN8iaq_core7readI2CEv+0x74>
		{
		I2C1->CR1|=I2C_CR1_STOP;
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026d0:	8b1b      	ldrh	r3, [r3, #24]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d000      	beq.n	80026e8 <_ZN8iaq_core7readI2CEv+0x74>
 80026e6:	e7f2      	b.n	80026ce <_ZN8iaq_core7readI2CEv+0x5a>

		}


	I2C1->CR1|=I2C_CR1_START;
 80026e8:	4a35      	ldr	r2, [pc, #212]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026ea:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 80026f8:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002704:	b29b      	uxth	r3, r3
 8002706:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800270a:	8a9b      	ldrh	r3, [r3, #20]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf0c      	ite	eq
 8002716:	2301      	moveq	r3, #1
 8002718:	2300      	movne	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d000      	beq.n	8002722 <_ZN8iaq_core7readI2CEv+0xae>
 8002720:	e7f2      	b.n	8002708 <_ZN8iaq_core7readI2CEv+0x94>
	I2C1->DR=this->addr;
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7a5b      	ldrb	r3, [r3, #9]
 8002728:	b29b      	uxth	r3, r3
 800272a:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800272e:	8a9b      	ldrh	r3, [r3, #20]
 8002730:	b29b      	uxth	r3, r3
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	bf0c      	ite	eq
 800273a:	2301      	moveq	r3, #1
 800273c:	2300      	movne	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d000      	beq.n	8002746 <_ZN8iaq_core7readI2CEv+0xd2>
 8002744:	e7f2      	b.n	800272c <_ZN8iaq_core7readI2CEv+0xb8>
	if (!(I2C1->SR2 & I2C_SR2_TRA) );
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8002748:	8b1b      	ldrh	r3, [r3, #24]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
	while (c < 9)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b08      	cmp	r3, #8
 8002756:	dc2a      	bgt.n	80027ae <_ZN8iaq_core7readI2CEv+0x13a>
	{
		while (!(I2C1->SR1&I2C_SR1_RXNE));
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800275a:	8a9b      	ldrh	r3, [r3, #20]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf0c      	ite	eq
 8002766:	2301      	moveq	r3, #1
 8002768:	2300      	movne	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d000      	beq.n	8002772 <_ZN8iaq_core7readI2CEv+0xfe>
 8002770:	e7f2      	b.n	8002758 <_ZN8iaq_core7readI2CEv+0xe4>
		this->iaq_pack[c]=I2C1->DR;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8002776:	8a12      	ldrh	r2, [r2, #16]
 8002778:	b292      	uxth	r2, r2
 800277a:	b2d1      	uxtb	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	54d1      	strb	r1, [r2, r3]
		c++;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	3301      	adds	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
		if (c==8)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d1e2      	bne.n	8002752 <_ZN8iaq_core7readI2CEv+0xde>
		{
			I2C1->CR1&=~I2C_CR1_ACK;
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002798:	b29b      	uxth	r3, r3
 800279a:	8013      	strh	r3, [r2, #0]
			I2C1->CR1|=I2C_CR1_STOP;
 800279c:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <_ZN8iaq_core7readI2CEv+0x14c>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	8013      	strh	r3, [r2, #0]
	while (c < 9)
 80027ac:	e7d1      	b.n	8002752 <_ZN8iaq_core7readI2CEv+0xde>
		}
	};


	this->status=this->iaq_pack[2];
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	789a      	ldrb	r2, [r3, #2]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	751a      	strb	r2, [r3, #20]
	return 1;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40005400 	.word	0x40005400

080027c4 <_ZN8iaq_core15hookRecievePackEv>:

uint32_t iaq_core::hookRecievePack()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	this->readI2C();
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff51 	bl	8002674 <_ZN8iaq_core7readI2CEv>
	sVal.co2=this->iaq_pack[0]*256+ this->iaq_pack[1];
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	7852      	ldrb	r2, [r2, #1]
 80027dc:	4413      	add	r3, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	60da      	str	r2, [r3, #12]
	sVal.tvoc=this->iaq_pack[7]*256+ this->iaq_pack[8];
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	79db      	ldrb	r3, [r3, #7]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7a12      	ldrb	r2, [r2, #8]
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
	return 1;
 80027f6:	2301      	movs	r3, #1

}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN8iaq_core6getCO2Ev>:

uint32_t iaq_core::getCO2(void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	return sVal.co2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <_ZN8iaq_core7getTVOCEv>:

uint32_t iaq_core::getTVOC(void)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return sVal.tvoc;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <_ZN12ens210_classC1Ev>:

ens210_class::ens210_class(void)
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2286      	movs	r2, #134	; 0x86
 8002838:	721a      	strb	r2, [r3, #8]
{
	i2c_init();
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f806 	bl	800284c <_ZN12ens210_class8i2c_initEv>
	return;
 8002840:	bf00      	nop
}
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZN12ens210_class8i2c_initEv>:

void ens210_class::i2c_init(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8002854:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002856:	4b1a      	ldr	r3, [pc, #104]	; (80028c0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|=RCC_APB1ENR_I2C1EN;
 8002860:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002862:	4b17      	ldr	r3, [pc, #92]	; (80028c0 <_ZN12ens210_class8i2c_initEv+0x74>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800286a:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 = I2C_CR1_SWRST;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 800286e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002872:	801a      	strh	r2, [r3, #0]
	I2C1->CR1=0;
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8002876:	2200      	movs	r2, #0
 8002878:	801a      	strh	r2, [r3, #0]
	I2C1->CR2=28;
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 800287c:	221c      	movs	r2, #28
 800287e:	809a      	strh	r2, [r3, #4]
	I2C1->CCR=140;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8002882:	228c      	movs	r2, #140	; 0x8c
 8002884:	839a      	strh	r2, [r3, #28]
	I2C1->TRISE=29;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8002888:	221d      	movs	r2, #29
 800288a:	841a      	strh	r2, [r3, #32]
	I2C1->CR1|=I2C_CR1_PE;
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <_ZN12ens210_class8i2c_initEv+0x78>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]
	GPIOB->CRL&=0x00FFFFFF;
 800289c:	4a0a      	ldr	r2, [pc, #40]	; (80028c8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028a6:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0xDD000000;
 80028a8:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <_ZN12ens210_class8i2c_initEv+0x7c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f043 435d 	orr.w	r3, r3, #3707764736	; 0xdd000000
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40005400 	.word	0x40005400
 80028c8:	40010c00 	.word	0x40010c00

080028cc <_ZN12ens210_class7readI2CEhh>:

uint32_t ens210_class::readI2C(uint8_t saddr, uint8_t len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
 80028d8:	4613      	mov	r3, r2
 80028da:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
	if (len<0 || len > 10)  return 0;
 80028e0:	78bb      	ldrb	r3, [r7, #2]
 80028e2:	2b0a      	cmp	r3, #10
 80028e4:	dd01      	ble.n	80028ea <_ZN12ens210_class7readI2CEhh+0x1e>
 80028e6:	2300      	movs	r3, #0
 80028e8:	e0dd      	b.n	8002aa6 <_ZN12ens210_class7readI2CEhh+0x1da>
	if ((I2C1->SR1 & 0xf0) != 0)
 80028ea:	4b71      	ldr	r3, [pc, #452]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80028ec:	8a9b      	ldrh	r3, [r3, #20]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf14      	ite	ne
 80028f8:	2301      	movne	r3, #1
 80028fa:	2300      	moveq	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <_ZN12ens210_class7readI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8002902:	4b6b      	ldr	r3, [pc, #428]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002904:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002908:	801a      	strh	r2, [r3, #0]
		i2c_init();
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ff9e 	bl	800284c <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002912:	8b1b      	ldrh	r3, [r3, #24]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d014      	beq.n	8002952 <_ZN12ens210_class7readI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8002928:	4a61      	ldr	r2, [pc, #388]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 800292a:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8002938:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 800293a:	8b1b      	ldrh	r3, [r3, #24]
 800293c:	b29b      	uxth	r3, r3
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf0c      	ite	eq
 8002946:	2301      	moveq	r3, #1
 8002948:	2300      	movne	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d000      	beq.n	8002952 <_ZN12ens210_class7readI2CEhh+0x86>
 8002950:	e7f2      	b.n	8002938 <_ZN12ens210_class7readI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8002952:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002954:	4b56      	ldr	r3, [pc, #344]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	b29b      	uxth	r3, r3
 8002960:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8002962:	4a53      	ldr	r2, [pc, #332]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296e:	b29b      	uxth	r3, r3
 8002970:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002972:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002974:	8a9b      	ldrh	r3, [r3, #20]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <_ZN12ens210_class7readI2CEhh+0xc0>
 800298a:	e7f2      	b.n	8002972 <_ZN12ens210_class7readI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address to read
 800298c:	4a48      	ldr	r2, [pc, #288]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7a1b      	ldrb	r3, [r3, #8]
 8002992:	b29b      	uxth	r3, r3
 8002994:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002998:	8a9b      	ldrh	r3, [r3, #20]
 800299a:	b29b      	uxth	r3, r3
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d000      	beq.n	80029b0 <_ZN12ens210_class7readI2CEhh+0xe4>
 80029ae:	e7f2      	b.n	8002996 <_ZN12ens210_class7readI2CEhh+0xca>
	if (I2C1->SR2);
 80029b0:	4b3f      	ldr	r3, [pc, #252]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029b2:	8b1b      	ldrh	r3, [r3, #24]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 80029b8:	4b3d      	ldr	r3, [pc, #244]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	b292      	uxth	r2, r2
 80029be:	821a      	strh	r2, [r3, #16]
	//I2C1->CR1|=I2C_CR1_STOP;
	while (!(I2C1->SR1 & I2C_SR1_BTF)); //?
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029c2:	8a9b      	ldrh	r3, [r3, #20]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d000      	beq.n	80029da <_ZN12ens210_class7readI2CEhh+0x10e>
 80029d8:	e7f2      	b.n	80029c0 <_ZN12ens210_class7readI2CEhh+0xf4>
	I2C1->CR1|=I2C_CR1_START;
 80029da:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029dc:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 80029ec:	8a9b      	ldrh	r3, [r3, #20]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d000      	beq.n	8002a04 <_ZN12ens210_class7readI2CEhh+0x138>
 8002a02:	e7f2      	b.n	80029ea <_ZN12ens210_class7readI2CEhh+0x11e>
	I2C1->DR=this->addr|0x01; // address  read mode
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7a1b      	ldrb	r3, [r3, #8]
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002a14:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a16:	8a9b      	ldrh	r3, [r3, #20]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf0c      	ite	eq
 8002a22:	2301      	moveq	r3, #1
 8002a24:	2300      	movne	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d000      	beq.n	8002a2e <_ZN12ens210_class7readI2CEhh+0x162>
 8002a2c:	e7f2      	b.n	8002a14 <_ZN12ens210_class7readI2CEhh+0x148>
	if (I2C1->SR2);
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a30:	8b1b      	ldrh	r3, [r3, #24]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
	while (c < len)
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	78bb      	ldrb	r3, [r7, #2]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	da32      	bge.n	8002aa4 <_ZN12ens210_class7readI2CEhh+0x1d8>
	{
		if (c==(len-1))I2C1->CR1&=~I2C_CR1_ACK;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	78bb      	ldrb	r3, [r7, #2]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d107      	bne.n	8002a58 <_ZN12ens210_class7readI2CEhh+0x18c>
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR1&I2C_SR1_RXNE));
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a5a:	8a9b      	ldrh	r3, [r3, #20]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d000      	beq.n	8002a72 <_ZN12ens210_class7readI2CEhh+0x1a6>
 8002a70:	e7f2      	b.n	8002a58 <_ZN12ens210_class7readI2CEhh+0x18c>

		this->buffer[c]=I2C1->DR;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a76:	8a12      	ldrh	r2, [r2, #16]
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	b2d1      	uxtb	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	460a      	mov	r2, r1
 8002a82:	725a      	strb	r2, [r3, #9]
		c++;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	3301      	adds	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	78bb      	ldrb	r3, [r7, #2]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d1d1      	bne.n	8002a36 <_ZN12ens210_class7readI2CEhh+0x16a>
		{
			I2C1->CR1|=I2C_CR1_STOP;
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <_ZN12ens210_class7readI2CEhh+0x1e4>)
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8002aa2:	e7c8      	b.n	8002a36 <_ZN12ens210_class7readI2CEhh+0x16a>
		}


	};
	return 1;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40005400 	.word	0x40005400

08002ab4 <_ZN12ens210_class8writeI2CEhh>:

uint32_t ens210_class::writeI2C(uint8_t saddr, uint8_t len)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	70bb      	strb	r3, [r7, #2]
	uint8_t c=0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	73fb      	strb	r3, [r7, #15]
	if ( (len<0 || len > 10) )  return 0;
 8002ac8:	78bb      	ldrb	r3, [r7, #2]
 8002aca:	2b0a      	cmp	r3, #10
 8002acc:	dd01      	ble.n	8002ad2 <_ZN12ens210_class8writeI2CEhh+0x1e>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e0a1      	b.n	8002c16 <_ZN12ens210_class8writeI2CEhh+0x162>
	if ((I2C1->SR1 & 0xf0) != 0)
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002ad4:	8a9b      	ldrh	r3, [r3, #20]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <_ZN12ens210_class8writeI2CEhh+0x44>
	{
		I2C1->CR1 = I2C_CR1_SWRST;
 8002aea:	4b4d      	ldr	r3, [pc, #308]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002aec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af0:	801a      	strh	r2, [r3, #0]
		i2c_init();
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff feaa 	bl	800284c <_ZN12ens210_class8i2c_initEv>
	};
	if (I2C1->SR2&I2C_SR2_BUSY)
 8002af8:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002afa:	8b1b      	ldrh	r3, [r3, #24]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d014      	beq.n	8002b3a <_ZN12ens210_class8writeI2CEhh+0x86>
	{
		I2C1->CR1|=I2C_CR1_STOP;
 8002b10:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b12:	4b43      	ldr	r3, [pc, #268]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	8013      	strh	r3, [r2, #0]
		while (!(I2C1->SR2&I2C_SR2_BUSY));
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b22:	8b1b      	ldrh	r3, [r3, #24]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d000      	beq.n	8002b3a <_ZN12ens210_class8writeI2CEhh+0x86>
 8002b38:	e7f2      	b.n	8002b20 <_ZN12ens210_class8writeI2CEhh+0x6c>
	}
	I2C1->CR1|=I2C_CR1_START;
 8002b3a:	4a39      	ldr	r2, [pc, #228]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b3c:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]
	I2C1->CR1|=I2C_CR1_ACK;
 8002b4a:	4a35      	ldr	r2, [pc, #212]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b4c:	4b34      	ldr	r3, [pc, #208]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB));
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b5c:	8a9b      	ldrh	r3, [r3, #20]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf0c      	ite	eq
 8002b68:	2301      	moveq	r3, #1
 8002b6a:	2300      	movne	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <_ZN12ens210_class8writeI2CEhh+0xc0>
 8002b72:	e7f2      	b.n	8002b5a <_ZN12ens210_class8writeI2CEhh+0xa6>
	I2C1->DR=this->addr; // write address
 8002b74:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7a1b      	ldrb	r3, [r3, #8]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8213      	strh	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b80:	8a9b      	ldrh	r3, [r3, #20]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <_ZN12ens210_class8writeI2CEhh+0xe4>
 8002b96:	e7f2      	b.n	8002b7e <_ZN12ens210_class8writeI2CEhh+0xca>
	if (I2C1->SR2);
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002b9a:	8b1b      	ldrh	r3, [r3, #24]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
	I2C1->DR=saddr;
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	821a      	strh	r2, [r3, #16]
	while (!(I2C1->SR1 & I2C_SR1_BTF));
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002baa:	8a9b      	ldrh	r3, [r3, #20]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d000      	beq.n	8002bc2 <_ZN12ens210_class8writeI2CEhh+0x10e>
 8002bc0:	e7f2      	b.n	8002ba8 <_ZN12ens210_class8writeI2CEhh+0xf4>
	while (c < len)
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	78bb      	ldrb	r3, [r7, #2]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	da24      	bge.n	8002c14 <_ZN12ens210_class8writeI2CEhh+0x160>
	{
		while (!(I2C1->SR1&I2C_SR1_BTF));
 8002bca:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002bcc:	8a9b      	ldrh	r3, [r3, #20]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d000      	beq.n	8002be4 <_ZN12ens210_class8writeI2CEhh+0x130>
 8002be2:	e7f2      	b.n	8002bca <_ZN12ens210_class8writeI2CEhh+0x116>
		I2C1->DR=this->buffer[c];
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	7a5b      	ldrb	r3, [r3, #9]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	820b      	strh	r3, [r1, #16]
		c++;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
		if (c==len)
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	78bb      	ldrb	r3, [r7, #2]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1df      	bne.n	8002bc2 <_ZN12ens210_class8writeI2CEhh+0x10e>
		{
			//I2C1->CR1&=~I2C_CR1_ACK;
			I2C1->CR1|=I2C_CR1_STOP;
 8002c02:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <_ZN12ens210_class8writeI2CEhh+0x16c>)
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	8013      	strh	r3, [r2, #0]
	while (c < len)
 8002c12:	e7d6      	b.n	8002bc2 <_ZN12ens210_class8writeI2CEhh+0x10e>
		}
	};
	return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40005400 	.word	0x40005400

08002c24 <_ZN12ens210_class9sens_initEv>:

uint32_t ens210_class::sens_init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
	buffer[0]= 0x80;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2280      	movs	r2, #128	; 0x80
 8002c30:	725a      	strb	r2, [r3, #9]
	writeI2C(SYS_CTRL);
 8002c32:	2201      	movs	r2, #1
 8002c34:	2110      	movs	r1, #16
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff3c 	bl	8002ab4 <_ZN12ens210_class8writeI2CEhh>
	vTaskDelay(10/ portTICK_PERIOD_MS);
 8002c3c:	200a      	movs	r0, #10
 8002c3e:	f7fe fc2f 	bl	80014a0 <vTaskDelay>
	buffer[0]= 0x00;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	725a      	strb	r2, [r3, #9]
	writeI2C(SYS_CTRL);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff31 	bl	8002ab4 <_ZN12ens210_class8writeI2CEhh>
	buffer[0]= 0x03;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2203      	movs	r2, #3
 8002c56:	725a      	strb	r2, [r3, #9]
	writeI2C(SENS_RUN);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2121      	movs	r1, #33	; 0x21
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff29 	bl	8002ab4 <_ZN12ens210_class8writeI2CEhh>
	writeI2C(SENS_START);
 8002c62:	2201      	movs	r2, #1
 8002c64:	2122      	movs	r1, #34	; 0x22
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff24 	bl	8002ab4 <_ZN12ens210_class8writeI2CEhh>
	return 1;
 8002c6c:	2301      	movs	r3, #1
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_ZN12ens210_class7appHookEv>:

uint32_t ens210_class::appHook(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
	//
	//
	readI2C(T_VAL, T_VAL_SIZE);
 8002c7e:	2203      	movs	r2, #3
 8002c80:	2130      	movs	r1, #48	; 0x30
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fe22 	bl	80028cc <_ZN12ens210_class7readI2CEhh>
	temp= ( ( buffer[1]<<8) | buffer[0]  )/64-273;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7a9b      	ldrb	r3, [r3, #10]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	7a52      	ldrb	r2, [r2, #9]
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	4313      	orrs	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da00      	bge.n	8002c9e <_ZN12ens210_class7appHookEv+0x28>
 8002c9c:	333f      	adds	r3, #63	; 0x3f
 8002c9e:	119b      	asrs	r3, r3, #6
 8002ca0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd fb15 	bl	80002d4 <__aeabi_i2f>
 8002caa:	4602      	mov	r2, r0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]
	vTaskDelay(10/ portTICK_PERIOD_MS);
 8002cb0:	200a      	movs	r0, #10
 8002cb2:	f7fe fbf5 	bl	80014a0 <vTaskDelay>
	readI2C(H_VAL, H_VAL_SIZE);
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	2133      	movs	r1, #51	; 0x33
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fe06 	bl	80028cc <_ZN12ens210_class7readI2CEhh>
	hum=((buffer[1]<<8) | buffer[0])/512;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7a9b      	ldrb	r3, [r3, #10]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	7a52      	ldrb	r2, [r2, #9]
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da01      	bge.n	8002cd8 <_ZN12ens210_class7appHookEv+0x62>
 8002cd4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cd8:	125b      	asrs	r3, r3, #9
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fafa 	bl	80002d4 <__aeabi_i2f>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	605a      	str	r2, [r3, #4]
	//readI2C(SENS_STAT);
	buffer[0]= 0x03;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	725a      	strb	r2, [r3, #9]
	vTaskDelay(10/ portTICK_PERIOD_MS);
 8002cec:	200a      	movs	r0, #10
 8002cee:	f7fe fbd7 	bl	80014a0 <vTaskDelay>
	writeI2C(SENS_START);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2122      	movs	r1, #34	; 0x22
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fedc 	bl	8002ab4 <_ZN12ens210_class8writeI2CEhh>
	return 1;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_ZN12ens210_class7getTempEv>:

int ens210_class::getTemp()
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
	return this->temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fb32 	bl	800037c <__aeabi_f2iz>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZN12ens210_class11getHumidityEv>:

int ens210_class::getHumidity()
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
	return this->hum;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fb24 	bl	800037c <__aeabi_f2iz>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <main>:
QueueHandle_t sQueue;



int main(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af02      	add	r7, sp, #8
	prvClockCoreInit();
 8002d46:	f000 f875 	bl	8002e34 <_Z16prvClockCoreInitv>
	//prvCommunicationInit();
	GPIOC->CRL|= 0x4<<16;
 8002d4a:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <main+0xd0>)
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <main+0xd0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d54:	6013      	str	r3, [r2, #0]
	RTask1.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002d56:	2200      	movs	r2, #0
 8002d58:	210d      	movs	r1, #13
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f7fd fe46 	bl	80009ec <xQueueGenericCreate>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <main+0xd4>)
 8002d64:	611a      	str	r2, [r3, #16]
	RTask1.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002d66:	2200      	movs	r2, #0
 8002d68:	210d      	movs	r1, #13
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fd fe3e 	bl	80009ec <xQueueGenericCreate>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <main+0xd4>)
 8002d74:	615a      	str	r2, [r3, #20]
	RTask2.xCommRX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002d76:	2200      	movs	r2, #0
 8002d78:	210d      	movs	r1, #13
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7fd fe36 	bl	80009ec <xQueueGenericCreate>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <main+0xd8>)
 8002d84:	611a      	str	r2, [r3, #16]
	RTask2.xCommTX=xQueueCreate(QUEUE_SIZE, sizeof(pack));
 8002d86:	2200      	movs	r2, #0
 8002d88:	210d      	movs	r1, #13
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fd fe2e 	bl	80009ec <xQueueGenericCreate>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <main+0xd8>)
 8002d94:	615a      	str	r2, [r3, #20]
	pQComm.a1RX=RTask1.xCommRX;
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <main+0xd4>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <main+0xdc>)
 8002d9c:	6053      	str	r3, [r2, #4]
	pQComm.a1TX = RTask1.xCommTX;
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <main+0xd4>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	; (8002e1c <main+0xdc>)
 8002da4:	6013      	str	r3, [r2, #0]
	pQComm.a2RX = RTask2.xCommRX;
 8002da6:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <main+0xd8>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <main+0xdc>)
 8002dac:	60d3      	str	r3, [r2, #12]
	pQComm.a2TX = RTask2.xCommTX;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <main+0xd8>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <main+0xdc>)
 8002db4:	6093      	str	r3, [r2, #8]
	pQComm.qSensor= xQueueCreate(3, sizeof(air_condition));
 8002db6:	2200      	movs	r2, #0
 8002db8:	2110      	movs	r1, #16
 8002dba:	2003      	movs	r0, #3
 8002dbc:	f7fd fe16 	bl	80009ec <xQueueGenericCreate>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <main+0xdc>)
 8002dc4:	611a      	str	r2, [r3, #16]

//xTaskCreate(ATaskCanBus, "CAN Task",  100, NULL, tskIDLE_PRIORITY,  NULL);
	//xTaskCreate(ARadioTask, "RF Task1",  500,(void*) &RTask1 ,2,  NULL);
	//xTaskCreate(ARadioTaskS, "RF Task2",  500,(void*) &RTask2 ,2,  NULL);
	//delete RTask1;
	xTaskCreate(aIAQCore, "TaskSensor",  100, (void*)pQComm.qSensor, 2,  NULL);
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <main+0xdc>)
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	2302      	movs	r3, #2
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	2264      	movs	r2, #100	; 0x64
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <main+0xe0>)
 8002dd8:	4812      	ldr	r0, [pc, #72]	; (8002e24 <main+0xe4>)
 8002dda:	f7fe fa2f 	bl	800123c <xTaskCreate>
	xTaskCreate(run1Task, "Run2 Task",  100, NULL,2,  NULL);
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2302      	movs	r3, #2
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	2264      	movs	r2, #100	; 0x64
 8002dea:	490f      	ldr	r1, [pc, #60]	; (8002e28 <main+0xe8>)
 8002dec:	480f      	ldr	r0, [pc, #60]	; (8002e2c <main+0xec>)
 8002dee:	f7fe fa25 	bl	800123c <xTaskCreate>
	xTaskCreate(aTaskUart, "Run2 Task",  300, &pQComm, 2,  NULL);
 8002df2:	2300      	movs	r3, #0
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	2302      	movs	r3, #2
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <main+0xdc>)
 8002dfc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e00:	4909      	ldr	r1, [pc, #36]	; (8002e28 <main+0xe8>)
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <main+0xf0>)
 8002e04:	f7fe fa1a 	bl	800123c <xTaskCreate>
	vTaskStartScheduler();
 8002e08:	f7fe fb7e 	bl	8001508 <vTaskStartScheduler>

  while (1)
 8002e0c:	e7fe      	b.n	8002e0c <main+0xcc>
 8002e0e:	bf00      	nop
 8002e10:	40011000 	.word	0x40011000
 8002e14:	20000004 	.word	0x20000004
 8002e18:	20000020 	.word	0x20000020
 8002e1c:	200001c8 	.word	0x200001c8
 8002e20:	08003a6c 	.word	0x08003a6c
 8002e24:	08002527 	.word	0x08002527
 8002e28:	08003a78 	.word	0x08003a78
 8002e2c:	08002ee9 	.word	0x08002ee9
 8002e30:	08003119 	.word	0x08003119

08002e34 <_Z16prvClockCoreInitv>:



//core  clock init function, this a critical function
void prvClockCoreInit (void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	FLASH->ACR |= FLASH_ACR_LATENCY_2;// flash latency delay 2t
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <_Z16prvClockCoreInitv+0xac>)
 8002e3a:	4b29      	ldr	r3, [pc, #164]	; (8002ee0 <_Z16prvClockCoreInitv+0xac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE;// Perfech enable
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <_Z16prvClockCoreInitv+0xac>)
 8002e46:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <_Z16prvClockCoreInitv+0xac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f043 0310 	orr.w	r3, r3, #16
 8002e4e:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0xC<<18);// set mul x14
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002e5a:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=~0x00010000; // set pll clk hsi div 2
 8002e5c:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6053      	str	r3, [r2, #4]
	RCC->CFGR&=0xfffffffc;
 8002e68:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=0x2;// use pll1 from clock
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	6053      	str	r3, [r2, #4]
	RCC->CR|=0x1000000;// enable pll
 8002e80:	4a18      	ldr	r2, [pc, #96]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]
	RCC->CFGR|=(0<<13); //APB2 no div
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(4<<10);  // APB1 /2 28  MHz
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e9e:	6053      	str	r3, [r2, #4]
	RCC->CFGR|=(0<<7); // AHB no div
 8002ea0:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	6053      	str	r3, [r2, #4]
	while(!(RCC->CR & RCC_CR_PLLRDY));// wait stabilize pll
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d000      	beq.n	8002ec0 <_Z16prvClockCoreInitv+0x8c>
 8002ebe:	e7f3      	b.n	8002ea8 <_Z16prvClockCoreInitv+0x74>
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));//56 Mhz
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <_Z16prvClockCoreInitv+0xb0>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d000      	beq.n	8002ed8 <_Z16prvClockCoreInitv+0xa4>
 8002ed6:	e7f3      	b.n	8002ec0 <_Z16prvClockCoreInitv+0x8c>
	/*RCC->APB1ENR=RCC_APB1ENR_CAN1EN;
		RCC->APB2ENR=RCC_APB2ENR_TIM1EN|RCC_APB2ENR_USART1EN;
		RCC->APB2ENR=RCC_APB2ENR_AFIOEN|RCC_APB2ENR_IOPAEN|RCC_APB2ENR_IOPBEN|RCC_APB2ENR_IOPCEN|
		RCC_APB2ENR_TIM1EN|RCC_APB2ENR_ADC1EN;// enable clk pereph here
		*/
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	40022000 	.word	0x40022000
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <_Z8run1TaskPv>:
	SPI1->CR1|=SPI_CR1_SPE;*/

}

void run1Task(void *pvParameters)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	int x,y;
	for(;;)
	{
		x++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
		y=x+y;
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]
		if (x>1000000) x=0;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_Z8run1TaskPv+0x30>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	dd01      	ble.n	8002f0a <_Z8run1TaskPv+0x22>
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
		if (y>999999)y=0;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <_Z8run1TaskPv+0x34>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	ddee      	ble.n	8002ef0 <_Z8run1TaskPv+0x8>
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
		x++;
 8002f16:	e7eb      	b.n	8002ef0 <_Z8run1TaskPv+0x8>
 8002f18:	000f4240 	.word	0x000f4240
 8002f1c:	000f423f 	.word	0x000f423f

08002f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f24:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f26:	e003      	b.n	8002f30 <LoopCopyDataInit>

08002f28 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8002f2a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f2c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f2e:	3104      	adds	r1, #4

08002f30 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8002f34:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f36:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f38:	d3f6      	bcc.n	8002f28 <CopyDataInit>
	ldr	r2, =_sbss
 8002f3a:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8002f3c:	e002      	b.n	8002f44 <LoopFillZerobss>

08002f3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f3e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f40:	f842 3b04 	str.w	r3, [r2], #4

08002f44 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8002f46:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f48:	d3f9      	bcc.n	8002f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f4a:	f000 f82b 	bl	8002fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f000 fbaf 	bl	80036b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f52:	f7ff fef5 	bl	8002d40 <main>
	bx	lr
 8002f56:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f58:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8002f5c:	08003af4 	.word	0x08003af4
	ldr	r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f64:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 8002f68:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 8002f6c:	20000258 	.word	0x20000258

08002f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_2_IRQHandler>

08002f72 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <HardFault_Handler+0x4>

08002f84 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <MemManage_Handler+0x4>

08002f8a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002f8e:	e7fe      	b.n	8002f8e <BusFault_Handler+0x4>

08002f90 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002f94:	e7fe      	b.n	8002f94 <UsageFault_Handler+0x4>

08002f96 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <SystemInit+0x5c>)
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <SystemInit+0x5c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002fb4:	4912      	ldr	r1, [pc, #72]	; (8003000 <SystemInit+0x5c>)
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <SystemInit+0x5c>)
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <SystemInit+0x60>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fc0:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <SystemInit+0x5c>)
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <SystemInit+0x5c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <SystemInit+0x5c>)
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <SystemInit+0x5c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002fdc:	4a08      	ldr	r2, [pc, #32]	; (8003000 <SystemInit+0x5c>)
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <SystemInit+0x5c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002fe6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <SystemInit+0x5c>)
 8002fea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002fee:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8002ff0:	f000 f80c 	bl	800300c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ff4:	4b04      	ldr	r3, [pc, #16]	; (8003008 <SystemInit+0x64>)
 8002ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ffa:	609a      	str	r2, [r3, #8]
#endif 
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40021000 	.word	0x40021000
 8003004:	f8ff0000 	.word	0xf8ff0000
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_36MHz
  SetSysClockTo36();
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
 8003010:	f000 f802 	bl	8003018 <SetSysClockTo56>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <SetSysClockTo56>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo56(void)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003026:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <SetSysClockTo56+0xf8>)
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <SetSysClockTo56+0xf8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003032:	4b37      	ldr	r3, [pc, #220]	; (8003110 <SetSysClockTo56+0xf8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3301      	adds	r3, #1
 8003040:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <SetSysClockTo56+0x38>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800304e:	d1f0      	bne.n	8003032 <SetSysClockTo56+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003050:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <SetSysClockTo56+0xf8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <SetSysClockTo56+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800305c:	2301      	movs	r3, #1
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	e001      	b.n	8003066 <SetSysClockTo56+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d14b      	bne.n	8003104 <SetSysClockTo56+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <SetSysClockTo56+0xfc>)
 800306e:	4b29      	ldr	r3, [pc, #164]	; (8003114 <SetSysClockTo56+0xfc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003078:	4a26      	ldr	r2, [pc, #152]	; (8003114 <SetSysClockTo56+0xfc>)
 800307a:	4b26      	ldr	r3, [pc, #152]	; (8003114 <SetSysClockTo56+0xfc>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <SetSysClockTo56+0xfc>)
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <SetSysClockTo56+0xfc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	6013      	str	r3, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <SetSysClockTo56+0xf8>)
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <SetSysClockTo56+0xf8>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003098:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <SetSysClockTo56+0xf8>)
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <SetSysClockTo56+0xf8>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80030a0:	4a1b      	ldr	r2, [pc, #108]	; (8003110 <SetSysClockTo56+0xf8>)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <SetSysClockTo56+0xf8>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030aa:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL7); 
#else     
    /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <SetSysClockTo56+0xf8>)
 80030ae:	4b18      	ldr	r3, [pc, #96]	; (8003110 <SetSysClockTo56+0xf8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80030b6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <SetSysClockTo56+0xf8>)
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <SetSysClockTo56+0xf8>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f443 13a8 	orr.w	r3, r3, #1376256	; 0x150000
 80030c2:	6053      	str	r3, [r2, #4]

#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80030c4:	4a12      	ldr	r2, [pc, #72]	; (8003110 <SetSysClockTo56+0xf8>)
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <SetSysClockTo56+0xf8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ce:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80030d0:	bf00      	nop
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <SetSysClockTo56+0xf8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f9      	beq.n	80030d2 <SetSysClockTo56+0xba>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <SetSysClockTo56+0xf8>)
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <SetSysClockTo56+0xf8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 0303 	bic.w	r3, r3, #3
 80030e8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80030ea:	4a09      	ldr	r2, [pc, #36]	; (8003110 <SetSysClockTo56+0xf8>)
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <SetSysClockTo56+0xf8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80030f6:	bf00      	nop
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <SetSysClockTo56+0xf8>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d1f9      	bne.n	80030f8 <SetSysClockTo56+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	40022000 	.word	0x40022000

08003118 <_Z9aTaskUartPv>:
char bufTx[50];
char bufTmp[50];

char* rawtohex(void* data, uint32_t count,  char * str);
void aTaskUart(void * pvParameters)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b090      	sub	sp, #64	; 0x40
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

	pQueueComm* pQComm = (pQueueComm*)pvParameters;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	63fb      	str	r3, [r7, #60]	; 0x3c
	//preset ports
	pack rx;
 8003124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff f9ef 	bl	800250c <_ZN4packC1Ev>
	pack tx;
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff f9ea 	bl	800250c <_ZN4packC1Ev>
	air_condition airData;

	RCC->APB2ENR|= RCC_APB2ENR_IOPAEN;
 8003138:	4a5b      	ldr	r2, [pc, #364]	; (80032a8 <_Z9aTaskUartPv+0x190>)
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <_Z9aTaskUartPv+0x190>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f043 0304 	orr.w	r3, r3, #4
 8003142:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=RCC_APB2ENR_USART1EN;
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <_Z9aTaskUartPv+0x190>)
 8003146:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <_Z9aTaskUartPv+0x190>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314e:	6193      	str	r3, [r2, #24]
	USART1->CR1=0;
 8003150:	4b56      	ldr	r3, [pc, #344]	; (80032ac <_Z9aTaskUartPv+0x194>)
 8003152:	2200      	movs	r2, #0
 8003154:	819a      	strh	r2, [r3, #12]
	GPIOA->CRH&=~(0x00ff<<4);
 8003156:	4a56      	ldr	r2, [pc, #344]	; (80032b0 <_Z9aTaskUartPv+0x198>)
 8003158:	4b55      	ldr	r3, [pc, #340]	; (80032b0 <_Z9aTaskUartPv+0x198>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003160:	6053      	str	r3, [r2, #4]
	GPIOA->CRH|=0x0089<<4;
 8003162:	4a53      	ldr	r2, [pc, #332]	; (80032b0 <_Z9aTaskUartPv+0x198>)
 8003164:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <_Z9aTaskUartPv+0x198>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f443 6309 	orr.w	r3, r3, #2192	; 0x890
 800316c:	6053      	str	r3, [r2, #4]
	GPIOA->BSRR=1<<10;
 800316e:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <_Z9aTaskUartPv+0x198>)
 8003170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003174:	611a      	str	r2, [r3, #16]
	USART1->BRR=((0x1e<<4)|4);//115200
 8003176:	4b4d      	ldr	r3, [pc, #308]	; (80032ac <_Z9aTaskUartPv+0x194>)
 8003178:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800317c:	811a      	strh	r2, [r3, #8]
	USART1->CR1=USART_CR1_RE | USART_CR1_TE;
 800317e:	4b4b      	ldr	r3, [pc, #300]	; (80032ac <_Z9aTaskUartPv+0x194>)
 8003180:	220c      	movs	r2, #12
 8003182:	819a      	strh	r2, [r3, #12]
	USART1->CR1|= USART_CR1_UE;
 8003184:	4a49      	ldr	r2, [pc, #292]	; (80032ac <_Z9aTaskUartPv+0x194>)
 8003186:	4b49      	ldr	r3, [pc, #292]	; (80032ac <_Z9aTaskUartPv+0x194>)
 8003188:	899b      	ldrh	r3, [r3, #12]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003190:	b29b      	uxth	r3, r3
 8003192:	8193      	strh	r3, [r2, #12]
	tx.addrdst=87;
 8003194:	2357      	movs	r3, #87	; 0x57
 8003196:	777b      	strb	r3, [r7, #29]
	tx.bLeng=10;
 8003198:	230a      	movs	r3, #10
 800319a:	773b      	strb	r3, [r7, #28]
	tx.addrsrc=255;
 800319c:	23ff      	movs	r3, #255	; 0xff
 800319e:	77bb      	strb	r3, [r7, #30]
	tx.crc8d=255;
 80031a0:	23ff      	movs	r3, #255	; 0xff
 80031a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	tx.data[0]=127;
 80031a6:	237f      	movs	r3, #127	; 0x7f
 80031a8:	77fb      	strb	r3, [r7, #31]
	tx.data[1]=255;
 80031aa:	23ff      	movs	r3, #255	; 0xff
 80031ac:	f887 3020 	strb.w	r3, [r7, #32]
	tx.data[2]=127;
 80031b0:	237f      	movs	r3, #127	; 0x7f
 80031b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	tx.data[3]=255;
 80031b6:	23ff      	movs	r3, #255	; 0xff
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	tx.data[4]=255;
 80031bc:	23ff      	movs	r3, #255	; 0xff
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tx.data[5]=255;
 80031c2:	23ff      	movs	r3, #255	; 0xff
 80031c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	tx.rssi=255;
 80031c8:	23ff      	movs	r3, #255	; 0xff
 80031ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bufTx[0]=0;
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
	//USART1->CR1|= USART_CR1_SBK;
	//vTaskDelay(1000 / portTICK_PERIOD_MS);
	if(uxQueueSpacesAvailable(pQComm->a1TX))
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fec9 	bl	8000f70 <uxQueueSpacesAvailable>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <_Z9aTaskUartPv+0xf2>
				{
					tx.addrdst=88;
 80031ee:	2358      	movs	r3, #88	; 0x58
 80031f0:	777b      	strb	r3, [r7, #29]
					tx.rssi=rx.rssi_r;
 80031f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80031f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					xQueueSend(pQComm->a1TX,&tx,0);
 80031fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	f107 011c 	add.w	r1, r7, #28
 8003202:	2300      	movs	r3, #0
 8003204:	2200      	movs	r2, #0
 8003206:	f7fd fc45 	bl	8000a94 <xQueueGenericSend>
		/*strcpy(bufTx, "Hello\n");
		printUart(bufTx);
		vTaskDelay(1000 / portTICK_PERIOD_MS);
*/

		if(xQueueReceive( pQComm->a1RX, &rx,0)==pdPASS)
 800320a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003212:	2200      	movs	r2, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd fdcf 	bl	8000db8 <xQueueReceive>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04c      	beq.n	80032c4 <_Z9aTaskUartPv+0x1ac>
		{
			//xQueueReceive( pQComm->a1RX, &rx,0);
			strcpy(bufTx, "APP1 data:\0");
 800322a:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 800322c:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <_Z9aTaskUartPv+0x1a0>)
 800322e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003230:	c303      	stmia	r3!, {r0, r1}
 8003232:	801a      	strh	r2, [r3, #0]
 8003234:	3302      	adds	r3, #2
 8003236:	0c12      	lsrs	r2, r2, #16
 8003238:	701a      	strb	r2, [r3, #0]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 800323a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <_Z9aTaskUartPv+0x1a4>)
 8003240:	210d      	movs	r1, #13
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f98e 	bl	8003564 <_Z8rawtohexPvmPc>
 8003248:	4603      	mov	r3, r0
 800324a:	4619      	mov	r1, r3
 800324c:	4819      	ldr	r0, [pc, #100]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 800324e:	f000 fb87 	bl	8003960 <strcat>
			strcat(bufTx, "\n");
 8003252:	4818      	ldr	r0, [pc, #96]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 8003254:	f7fc ff7c 	bl	8000150 <strlen>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 800325e:	4413      	add	r3, r2
 8003260:	4917      	ldr	r1, [pc, #92]	; (80032c0 <_Z9aTaskUartPv+0x1a8>)
 8003262:	461a      	mov	r2, r3
 8003264:	460b      	mov	r3, r1
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 800326a:	4812      	ldr	r0, [pc, #72]	; (80032b4 <_Z9aTaskUartPv+0x19c>)
 800326c:	f000 f940 	bl	80034f0 <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a1TX))
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fe7b 	bl	8000f70 <uxQueueSpacesAvailable>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d073      	beq.n	8003372 <_Z9aTaskUartPv+0x25a>
			{
				tx.addrdst=88;
 800328a:	2358      	movs	r3, #88	; 0x58
 800328c:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 800328e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a1TX,&tx,0);
 8003296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	f107 011c 	add.w	r1, r7, #28
 800329e:	2300      	movs	r3, #0
 80032a0:	2200      	movs	r2, #0
 80032a2:	f7fd fbf7 	bl	8000a94 <xQueueGenericSend>
 80032a6:	e064      	b.n	8003372 <_Z9aTaskUartPv+0x25a>
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40010800 	.word	0x40010800
 80032b4:	200001dc 	.word	0x200001dc
 80032b8:	08003a84 	.word	0x08003a84
 80032bc:	20000210 	.word	0x20000210
 80032c0:	08003a90 	.word	0x08003a90
			};


		}else if(xQueueReceive( pQComm->a2RX, &rx,0)==pdPASS)
 80032c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80032cc:	2200      	movs	r2, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fd72 	bl	8000db8 <xQueueReceive>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d046      	beq.n	8003372 <_Z9aTaskUartPv+0x25a>
		{
			//xQueueReceive( pQComm->a2RX, &rx,0);
			strcat(bufTx, "APP2 data:\0");
 80032e4:	4879      	ldr	r0, [pc, #484]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80032e6:	f7fc ff33 	bl	8000150 <strlen>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b77      	ldr	r3, [pc, #476]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80032f0:	4413      	add	r3, r2
 80032f2:	4977      	ldr	r1, [pc, #476]	; (80034d0 <_Z9aTaskUartPv+0x3b8>)
 80032f4:	461a      	mov	r2, r3
 80032f6:	460b      	mov	r3, r1
 80032f8:	cb03      	ldmia	r3!, {r0, r1}
 80032fa:	6010      	str	r0, [r2, #0]
 80032fc:	6051      	str	r1, [r2, #4]
 80032fe:	8819      	ldrh	r1, [r3, #0]
 8003300:	789b      	ldrb	r3, [r3, #2]
 8003302:	8111      	strh	r1, [r2, #8]
 8003304:	7293      	strb	r3, [r2, #10]
			strcat(bufTx, rawtohex( (void*)&rx, sizeof( pack ), bufTmp ));
 8003306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800330a:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <_Z9aTaskUartPv+0x3bc>)
 800330c:	210d      	movs	r1, #13
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f928 	bl	8003564 <_Z8rawtohexPvmPc>
 8003314:	4603      	mov	r3, r0
 8003316:	4619      	mov	r1, r3
 8003318:	486c      	ldr	r0, [pc, #432]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 800331a:	f000 fb21 	bl	8003960 <strcat>
			strcat(bufTx, "\n\0");
 800331e:	486b      	ldr	r0, [pc, #428]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003320:	f7fc ff16 	bl	8000150 <strlen>
 8003324:	4603      	mov	r3, r0
 8003326:	461a      	mov	r2, r3
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 800332a:	4413      	add	r3, r2
 800332c:	496a      	ldr	r1, [pc, #424]	; (80034d8 <_Z9aTaskUartPv+0x3c0>)
 800332e:	461a      	mov	r2, r3
 8003330:	460b      	mov	r3, r1
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 8003336:	4865      	ldr	r0, [pc, #404]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003338:	f000 f8da 	bl	80034f0 <_Z9printUartPc>
			if(uxQueueSpacesAvailable(pQComm->a2TX))
 800333c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd fe15 	bl	8000f70 <uxQueueSpacesAvailable>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <_Z9aTaskUartPv+0x25a>
			{
				tx.addrdst=87;
 8003356:	2357      	movs	r3, #87	; 0x57
 8003358:	777b      	strb	r3, [r7, #29]
				tx.rssi=rx.rssi_r;
 800335a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800335e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				xQueueSend(pQComm->a2TX,&tx,0);
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	6898      	ldr	r0, [r3, #8]
 8003366:	f107 011c 	add.w	r1, r7, #28
 800336a:	2300      	movs	r3, #0
 800336c:	2200      	movs	r2, #0
 800336e:	f7fd fb91 	bl	8000a94 <xQueueGenericSend>
			};
		};
		if(xQueueReceive( pQComm->qSensor, &airData,0)==pdPASS)
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f107 010c 	add.w	r1, r7, #12
 800337a:	2200      	movs	r2, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f7fd fd1b 	bl	8000db8 <xQueueReceive>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f43f af3b 	beq.w	800320a <_Z9aTaskUartPv+0xf2>
		{
			strcat(bufTx, "CO2: ");
 8003394:	484d      	ldr	r0, [pc, #308]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003396:	f7fc fedb 	bl	8000150 <strlen>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033a0:	4413      	add	r3, r2
 80033a2:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <_Z9aTaskUartPv+0x3c4>)
 80033a4:	6810      	ldr	r0, [r2, #0]
 80033a6:	6018      	str	r0, [r3, #0]
 80033a8:	8892      	ldrh	r2, [r2, #4]
 80033aa:	809a      	strh	r2, [r3, #4]
			strcat(bufTx, itoa((int)airData.CO2, bufTmp, 10));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	220a      	movs	r2, #10
 80033b0:	4948      	ldr	r1, [pc, #288]	; (80034d4 <_Z9aTaskUartPv+0x3bc>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f9b8 	bl	8003728 <itoa>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4619      	mov	r1, r3
 80033bc:	4843      	ldr	r0, [pc, #268]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033be:	f000 facf 	bl	8003960 <strcat>
			strcat(bufTx,"\n");
 80033c2:	4842      	ldr	r0, [pc, #264]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033c4:	f7fc fec4 	bl	8000150 <strlen>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b3f      	ldr	r3, [pc, #252]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033ce:	4413      	add	r3, r2
 80033d0:	4943      	ldr	r1, [pc, #268]	; (80034e0 <_Z9aTaskUartPv+0x3c8>)
 80033d2:	461a      	mov	r2, r3
 80033d4:	460b      	mov	r3, r1
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "TVOC: ");
 80033da:	483c      	ldr	r0, [pc, #240]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033dc:	f7fc feb8 	bl	8000150 <strlen>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b39      	ldr	r3, [pc, #228]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80033e6:	4413      	add	r3, r2
 80033e8:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <_Z9aTaskUartPv+0x3cc>)
 80033ea:	6810      	ldr	r0, [r2, #0]
 80033ec:	6018      	str	r0, [r3, #0]
 80033ee:	8891      	ldrh	r1, [r2, #4]
 80033f0:	7992      	ldrb	r2, [r2, #6]
 80033f2:	8099      	strh	r1, [r3, #4]
 80033f4:	719a      	strb	r2, [r3, #6]
			strcat(bufTx, itoa((int)airData.TVOC, bufTmp, 10));
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	220a      	movs	r2, #10
 80033fa:	4936      	ldr	r1, [pc, #216]	; (80034d4 <_Z9aTaskUartPv+0x3bc>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f993 	bl	8003728 <itoa>
 8003402:	4603      	mov	r3, r0
 8003404:	4619      	mov	r1, r3
 8003406:	4831      	ldr	r0, [pc, #196]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003408:	f000 faaa 	bl	8003960 <strcat>
			strcat(bufTx,"\n");
 800340c:	482f      	ldr	r0, [pc, #188]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 800340e:	f7fc fe9f 	bl	8000150 <strlen>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	4b2d      	ldr	r3, [pc, #180]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003418:	4413      	add	r3, r2
 800341a:	4931      	ldr	r1, [pc, #196]	; (80034e0 <_Z9aTaskUartPv+0x3c8>)
 800341c:	461a      	mov	r2, r3
 800341e:	460b      	mov	r3, r1
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 8003424:	4829      	ldr	r0, [pc, #164]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003426:	f000 f863 	bl	80034f0 <_Z9printUartPc>
			strcat(bufTx, "Temp: ");
 800342a:	4828      	ldr	r0, [pc, #160]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 800342c:	f7fc fe90 	bl	8000150 <strlen>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003436:	4413      	add	r3, r2
 8003438:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <_Z9aTaskUartPv+0x3d0>)
 800343a:	6810      	ldr	r0, [r2, #0]
 800343c:	6018      	str	r0, [r3, #0]
 800343e:	8891      	ldrh	r1, [r2, #4]
 8003440:	7992      	ldrb	r2, [r2, #6]
 8003442:	8099      	strh	r1, [r3, #4]
 8003444:	719a      	strb	r2, [r3, #6]
			strcat(bufTx, itoa((int)airData.temp, bufTmp, 10));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	220a      	movs	r2, #10
 800344a:	4922      	ldr	r1, [pc, #136]	; (80034d4 <_Z9aTaskUartPv+0x3bc>)
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f96b 	bl	8003728 <itoa>
 8003452:	4603      	mov	r3, r0
 8003454:	4619      	mov	r1, r3
 8003456:	481d      	ldr	r0, [pc, #116]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003458:	f000 fa82 	bl	8003960 <strcat>
			strcat(bufTx,"\n");
 800345c:	481b      	ldr	r0, [pc, #108]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 800345e:	f7fc fe77 	bl	8000150 <strlen>
 8003462:	4603      	mov	r3, r0
 8003464:	461a      	mov	r2, r3
 8003466:	4b19      	ldr	r3, [pc, #100]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003468:	4413      	add	r3, r2
 800346a:	491d      	ldr	r1, [pc, #116]	; (80034e0 <_Z9aTaskUartPv+0x3c8>)
 800346c:	461a      	mov	r2, r3
 800346e:	460b      	mov	r3, r1
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	8013      	strh	r3, [r2, #0]
			strcat(bufTx, "Humidity: ");
 8003474:	4815      	ldr	r0, [pc, #84]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003476:	f7fc fe6b 	bl	8000150 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 8003480:	4413      	add	r3, r2
 8003482:	491a      	ldr	r1, [pc, #104]	; (80034ec <_Z9aTaskUartPv+0x3d4>)
 8003484:	461a      	mov	r2, r3
 8003486:	460b      	mov	r3, r1
 8003488:	cb03      	ldmia	r3!, {r0, r1}
 800348a:	6010      	str	r0, [r2, #0]
 800348c:	6051      	str	r1, [r2, #4]
 800348e:	8819      	ldrh	r1, [r3, #0]
 8003490:	789b      	ldrb	r3, [r3, #2]
 8003492:	8111      	strh	r1, [r2, #8]
 8003494:	7293      	strb	r3, [r2, #10]
			strcat(bufTx, itoa((int)airData.humidity, bufTmp, 10));
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	220a      	movs	r2, #10
 800349a:	490e      	ldr	r1, [pc, #56]	; (80034d4 <_Z9aTaskUartPv+0x3bc>)
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f943 	bl	8003728 <itoa>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4619      	mov	r1, r3
 80034a6:	4809      	ldr	r0, [pc, #36]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80034a8:	f000 fa5a 	bl	8003960 <strcat>
			strcat(bufTx,"\n");
 80034ac:	4807      	ldr	r0, [pc, #28]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80034ae:	f7fc fe4f 	bl	8000150 <strlen>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80034b8:	4413      	add	r3, r2
 80034ba:	4909      	ldr	r1, [pc, #36]	; (80034e0 <_Z9aTaskUartPv+0x3c8>)
 80034bc:	461a      	mov	r2, r3
 80034be:	460b      	mov	r3, r1
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	8013      	strh	r3, [r2, #0]
			printUart(bufTx);
 80034c4:	4801      	ldr	r0, [pc, #4]	; (80034cc <_Z9aTaskUartPv+0x3b4>)
 80034c6:	f000 f813 	bl	80034f0 <_Z9printUartPc>
		if(xQueueReceive( pQComm->a1RX, &rx,0)==pdPASS)
 80034ca:	e69e      	b.n	800320a <_Z9aTaskUartPv+0xf2>
 80034cc:	200001dc 	.word	0x200001dc
 80034d0:	08003a94 	.word	0x08003a94
 80034d4:	20000210 	.word	0x20000210
 80034d8:	08003aa0 	.word	0x08003aa0
 80034dc:	08003aa4 	.word	0x08003aa4
 80034e0:	08003a90 	.word	0x08003a90
 80034e4:	08003aac 	.word	0x08003aac
 80034e8:	08003ab4 	.word	0x08003ab4
 80034ec:	08003abc 	.word	0x08003abc

080034f0 <_Z9printUartPc>:

	}

}
void printUart(char * str)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	int i=0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d016      	beq.n	8003536 <_Z9printUartPc+0x46>
	{
		if ((USART1->SR & USART_SR_TXE)){
 8003508:	4b15      	ldr	r3, [pc, #84]	; (8003560 <_Z9printUartPc+0x70>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ed      	beq.n	80034fc <_Z9printUartPc+0xc>
		USART1->DR=str[i];
 8003520:	490f      	ldr	r1, [pc, #60]	; (8003560 <_Z9printUartPc+0x70>)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	808b      	strh	r3, [r1, #4]
		i++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
	while (str[i]!=0)
 8003534:	e7e2      	b.n	80034fc <_Z9printUartPc+0xc>
		};
	}
	while (!(USART1->SR & USART_SR_TXE));
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <_Z9printUartPc+0x70>)
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d000      	beq.n	8003550 <_Z9printUartPc+0x60>
 800354e:	e7f2      	b.n	8003536 <_Z9printUartPc+0x46>
	//USART1->CR1|= USART_CR1_SBK;
	str[0]=0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]

}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40013800 	.word	0x40013800

08003564 <_Z8rawtohexPvmPc>:

char* rawtohex(void* data, uint32_t count,  char * str)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
	uint32_t i=0, is=0;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
	while (i<count)
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d269      	bcs.n	8003654 <_Z8rawtohexPvmPc+0xf0>
	{
		char b, c=0;
 8003580:	2300      	movs	r3, #0
 8003582:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 8003584:	7dbb      	ldrb	r3, [r7, #22]
 8003586:	2b01      	cmp	r3, #1
 8003588:	dc58      	bgt.n	800363c <_Z8rawtohexPvmPc+0xd8>
		{
			if (c==0) b= ( *((uint8_t*)data+i) >> 4 ) & 0x0f; else b = *((uint8_t*)data+i) & 0x0f;
 800358a:	7dbb      	ldrb	r3, [r7, #22]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d106      	bne.n	800359e <_Z8rawtohexPvmPc+0x3a>
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	75fb      	strb	r3, [r7, #23]
 800359c:	e006      	b.n	80035ac <_Z8rawtohexPvmPc+0x48>
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	75fb      	strb	r3, [r7, #23]
			switch (b)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d838      	bhi.n	8003624 <_Z8rawtohexPvmPc+0xc0>
 80035b2:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <_Z8rawtohexPvmPc+0x54>)
 80035b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b8:	080035f9 	.word	0x080035f9
 80035bc:	080035f9 	.word	0x080035f9
 80035c0:	080035f9 	.word	0x080035f9
 80035c4:	080035f9 	.word	0x080035f9
 80035c8:	080035f9 	.word	0x080035f9
 80035cc:	080035f9 	.word	0x080035f9
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	080035f9 	.word	0x080035f9
 80035dc:	080035f9 	.word	0x080035f9
 80035e0:	08003601 	.word	0x08003601
 80035e4:	08003607 	.word	0x08003607
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	08003613 	.word	0x08003613
 80035f0:	08003619 	.word	0x08003619
 80035f4:	0800361f 	.word	0x0800361f
			{
			case 0: case 1:	case 2:	case 3:	case 4:	case 5:	case 6:	case 7:	case 8:	case 9:
			{
				b+=0x30; break;
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	3330      	adds	r3, #48	; 0x30
 80035fc:	75fb      	strb	r3, [r7, #23]
 80035fe:	e011      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			};
			case 10: b='A'; break;
 8003600:	2341      	movs	r3, #65	; 0x41
 8003602:	75fb      	strb	r3, [r7, #23]
 8003604:	e00e      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			case 11: b='B'; break;
 8003606:	2342      	movs	r3, #66	; 0x42
 8003608:	75fb      	strb	r3, [r7, #23]
 800360a:	e00b      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			case 12: b='C'; break;
 800360c:	2343      	movs	r3, #67	; 0x43
 800360e:	75fb      	strb	r3, [r7, #23]
 8003610:	e008      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			case 13: b='D'; break;
 8003612:	2344      	movs	r3, #68	; 0x44
 8003614:	75fb      	strb	r3, [r7, #23]
 8003616:	e005      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			case 14: b='E'; break;
 8003618:	2345      	movs	r3, #69	; 0x45
 800361a:	75fb      	strb	r3, [r7, #23]
 800361c:	e002      	b.n	8003624 <_Z8rawtohexPvmPc+0xc0>
			case 15: b='F'; break;
 800361e:	2346      	movs	r3, #70	; 0x46
 8003620:	75fb      	strb	r3, [r7, #23]
 8003622:	bf00      	nop
			}
			str[is]=b;
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	7dfa      	ldrb	r2, [r7, #23]
 800362c:	701a      	strb	r2, [r3, #0]
			is++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3301      	adds	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
			c++;
 8003634:	7dbb      	ldrb	r3, [r7, #22]
 8003636:	3301      	adds	r3, #1
 8003638:	75bb      	strb	r3, [r7, #22]
		while (c<2)
 800363a:	e7a3      	b.n	8003584 <_Z8rawtohexPvmPc+0x20>
		}
		str[is]=',';
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	222c      	movs	r2, #44	; 0x2c
 8003644:	701a      	strb	r2, [r3, #0]
		is++;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3301      	adds	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
		i++;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
	while (i<count)
 8003652:	e791      	b.n	8003578 <_Z8rawtohexPvmPc+0x14>
	}
	str[is-1]=0;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	3b01      	subs	r3, #1
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
	return str;
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <_Znwj>:
 800366c:	b510      	push	{r4, lr}
 800366e:	2800      	cmp	r0, #0
 8003670:	bf14      	ite	ne
 8003672:	4604      	movne	r4, r0
 8003674:	2401      	moveq	r4, #1
 8003676:	4620      	mov	r0, r4
 8003678:	f000 f858 	bl	800372c <malloc>
 800367c:	b930      	cbnz	r0, 800368c <_Znwj+0x20>
 800367e:	f000 f807 	bl	8003690 <_ZSt15get_new_handlerv>
 8003682:	b908      	cbnz	r0, 8003688 <_Znwj+0x1c>
 8003684:	f000 f80c 	bl	80036a0 <abort>
 8003688:	4780      	blx	r0
 800368a:	e7f4      	b.n	8003676 <_Znwj+0xa>
 800368c:	bd10      	pop	{r4, pc}
	...

08003690 <_ZSt15get_new_handlerv>:
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <_ZSt15get_new_handlerv+0xc>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	f3bf 8f5b 	dmb	ish
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20000244 	.word	0x20000244

080036a0 <abort>:
 80036a0:	b508      	push	{r3, lr}
 80036a2:	2006      	movs	r0, #6
 80036a4:	f000 f940 	bl	8003928 <raise>
 80036a8:	2001      	movs	r0, #1
 80036aa:	f000 f9c9 	bl	8003a40 <_exit>
	...

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	2500      	movs	r5, #0
 80036b4:	4e0c      	ldr	r6, [pc, #48]	; (80036e8 <__libc_init_array+0x38>)
 80036b6:	4c0d      	ldr	r4, [pc, #52]	; (80036ec <__libc_init_array+0x3c>)
 80036b8:	1ba4      	subs	r4, r4, r6
 80036ba:	10a4      	asrs	r4, r4, #2
 80036bc:	42a5      	cmp	r5, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	f000 f9c0 	bl	8003a44 <_init>
 80036c4:	2500      	movs	r5, #0
 80036c6:	4e0a      	ldr	r6, [pc, #40]	; (80036f0 <__libc_init_array+0x40>)
 80036c8:	4c0a      	ldr	r4, [pc, #40]	; (80036f4 <__libc_init_array+0x44>)
 80036ca:	1ba4      	subs	r4, r4, r6
 80036cc:	10a4      	asrs	r4, r4, #2
 80036ce:	42a5      	cmp	r5, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036d8:	4798      	blx	r3
 80036da:	3501      	adds	r5, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e2:	4798      	blx	r3
 80036e4:	3501      	adds	r5, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08003aec 	.word	0x08003aec
 80036ec:	08003aec 	.word	0x08003aec
 80036f0:	08003aec 	.word	0x08003aec
 80036f4:	08003af0 	.word	0x08003af0

080036f8 <__itoa>:
 80036f8:	1e93      	subs	r3, r2, #2
 80036fa:	2b22      	cmp	r3, #34	; 0x22
 80036fc:	b510      	push	{r4, lr}
 80036fe:	460c      	mov	r4, r1
 8003700:	d904      	bls.n	800370c <__itoa+0x14>
 8003702:	2300      	movs	r3, #0
 8003704:	461c      	mov	r4, r3
 8003706:	700b      	strb	r3, [r1, #0]
 8003708:	4620      	mov	r0, r4
 800370a:	bd10      	pop	{r4, pc}
 800370c:	2a0a      	cmp	r2, #10
 800370e:	d109      	bne.n	8003724 <__itoa+0x2c>
 8003710:	2800      	cmp	r0, #0
 8003712:	da07      	bge.n	8003724 <__itoa+0x2c>
 8003714:	232d      	movs	r3, #45	; 0x2d
 8003716:	700b      	strb	r3, [r1, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	4240      	negs	r0, r0
 800371c:	4421      	add	r1, r4
 800371e:	f000 f92f 	bl	8003980 <__utoa>
 8003722:	e7f1      	b.n	8003708 <__itoa+0x10>
 8003724:	2100      	movs	r1, #0
 8003726:	e7f9      	b.n	800371c <__itoa+0x24>

08003728 <itoa>:
 8003728:	f7ff bfe6 	b.w	80036f8 <__itoa>

0800372c <malloc>:
 800372c:	4b02      	ldr	r3, [pc, #8]	; (8003738 <malloc+0xc>)
 800372e:	4601      	mov	r1, r0
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	f000 b863 	b.w	80037fc <_malloc_r>
 8003736:	bf00      	nop
 8003738:	2000003c 	.word	0x2000003c

0800373c <free>:
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <free+0xc>)
 800373e:	4601      	mov	r1, r0
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	f000 b80f 	b.w	8003764 <_free_r>
 8003746:	bf00      	nop
 8003748:	2000003c 	.word	0x2000003c

0800374c <memcpy>:
 800374c:	b510      	push	{r4, lr}
 800374e:	1e43      	subs	r3, r0, #1
 8003750:	440a      	add	r2, r1
 8003752:	4291      	cmp	r1, r2
 8003754:	d100      	bne.n	8003758 <memcpy+0xc>
 8003756:	bd10      	pop	{r4, pc}
 8003758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003760:	e7f7      	b.n	8003752 <memcpy+0x6>
	...

08003764 <_free_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4605      	mov	r5, r0
 8003768:	2900      	cmp	r1, #0
 800376a:	d043      	beq.n	80037f4 <_free_r+0x90>
 800376c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003770:	1f0c      	subs	r4, r1, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	bfb8      	it	lt
 8003776:	18e4      	addlt	r4, r4, r3
 8003778:	f000 f942 	bl	8003a00 <__malloc_lock>
 800377c:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <_free_r+0x94>)
 800377e:	6813      	ldr	r3, [r2, #0]
 8003780:	4610      	mov	r0, r2
 8003782:	b933      	cbnz	r3, 8003792 <_free_r+0x2e>
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	6014      	str	r4, [r2, #0]
 8003788:	4628      	mov	r0, r5
 800378a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378e:	f000 b938 	b.w	8003a02 <__malloc_unlock>
 8003792:	42a3      	cmp	r3, r4
 8003794:	d90b      	bls.n	80037ae <_free_r+0x4a>
 8003796:	6821      	ldr	r1, [r4, #0]
 8003798:	1862      	adds	r2, r4, r1
 800379a:	4293      	cmp	r3, r2
 800379c:	bf01      	itttt	eq
 800379e:	681a      	ldreq	r2, [r3, #0]
 80037a0:	685b      	ldreq	r3, [r3, #4]
 80037a2:	1852      	addeq	r2, r2, r1
 80037a4:	6022      	streq	r2, [r4, #0]
 80037a6:	6063      	str	r3, [r4, #4]
 80037a8:	6004      	str	r4, [r0, #0]
 80037aa:	e7ed      	b.n	8003788 <_free_r+0x24>
 80037ac:	4613      	mov	r3, r2
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	b10a      	cbz	r2, 80037b6 <_free_r+0x52>
 80037b2:	42a2      	cmp	r2, r4
 80037b4:	d9fa      	bls.n	80037ac <_free_r+0x48>
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	1858      	adds	r0, r3, r1
 80037ba:	42a0      	cmp	r0, r4
 80037bc:	d10b      	bne.n	80037d6 <_free_r+0x72>
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	4401      	add	r1, r0
 80037c2:	1858      	adds	r0, r3, r1
 80037c4:	4282      	cmp	r2, r0
 80037c6:	6019      	str	r1, [r3, #0]
 80037c8:	d1de      	bne.n	8003788 <_free_r+0x24>
 80037ca:	6810      	ldr	r0, [r2, #0]
 80037cc:	6852      	ldr	r2, [r2, #4]
 80037ce:	4401      	add	r1, r0
 80037d0:	6019      	str	r1, [r3, #0]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	e7d8      	b.n	8003788 <_free_r+0x24>
 80037d6:	d902      	bls.n	80037de <_free_r+0x7a>
 80037d8:	230c      	movs	r3, #12
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	e7d4      	b.n	8003788 <_free_r+0x24>
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	1821      	adds	r1, r4, r0
 80037e2:	428a      	cmp	r2, r1
 80037e4:	bf01      	itttt	eq
 80037e6:	6811      	ldreq	r1, [r2, #0]
 80037e8:	6852      	ldreq	r2, [r2, #4]
 80037ea:	1809      	addeq	r1, r1, r0
 80037ec:	6021      	streq	r1, [r4, #0]
 80037ee:	6062      	str	r2, [r4, #4]
 80037f0:	605c      	str	r4, [r3, #4]
 80037f2:	e7c9      	b.n	8003788 <_free_r+0x24>
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
 80037f6:	bf00      	nop
 80037f8:	20000248 	.word	0x20000248

080037fc <_malloc_r>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	1ccd      	adds	r5, r1, #3
 8003800:	f025 0503 	bic.w	r5, r5, #3
 8003804:	3508      	adds	r5, #8
 8003806:	2d0c      	cmp	r5, #12
 8003808:	bf38      	it	cc
 800380a:	250c      	movcc	r5, #12
 800380c:	2d00      	cmp	r5, #0
 800380e:	4606      	mov	r6, r0
 8003810:	db01      	blt.n	8003816 <_malloc_r+0x1a>
 8003812:	42a9      	cmp	r1, r5
 8003814:	d903      	bls.n	800381e <_malloc_r+0x22>
 8003816:	230c      	movs	r3, #12
 8003818:	6033      	str	r3, [r6, #0]
 800381a:	2000      	movs	r0, #0
 800381c:	bd70      	pop	{r4, r5, r6, pc}
 800381e:	f000 f8ef 	bl	8003a00 <__malloc_lock>
 8003822:	4a23      	ldr	r2, [pc, #140]	; (80038b0 <_malloc_r+0xb4>)
 8003824:	6814      	ldr	r4, [r2, #0]
 8003826:	4621      	mov	r1, r4
 8003828:	b991      	cbnz	r1, 8003850 <_malloc_r+0x54>
 800382a:	4c22      	ldr	r4, [pc, #136]	; (80038b4 <_malloc_r+0xb8>)
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	b91b      	cbnz	r3, 8003838 <_malloc_r+0x3c>
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f841 	bl	80038b8 <_sbrk_r>
 8003836:	6020      	str	r0, [r4, #0]
 8003838:	4629      	mov	r1, r5
 800383a:	4630      	mov	r0, r6
 800383c:	f000 f83c 	bl	80038b8 <_sbrk_r>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d126      	bne.n	8003892 <_malloc_r+0x96>
 8003844:	230c      	movs	r3, #12
 8003846:	4630      	mov	r0, r6
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	f000 f8da 	bl	8003a02 <__malloc_unlock>
 800384e:	e7e4      	b.n	800381a <_malloc_r+0x1e>
 8003850:	680b      	ldr	r3, [r1, #0]
 8003852:	1b5b      	subs	r3, r3, r5
 8003854:	d41a      	bmi.n	800388c <_malloc_r+0x90>
 8003856:	2b0b      	cmp	r3, #11
 8003858:	d90f      	bls.n	800387a <_malloc_r+0x7e>
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	18cc      	adds	r4, r1, r3
 800385e:	50cd      	str	r5, [r1, r3]
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f8ce 	bl	8003a02 <__malloc_unlock>
 8003866:	f104 000b 	add.w	r0, r4, #11
 800386a:	1d23      	adds	r3, r4, #4
 800386c:	f020 0007 	bic.w	r0, r0, #7
 8003870:	1ac3      	subs	r3, r0, r3
 8003872:	d01b      	beq.n	80038ac <_malloc_r+0xb0>
 8003874:	425a      	negs	r2, r3
 8003876:	50e2      	str	r2, [r4, r3]
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	428c      	cmp	r4, r1
 800387c:	bf0b      	itete	eq
 800387e:	6863      	ldreq	r3, [r4, #4]
 8003880:	684b      	ldrne	r3, [r1, #4]
 8003882:	6013      	streq	r3, [r2, #0]
 8003884:	6063      	strne	r3, [r4, #4]
 8003886:	bf18      	it	ne
 8003888:	460c      	movne	r4, r1
 800388a:	e7e9      	b.n	8003860 <_malloc_r+0x64>
 800388c:	460c      	mov	r4, r1
 800388e:	6849      	ldr	r1, [r1, #4]
 8003890:	e7ca      	b.n	8003828 <_malloc_r+0x2c>
 8003892:	1cc4      	adds	r4, r0, #3
 8003894:	f024 0403 	bic.w	r4, r4, #3
 8003898:	42a0      	cmp	r0, r4
 800389a:	d005      	beq.n	80038a8 <_malloc_r+0xac>
 800389c:	1a21      	subs	r1, r4, r0
 800389e:	4630      	mov	r0, r6
 80038a0:	f000 f80a 	bl	80038b8 <_sbrk_r>
 80038a4:	3001      	adds	r0, #1
 80038a6:	d0cd      	beq.n	8003844 <_malloc_r+0x48>
 80038a8:	6025      	str	r5, [r4, #0]
 80038aa:	e7d9      	b.n	8003860 <_malloc_r+0x64>
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
 80038ae:	bf00      	nop
 80038b0:	20000248 	.word	0x20000248
 80038b4:	2000024c 	.word	0x2000024c

080038b8 <_sbrk_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	2300      	movs	r3, #0
 80038bc:	4c05      	ldr	r4, [pc, #20]	; (80038d4 <_sbrk_r+0x1c>)
 80038be:	4605      	mov	r5, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	f000 f8ae 	bl	8003a24 <_sbrk>
 80038c8:	1c43      	adds	r3, r0, #1
 80038ca:	d102      	bne.n	80038d2 <_sbrk_r+0x1a>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	b103      	cbz	r3, 80038d2 <_sbrk_r+0x1a>
 80038d0:	602b      	str	r3, [r5, #0]
 80038d2:	bd38      	pop	{r3, r4, r5, pc}
 80038d4:	20000254 	.word	0x20000254

080038d8 <_raise_r>:
 80038d8:	291f      	cmp	r1, #31
 80038da:	b538      	push	{r3, r4, r5, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	460d      	mov	r5, r1
 80038e0:	d904      	bls.n	80038ec <_raise_r+0x14>
 80038e2:	2316      	movs	r3, #22
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80038ee:	b112      	cbz	r2, 80038f6 <_raise_r+0x1e>
 80038f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80038f4:	b94b      	cbnz	r3, 800390a <_raise_r+0x32>
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f830 	bl	800395c <_getpid_r>
 80038fc:	462a      	mov	r2, r5
 80038fe:	4601      	mov	r1, r0
 8003900:	4620      	mov	r0, r4
 8003902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003906:	f000 b817 	b.w	8003938 <_kill_r>
 800390a:	2b01      	cmp	r3, #1
 800390c:	d00a      	beq.n	8003924 <_raise_r+0x4c>
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	d103      	bne.n	800391a <_raise_r+0x42>
 8003912:	2316      	movs	r3, #22
 8003914:	6003      	str	r3, [r0, #0]
 8003916:	2001      	movs	r0, #1
 8003918:	bd38      	pop	{r3, r4, r5, pc}
 800391a:	2400      	movs	r4, #0
 800391c:	4628      	mov	r0, r5
 800391e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003922:	4798      	blx	r3
 8003924:	2000      	movs	r0, #0
 8003926:	bd38      	pop	{r3, r4, r5, pc}

08003928 <raise>:
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <raise+0xc>)
 800392a:	4601      	mov	r1, r0
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	f7ff bfd3 	b.w	80038d8 <_raise_r>
 8003932:	bf00      	nop
 8003934:	2000003c 	.word	0x2000003c

08003938 <_kill_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	2300      	movs	r3, #0
 800393c:	4c06      	ldr	r4, [pc, #24]	; (8003958 <_kill_r+0x20>)
 800393e:	4605      	mov	r5, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	f000 f865 	bl	8003a14 <_kill>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	d102      	bne.n	8003954 <_kill_r+0x1c>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	b103      	cbz	r3, 8003954 <_kill_r+0x1c>
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	bd38      	pop	{r3, r4, r5, pc}
 8003956:	bf00      	nop
 8003958:	20000254 	.word	0x20000254

0800395c <_getpid_r>:
 800395c:	f000 b852 	b.w	8003a04 <_getpid>

08003960 <strcat>:
 8003960:	4602      	mov	r2, r0
 8003962:	b510      	push	{r4, lr}
 8003964:	4613      	mov	r3, r2
 8003966:	781c      	ldrb	r4, [r3, #0]
 8003968:	3201      	adds	r2, #1
 800396a:	2c00      	cmp	r4, #0
 800396c:	d1fa      	bne.n	8003964 <strcat+0x4>
 800396e:	3b01      	subs	r3, #1
 8003970:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003974:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003978:	2a00      	cmp	r2, #0
 800397a:	d1f9      	bne.n	8003970 <strcat+0x10>
 800397c:	bd10      	pop	{r4, pc}
	...

08003980 <__utoa>:
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b08b      	sub	sp, #44	; 0x2c
 8003984:	4603      	mov	r3, r0
 8003986:	460f      	mov	r7, r1
 8003988:	466d      	mov	r5, sp
 800398a:	4c1c      	ldr	r4, [pc, #112]	; (80039fc <__utoa+0x7c>)
 800398c:	f104 0e20 	add.w	lr, r4, #32
 8003990:	462e      	mov	r6, r5
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	6861      	ldr	r1, [r4, #4]
 8003996:	3408      	adds	r4, #8
 8003998:	c603      	stmia	r6!, {r0, r1}
 800399a:	4574      	cmp	r4, lr
 800399c:	4635      	mov	r5, r6
 800399e:	d1f7      	bne.n	8003990 <__utoa+0x10>
 80039a0:	7921      	ldrb	r1, [r4, #4]
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	7131      	strb	r1, [r6, #4]
 80039a6:	1e91      	subs	r1, r2, #2
 80039a8:	2922      	cmp	r1, #34	; 0x22
 80039aa:	6030      	str	r0, [r6, #0]
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	d904      	bls.n	80039bc <__utoa+0x3c>
 80039b2:	7039      	strb	r1, [r7, #0]
 80039b4:	460f      	mov	r7, r1
 80039b6:	4638      	mov	r0, r7
 80039b8:	b00b      	add	sp, #44	; 0x2c
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	1e78      	subs	r0, r7, #1
 80039be:	4606      	mov	r6, r0
 80039c0:	fbb3 f5f2 	udiv	r5, r3, r2
 80039c4:	fb02 3315 	mls	r3, r2, r5, r3
 80039c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80039cc:	4473      	add	r3, lr
 80039ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039d2:	1c4c      	adds	r4, r1, #1
 80039d4:	f806 3f01 	strb.w	r3, [r6, #1]!
 80039d8:	462b      	mov	r3, r5
 80039da:	b965      	cbnz	r5, 80039f6 <__utoa+0x76>
 80039dc:	553d      	strb	r5, [r7, r4]
 80039de:	187a      	adds	r2, r7, r1
 80039e0:	1acc      	subs	r4, r1, r3
 80039e2:	42a3      	cmp	r3, r4
 80039e4:	dae7      	bge.n	80039b6 <__utoa+0x36>
 80039e6:	7844      	ldrb	r4, [r0, #1]
 80039e8:	7815      	ldrb	r5, [r2, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	f800 5f01 	strb.w	r5, [r0, #1]!
 80039f0:	f802 4901 	strb.w	r4, [r2], #-1
 80039f4:	e7f4      	b.n	80039e0 <__utoa+0x60>
 80039f6:	4621      	mov	r1, r4
 80039f8:	e7e2      	b.n	80039c0 <__utoa+0x40>
 80039fa:	bf00      	nop
 80039fc:	08003ac7 	.word	0x08003ac7

08003a00 <__malloc_lock>:
 8003a00:	4770      	bx	lr

08003a02 <__malloc_unlock>:
 8003a02:	4770      	bx	lr

08003a04 <_getpid>:
 8003a04:	2258      	movs	r2, #88	; 0x58
 8003a06:	4b02      	ldr	r3, [pc, #8]	; (8003a10 <_getpid+0xc>)
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4770      	bx	lr
 8003a10:	20000254 	.word	0x20000254

08003a14 <_kill>:
 8003a14:	2258      	movs	r2, #88	; 0x58
 8003a16:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <_kill+0xc>)
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4770      	bx	lr
 8003a20:	20000254 	.word	0x20000254

08003a24 <_sbrk>:
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <_sbrk+0x14>)
 8003a26:	4602      	mov	r2, r0
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	b909      	cbnz	r1, 8003a30 <_sbrk+0xc>
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <_sbrk+0x18>)
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	6818      	ldr	r0, [r3, #0]
 8003a32:	4402      	add	r2, r0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	4770      	bx	lr
 8003a38:	20000250 	.word	0x20000250
 8003a3c:	20000258 	.word	0x20000258

08003a40 <_exit>:
 8003a40:	e7fe      	b.n	8003a40 <_exit>
	...

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
